{"version":3,"file":"SettingsLayout-60709f48.js","sources":["../../node_modules/lucide-react/dist/esm/icons/network.js","../../src/components/pages/Settings/SettingsLayout.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.438.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Network = createLucideIcon(\"Network\", [\n  [\"rect\", { x: \"16\", y: \"16\", width: \"6\", height: \"6\", rx: \"1\", key: \"4q2zg0\" }],\n  [\"rect\", { x: \"2\", y: \"16\", width: \"6\", height: \"6\", rx: \"1\", key: \"8cvhb9\" }],\n  [\"rect\", { x: \"9\", y: \"2\", width: \"6\", height: \"6\", rx: \"1\", key: \"1egb70\" }],\n  [\"path\", { d: \"M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3\", key: \"1jsf9p\" }],\n  [\"path\", { d: \"M12 12V8\", key: \"2874zd\" }]\n]);\n\nexport { Network as default };\n//# sourceMappingURL=network.js.map\n","import { BrandLogo } from '@src/components/icons';\nimport { NavBar } from '@src/components/layout';\nimport Footer from '@src/components/layout/Footer/Footer';\nimport { NetworkIcon } from 'lucide-react';\nimport { Link, Outlet, useLocation } from 'react-router-dom';\n\nimport './styles.css';\n\nconst settingsRoutes = [\n  {\n    name: 'ArNS Registry',\n    path: 'arns',\n    icon: <BrandLogo className=\"size-4\" fill={'inherit'} />,\n  },\n  {\n    name: 'Network',\n    path: 'network',\n    icon: <NetworkIcon className=\"size-4\" fill={'none'} />,\n  },\n];\n\nfunction SettingsLayout() {\n  const location = useLocation();\n  const isSettingsRoot = location?.pathname?.split('/')?.at(-1) == 'settings';\n\n  return (\n    <div className=\"flex flex-col w-full h-screen box-border\">\n      <div className=\"bg-foreground\">\n        <NavBar />\n      </div>\n      <div className=\"flex flex-col w-full h-full px-[100px] py-[30px]\">\n        <div className=\"flex flex-col w-full rounded-t-xl  border-x-[1px] border-t-[1px] border-dark-grey p-2\">\n          <div\n            className=\"flex flex-row text-white text-sm pl-3\"\n            style={{ gap: '15px' }}\n          >\n            <Link\n              to={'/settings'}\n              className={\n                isSettingsRoot\n                  ? ''\n                  : 'text-grey' + ' hover:text-primary transition-all'\n              }\n            >\n              Settings\n            </Link>{' '}\n            <span className=\"text-dark-grey\">{isSettingsRoot ? '' : '>'}</span>{' '}\n            {\n              settingsRoutes.find(\n                (route) => location?.pathname?.split('/')?.at(-1) == route.path,\n              )?.name\n            }\n          </div>\n        </div>\n        <div\n          className=\"flex flex-row w-full h-full rounded-xl rounded-t-none border-dark-grey border-[1px]\"\n          style={{ gap: 0 }}\n        >\n          <div className=\"flex flex-col w-fit h-full text-white max-w-[300px] border-r-[1px] border-dark-grey rounded-bl-xl\">\n            <div className=\"flex flex-col py-2 pt-4 px-4 gap-3\">\n              {settingsRoutes.map((route) => (\n                <Link\n                  key={route.path}\n                  to={route.path}\n                  className={`${\n                    location?.pathname?.split('/')?.at(-1) == route.path\n                      ? 'bg-[#222224] text-white fill-white'\n                      : ' text-white fill-white  opacity-[0.4]'\n                  } flex  flex-row py-1.5 px-4 items-center justify-start whitespace-nowrap rounded-md hover:opacity-100 transition-all text-sm`}\n                  style={{ gap: '5px' }}\n                >\n                  {route.icon}\n                  <span className=\"ml-2\">{route.name}</span>\n                </Link>\n              ))}\n            </div>\n          </div>\n          <Outlet />\n        </div>\n      </div>{' '}\n      <Footer />\n    </div>\n  );\n}\n\nexport default SettingsLayout;\n"],"names":["Network","createLucideIcon","settingsRoutes","jsxRuntimeExports","SvgBrandLogo","SettingsLayout","location","useLocation","isSettingsRoot","_b","_a","NavBar","Link","_c","route","Outlet","Footer"],"mappings":"uZAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAAA,EAAAC,EAAA,UAAA,CACA,CAAA,OAAA,CAAA,EAAA,KAAA,EAAA,KAAA,MAAA,IAAA,OAAA,IAAA,GAAA,IAAA,IAAA,QAAA,CAAA,EACA,CAAA,OAAA,CAAA,EAAA,IAAA,EAAA,KAAA,MAAA,IAAA,OAAA,IAAA,GAAA,IAAA,IAAA,QAAA,CAAA,EACA,CAAA,OAAA,CAAA,EAAA,IAAA,EAAA,IAAA,MAAA,IAAA,OAAA,IAAA,GAAA,IAAA,IAAA,QAAA,CAAA,EACA,CAAA,OAAA,CAAA,EAAA,4CAAA,IAAA,QAAA,CAAA,EACA,CAAA,OAAA,CAAA,EAAA,WAAA,IAAA,QAAA,CAAA,CACA,CAAA,ECPAC,EAAA,CAAA,CACA,KAAA,gBACA,KAAA,OACA,KAAAC,EAAA,IAAAC,EAAA,CAAA,UAAA,SAAA,KAAA,SAAA,CAAA,CACA,EACA,CACA,KAAA,UACA,KAAA,UACA,KAAAD,EAAA,IAAAH,EAAA,CAAA,UAAA,SAAA,KAAA,MAAA,CAAA,CACA,CAEA,EAEA,SAAAK,GAAA,WACA,MAAAC,EAAAC,EAAA,EACAC,IAAAC,GAAAC,EAAAJ,GAAA,YAAAA,EAAA,WAAA,YAAAI,EAAA,MAAA,OAAA,YAAAD,EAAA,GAAA,MAAA,WAEA,OAAAN,EAAA,KAAA,MAAA,CAAA,UAAA,2CAAA,SAAA,CAEAA,EAAA,IAAA,MAAA,CAAA,UAAA,gBAAA,SAAAA,EAAA,IAAAQ,EAAA,CAAA,CAAA,CAAA,CAAA,EAEAR,EAAA,KAAA,MAAA,CAAA,UAAA,mDAAA,SAAA,CAEAA,EAAA,IAAA,MAAA,CAAA,UAAA,wFAAA,SAAAA,EAAA,KACA,MAAA,CAAA,UAAA,wCACA,MAAA,CAAA,IAAA,MAAA,EACA,SAAA,CAEAA,EAAA,IAAAS,EAAA,CAAA,GAAA,YACA,UAAAJ,EAAA,GAAA,8CAIA,SAAA,UAEA,CAAA,EAEA,IAAAL,EAAA,IAAA,OAAA,CAAA,UAAA,iBAAA,SAAAK,EAAA,GAAA,GAAA,CAAA,EACA,KAAAK,EAAAX,EAAA,KAEAY,GAAA,SAAA,QAAAL,GAAAC,EAAAJ,GAAA,YAAAA,EAAA,WAAA,YAAAI,EAAA,MAAA,OAAA,YAAAD,EAAA,GAAA,MAAAK,EAAA,KACA,IAHA,YAAAD,EAGA,IACA,CAAA,CAAA,CAAA,CAAA,EAGAV,EAAA,KACA,MAAA,CAAA,UAAA,sFACA,MAAA,CAAA,IAAA,CAAA,EACA,SAAA,CAEAA,EAAA,IAAA,MAAA,CAAA,UAAA,oGAAA,SAAAA,EAAA,IAAA,MAAA,CAAA,UAAA,qCAAA,SAAAD,EAAA,IAAAY,GAAA,SAAA,OAAAX,EAAA,KAGAS,EAAA,CAAA,GAAAE,EAAA,KAEA,UAAA,KAAAL,GAAAC,EAAAJ,GAAA,YAAAA,EAAA,WAAA,YAAAI,EAAA,MAAA,OAAA,YAAAD,EAAA,GAAA,MAAAK,EAAA,KAAA,qCAAA,uCAAA,+HAKA,MAAA,CAAA,IAAA,KAAA,EACA,SAAA,CAEAA,EAAA,KAAAX,EAAA,IAAA,OAAA,CAAA,UAAA,OAAA,SAAAW,EAAA,IAAA,CAAA,CACA,CAAA,EAAAA,EAAA,IAVA,EAAA,CAAA,CAAA,CAAA,CAAA,EAcAX,EAAA,IAAAY,EAAA,CAAA,CAAA,CACA,CAAA,CAAA,CACA,CAAA,CAAA,EACA,IAAAZ,EAAA,IAAAa,EAAA,CAAA,CAAA,CACA,CAAA,CAAA,CAGA","x_google_ignoreList":[0]}
{"version":3,"file":"ManageDomain-b36352f0.js","sources":["../../src/components/pages/ManageDomain/ManageDomain.tsx"],"sourcesContent":["import TransactionSuccessCard from '@src/components/cards/TransactionSuccessCard/TransactionSuccessCard';\nimport DomainSettings from '@src/components/forms/DomainSettings/DomainSettings';\nimport { usePrimaryName } from '@src/hooks/usePrimaryName';\nimport { useGlobalState, useModalState } from '@src/state';\nimport { useTransactionState } from '@src/state/contexts/TransactionState';\nimport { Star } from 'lucide-react';\nimport { ReactNode, useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { decodeDomainToASCII } from '../../../utils';\nimport { HamburgerOutlineIcon } from '../../icons';\nimport './styles.css';\n\nfunction AntLogoIcon({\n  id,\n  className,\n  icon = (\n    <HamburgerOutlineIcon\n      width={'20px'}\n      height={'20px'}\n      fill=\"var(--text-white)\"\n    />\n  ),\n}: {\n  id?: string;\n  className?: string;\n  icon?: ReactNode;\n}) {\n  const [{ gateway }] = useGlobalState();\n  const [validImage, setValidImage] = useState(true);\n  const logoRef = useRef<HTMLImageElement>(null);\n\n  useEffect(() => {\n    if (!logoRef.current || !id) return;\n\n    const img = logoRef.current;\n\n    const handleError = () => setValidImage(false);\n\n    img.addEventListener('error', handleError);\n\n    return () => {\n      img.removeEventListener('error', handleError);\n    };\n  }, [logoRef, id]);\n\n  if (!id) return <>{icon}</>;\n\n  return (\n    <>\n      <img\n        ref={logoRef}\n        className={className ?? 'w-[30px] rounded-full'}\n        src={`https://${gateway}/${id}`}\n        alt=\"ant-logo\"\n        style={{ display: validImage ? 'block' : 'none' }}\n      />\n      {!validImage && icon}\n    </>\n  );\n}\n\nfunction ManageDomain() {\n  const { name } = useParams();\n  const navigate = useNavigate();\n  const [{ arioProcessId }] = useGlobalState();\n  const [{ workflowName, interactionResult }, dispatchTransactionState] =\n    useTransactionState();\n  const [, dispatchModalState] = useModalState();\n  const { data: primaryNameData } = usePrimaryName();\n\n  const [logoId, setLogoId] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (!name) {\n      navigate('/manage/names');\n      return;\n    }\n    // Reset transaction state on unmount - clears transaction success banner\n    return () => {\n      dispatchTransactionState({ type: 'reset' });\n    };\n  }, [name]);\n\n  return (\n    <>\n      <div\n        className=\"page\"\n        style={{ gap: '0px', paddingTop: '10px', paddingBottom: '10px' }}\n      >\n        {interactionResult ? (\n          <TransactionSuccessCard\n            txId={interactionResult.id}\n            title={`${workflowName} completed`}\n            close={() => {\n              dispatchTransactionState({\n                type: 'reset',\n              });\n            }}\n          />\n        ) : (\n          <></>\n        )}\n        <div\n          className=\"flex flex-row\"\n          style={{\n            justifyContent: 'space-between',\n            width: '100%',\n          }}\n        >\n          <h2 className=\"flex white center\" style={{ gap: '16px' }}>\n            <AntLogoIcon id={logoId} />\n            {decodeDomainToASCII(name!)}\n            <Star\n              className={\n                (name == primaryNameData?.name\n                  ? 'text-primary fill-primary'\n                  : 'text-grey') + ` w-[18px]`\n              }\n            />\n          </h2>\n          <button\n            className={\n              'flex text-primary bg-primary-thin max-w-fit rounded border border-primary px-3 py-1 gap-3 text-[16px] items-center'\n            }\n            onClick={() => {\n              if (!name) return;\n              if (primaryNameData?.name === name) {\n                // remove primary name payload\n                dispatchTransactionState({\n                  type: 'setTransactionData',\n                  payload: {\n                    names: [name],\n                    arioProcessId,\n                    assetId: '',\n                    functionName: 'removePrimaryNames',\n                  },\n                });\n              } else {\n                dispatchTransactionState({\n                  type: 'setTransactionData',\n                  payload: {\n                    name,\n                    arioProcessId,\n                    assetId: arioProcessId,\n                    functionName: 'primaryNameRequest',\n                  },\n                });\n              }\n\n              dispatchModalState({\n                type: 'setModalOpen',\n                payload: { showPrimaryNameModal: true },\n              });\n            }}\n          >\n            <Star className={`w-[16px]`} />{' '}\n            {name == primaryNameData?.name ? 'Remove Primary' : 'Make Primary'}\n          </button>\n        </div>\n        <DomainSettings\n          domain={name}\n          setLogo={(id?: string) => setLogoId(id)}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default ManageDomain;\n"],"names":["AntLogoIcon","id","className","icon","jsxRuntimeExports","SvgHamburgerOutline","gateway","useGlobalState","validImage","setValidImage","reactExports","logoRef","img","handleError","ManageDomain","name","useParams","navigate","useNavigate","arioProcessId","workflowName","interactionResult","dispatchTransactionState","useTransactionState","dispatchModalState","useModalState","primaryNameData","usePrimaryName","logoId","setLogoId","TransactionSuccessCard","decodeDomainToASCII","Star","DomainSettings"],"mappings":"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"}
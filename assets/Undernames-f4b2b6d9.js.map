{"version":3,"file":"Undernames-f4b2b6d9.js","sources":["../../src/components/icons/Plus.svg","../../src/components/icons/Trash.svg","../../src/components/cards/WarningCard/WarningCard.tsx","../../src/components/modals/AddUndernameModal/AddUndernameModal.tsx","../../src/components/modals/EditUndernameModal/EditUndernameModal.tsx","../../src/hooks/useUndernames/useUndernames.tsx","../../src/components/pages/Undernames/Undernames.tsx"],"sourcesContent":["export default \"__VITE_ASSET__4982667c__\"","export default \"__VITE_ASSET__f0987060__\"","import { InfoIcon } from '../../icons';\n\nfunction WarningCard({\n  showIcon = true,\n  customIcon,\n  text,\n}: {\n  text: JSX.Element | string;\n  customIcon?: JSX.Element;\n  showIcon?: boolean;\n}) {\n  return (\n    <div\n      className=\"warning-container flex flex-row\"\n      style={{\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n        boxSizing: 'border-box',\n        fontSize: 'inherit',\n        gap: '10px',\n      }}\n    >\n      {showIcon || customIcon ? (\n        <span\n          style={{\n            height: '100%',\n            display: 'flex',\n            lineHeight: '150%',\n          }}\n        >\n          {customIcon ? (\n            customIcon\n          ) : (\n            <InfoIcon width={'24px'} height={'24px'} fill={'var(--accent)'} />\n          )}\n        </span>\n      ) : (\n        <></>\n      )}\n      <span>{text}</span>\n    </div>\n  );\n}\n\nexport default WarningCard;\n","import { Tooltip } from 'antd';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useIsMobile } from '../../../hooks';\nimport { ANTContract } from '../../../services/arweave/ANTContract';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport {\n  ANTContractJSON,\n  ARNSRecordEntry,\n  SetRecordPayload,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport {\n  isArweaveTransactionID,\n  isUndernameValid,\n  validateNoLeadingOrTrailingDashes,\n  validateNoSpecialCharacters,\n  validateTTLSeconds,\n} from '../../../utils';\nimport {\n  ARNS_TX_ID_ENTRY_REGEX,\n  MAX_TTL_SECONDS,\n  MAX_UNDERNAME_LENGTH,\n  MIN_TTL_SECONDS,\n  UNDERNAME_REGEX,\n} from '../../../utils/constants';\nimport eventEmitter from '../../../utils/events';\nimport WarningCard from '../../cards/WarningCard/WarningCard';\nimport ValidationInput from '../../inputs/text/ValidationInput/ValidationInput';\nimport { Loader } from '../../layout';\nimport TransactionCost from '../../layout/TransactionCost/TransactionCost';\nimport DialogModal from '../DialogModal/DialogModal';\n\nfunction AddUndernameModal({\n  antId,\n  closeModal,\n  payloadCallback,\n}: {\n  antId: ArweaveTransactionID; // contract ID if asset type is a contract interaction\n  closeModal: () => void;\n  payloadCallback: (payload: SetRecordPayload) => void;\n}) {\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const isMobile = useIsMobile();\n  const [state, setState] = useState<ANTContractJSON>();\n\n  const targetIdRef = useRef<HTMLInputElement>(null);\n  const ttlRef = useRef<HTMLInputElement>(null);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [undername, setUndername] = useState<string>('');\n  const [targetId, setTargetId] = useState<string>('');\n  const [ttlSeconds, setTtlSeconds] = useState<number>(MIN_TTL_SECONDS);\n  const [associatedRecords, setAssociatedRecords] = useState<\n    Record<string, ARNSRecordEntry>\n  >({});\n  const [maxUndernameLength, setMaxUndernameLength] =\n    useState<number>(MAX_UNDERNAME_LENGTH);\n\n  useEffect(() => {\n    loadDetails();\n    nameRef.current?.focus();\n  }, [antId]);\n\n  async function loadDetails() {\n    try {\n      const [state, arnsRecords, pendingContractInteractions] =\n        await Promise.all([\n          arweaveDataProvider.getContractState<ANTContractJSON>(antId),\n          arweaveDataProvider.getRecords<ARNSRecordEntry>({\n            filters: { contractTxId: [antId] },\n          }),\n          arweaveDataProvider.getPendingContractInteractions(antId),\n        ]);\n      const contract = new ANTContract(\n        state,\n        antId,\n        pendingContractInteractions,\n      );\n\n      setState(contract.state);\n      setAssociatedRecords(arnsRecords);\n      const shortestAssociatedName = Object.keys(arnsRecords).length\n        ? Math.min(...Object.keys(arnsRecords).map((name) => name.length))\n        : 0;\n      setMaxUndernameLength(MAX_UNDERNAME_LENGTH - shortestAssociatedName);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    }\n  }\n\n  function handlePayloadCallback() {\n    payloadCallback({\n      subDomain: undername,\n      transactionId: targetId,\n      ttlSeconds,\n    });\n  }\n\n  if (!state) {\n    return (\n      <div className=\"modal-container\">\n        <Loader size={80} />\n      </div>\n    );\n  }\n\n  function getIncompatibleNames(\n    undername: string,\n    records: Record<string, ARNSRecordEntry>,\n  ): string[] {\n    return Object.keys(records).filter(\n      (name: string) => undername.length + name.length > MAX_UNDERNAME_LENGTH,\n    );\n  }\n\n  return (\n    <div\n      className=\"modal-container\"\n      style={isMobile ? { padding: 'none' } : {}}\n    >\n      {/**modal header */}\n      <DialogModal\n        title={<h2 className=\"white\">Add Undername</h2>}\n        body={\n          <form>\n            <div\n              className=\"flex flex-column\"\n              style={{ fontSize: '14px', width: '500px' }}\n            >\n              <div\n                className=\"flex flex-column\"\n                style={{ paddingBottom: '30px' }}\n              >\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">Undername Title:</span>\n                  <span\n                    className=\"flex flex-row\"\n                    style={{ position: 'relative' }}\n                  >\n                    <ValidationInput\n                      key={'undername'}\n                      ref={nameRef}\n                      inputClassName=\"name-token-input white\"\n                      inputCustomStyle={{\n                        paddingLeft: '10px',\n                        fontSize: '14px',\n                        paddingRight: '80px',\n                      }}\n                      wrapperCustomStyle={{\n                        width: '100%',\n                        border: '1px solid var(--text-faded)',\n                        borderRadius: 'var(--corner-radius)',\n                      }}\n                      showValidationIcon={true}\n                      showValidationOutline={true}\n                      showValidationChecklist={true}\n                      validationListStyle={{ display: 'none' }}\n                      value={undername}\n                      setValue={(v: string) => setUndername(v)}\n                      catchInvalidInput={false}\n                      maxCharLength={maxUndernameLength}\n                      customPattern={UNDERNAME_REGEX}\n                      validationPredicates={{\n                        [VALIDATION_INPUT_TYPES.UNDERNAME]: {\n                          fn: (name: string) =>\n                            validateNoSpecialCharacters(name),\n                        },\n                        'Dashes and Underscores cannot be leading or trailing':\n                          {\n                            fn: (name) =>\n                              validateNoLeadingOrTrailingDashes(name),\n                          },\n                      }}\n                    />\n                    <span\n                      className=\"flex flex-row grey\"\n                      style={{\n                        position: 'absolute',\n                        top: '0px',\n                        bottom: '0px',\n                        right: undername.length ? '35px' : '10px',\n                        width: 'fit-content',\n                      }}\n                    >\n                      {undername.length} / {maxUndernameLength}\n                    </span>\n                  </span>\n                  {getIncompatibleNames(undername, associatedRecords).length ? (\n                    <WarningCard\n                      text={\n                        <span>\n                          This ANT has{' '}\n                          <Tooltip\n                            title={\n                              <div\n                                className=\"flex flex-column\"\n                                style={{\n                                  padding: '5px',\n                                  gap: '5px',\n                                  boxSizing: 'border-box',\n                                }}\n                              >\n                                {getIncompatibleNames(\n                                  undername,\n                                  associatedRecords,\n                                ).map((name) => (\n                                  <span key={name}>{name}</span>\n                                ))}\n                              </div>\n                            }\n                            color=\"var(--card-bg)\"\n                            placement=\"top\"\n                            showArrow={true}\n                          >\n                            <span className=\"underline bold\">\n                              {\n                                getIncompatibleNames(\n                                  undername,\n                                  associatedRecords,\n                                ).length\n                              }{' '}\n                              name\n                              {getIncompatibleNames(\n                                undername,\n                                associatedRecords,\n                              ).length > 1\n                                ? 's'\n                                : ''}\n                            </span>\n                          </Tooltip>{' '}\n                          that will not support this undername as it is over\n                          their supported length.\n                        </span>\n                      }\n                    />\n                  ) : (\n                    <></>\n                  )}\n                </div>\n\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">Target ID:</span>\n                  <ValidationInput\n                    key={'targetId'}\n                    ref={targetIdRef}\n                    inputClassName=\"name-token-input white\"\n                    inputCustomStyle={{\n                      paddingLeft: '10px',\n                      fontSize: '14px',\n                      paddingRight: '40px',\n                    }}\n                    wrapperCustomStyle={{\n                      position: 'relative',\n                      border: '1px solid var(--text-faded)',\n                      borderRadius: 'var(--corner-radius)',\n                    }}\n                    showValidationIcon={true}\n                    showValidationOutline={true}\n                    showValidationChecklist={true}\n                    validationListStyle={{ display: 'none' }}\n                    maxCharLength={43}\n                    value={targetId}\n                    setValue={setTargetId}\n                    catchInvalidInput={true}\n                    customPattern={ARNS_TX_ID_ENTRY_REGEX}\n                    validationPredicates={{\n                      [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                        fn: (id: string) =>\n                          arweaveDataProvider.validateArweaveId(id),\n                      },\n                    }}\n                  />\n                </div>\n\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">TTL:</span>\n                  <ValidationInput\n                    key={'ttlSeconds'}\n                    ref={ttlRef}\n                    inputClassName=\"name-token-input white\"\n                    inputCustomStyle={{ paddingLeft: '10px', fontSize: '14px' }}\n                    wrapperCustomStyle={{\n                      position: 'relative',\n                      border: '1px solid var(--text-faded)',\n                      borderRadius: 'var(--corner-radius)',\n                      maxWidth: '130px',\n                    }}\n                    showValidationIcon={true}\n                    showValidationOutline={true}\n                    showValidationChecklist={true}\n                    type=\"number\"\n                    minNumber={MIN_TTL_SECONDS}\n                    maxNumber={MAX_TTL_SECONDS}\n                    validationListStyle={{ display: 'none' }}\n                    maxCharLength={MAX_TTL_SECONDS.toString().length}\n                    value={ttlSeconds}\n                    setValue={(v: string) => setTtlSeconds(+v)}\n                    catchInvalidInput={true}\n                    customPattern={\n                      new RegExp(\n                        `^[0-9]{1,${MAX_TTL_SECONDS.toString().length}}$`,\n                      )\n                    }\n                    validationPredicates={{\n                      [VALIDATION_INPUT_TYPES.VALID_TTL]: {\n                        fn: (ttl: string) => validateTTLSeconds(+ttl),\n                      },\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        }\n        onCancel={closeModal}\n        onClose={closeModal}\n        onNext={\n          isArweaveTransactionID(targetId) &&\n          isUndernameValid(undername) &&\n          ttlSeconds >= MIN_TTL_SECONDS &&\n          ttlSeconds <= MAX_TTL_SECONDS\n            ? () => handlePayloadCallback()\n            : undefined\n        }\n        footer={\n          <div className=\"flex\">\n            <TransactionCost\n              fee={{}}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n              showBorder={false}\n            />\n          </div>\n        }\n        nextText=\"Next\"\n        cancelText=\"Cancel\"\n      />\n    </div>\n  );\n}\n\nexport default AddUndernameModal;\n","import { clamp } from 'lodash';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useIsMobile } from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport {\n  ANTContractJSON,\n  SetRecordPayload,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport {\n  formatForMaxCharCount,\n  isARNSDomainNameValid,\n  isArweaveTransactionID,\n  validateTTLSeconds,\n} from '../../../utils';\nimport {\n  ARNS_TX_ID_ENTRY_REGEX,\n  MAX_TTL_SECONDS,\n  MIN_TTL_SECONDS,\n} from '../../../utils/constants';\nimport eventEmitter from '../../../utils/events';\nimport ValidationInput from '../../inputs/text/ValidationInput/ValidationInput';\nimport { Loader } from '../../layout';\nimport TransactionCost from '../../layout/TransactionCost/TransactionCost';\nimport DialogModal from '../DialogModal/DialogModal';\n\nfunction EditUndernameModal({\n  antId,\n  undername,\n  closeModal,\n  payloadCallback,\n}: {\n  antId: ArweaveTransactionID; // contract ID if asset type is a contract interaction\n  undername: string;\n  closeModal: () => void;\n  payloadCallback: (payload: SetRecordPayload) => void;\n}) {\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const isMobile = useIsMobile();\n  const [state, setState] = useState<ANTContractJSON>();\n\n  const targetIdRef = useRef<HTMLInputElement>(null);\n  const ttlRef = useRef<HTMLInputElement>(null);\n  const [targetId, setTargetId] = useState<string>('');\n  const [ttlSeconds, setTtlSeconds] = useState<number>(MIN_TTL_SECONDS);\n\n  useEffect(() => {\n    load(antId);\n    if (targetIdRef.current) {\n      targetIdRef.current.focus();\n    }\n  }, [antId]);\n\n  async function load(id: ArweaveTransactionID) {\n    try {\n      const contract = await arweaveDataProvider.buildANTContract(id);\n      setState(contract.state);\n      if (\n        isArweaveTransactionID(\n          contract.state?.records?.[undername]?.transactionId,\n        )\n      ) {\n        setTargetId(contract.state?.records?.[undername]?.transactionId);\n      }\n\n      if (contract.state?.records?.[undername]?.ttlSeconds) {\n        setTtlSeconds(\n          clamp(\n            contract.state?.records?.[undername]?.ttlSeconds,\n            MIN_TTL_SECONDS,\n            MAX_TTL_SECONDS,\n          ),\n        );\n      }\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    }\n  }\n\n  function handlePayloadCallback() {\n    payloadCallback({\n      subDomain: undername,\n      transactionId: targetId,\n      ttlSeconds,\n      previousRecord: state?.records?.[undername],\n    });\n  }\n\n  if (!state) {\n    return (\n      <div className=\"modal-container\">\n        <Loader size={80} />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"modal-container\"\n      style={isMobile ? { padding: 'none' } : {}}\n    >\n      {/**modal header */}\n      <DialogModal\n        title={\n          <h2 className=\"white\">Edit {formatForMaxCharCount(undername, 40)}</h2>\n        }\n        body={\n          <div\n            className=\"flex flex-column\"\n            style={{ fontSize: '14px', maxWidth: '575px', minWidth: '475px' }}\n          >\n            <div className=\"flex flex-column\" style={{ paddingBottom: '30px' }}>\n              <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                <span className=\"grey\">Target ID:</span>\n                <ValidationInput\n                  key={'targetId'}\n                  ref={targetIdRef}\n                  inputClassName=\"name-token-input white\"\n                  inputCustomStyle={{\n                    paddingLeft: '10px',\n                    fontSize: '14px',\n                    paddingRight: '40px',\n                  }}\n                  wrapperCustomStyle={{\n                    position: 'relative',\n                    border: '1px solid var(--text-faded)',\n                    borderRadius: 'var(--corner-radius)',\n                  }}\n                  showValidationIcon={true}\n                  showValidationOutline={true}\n                  showValidationChecklist={true}\n                  validationListStyle={{ display: 'none' }}\n                  maxCharLength={43}\n                  value={targetId}\n                  setValue={setTargetId}\n                  catchInvalidInput={true}\n                  customPattern={ARNS_TX_ID_ENTRY_REGEX}\n                  validationPredicates={{\n                    [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                      fn: (id: string) =>\n                        arweaveDataProvider.validateArweaveId(id),\n                    },\n                  }}\n                />\n              </div>\n\n              <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                <span className=\"grey\">TTL:</span>\n                <ValidationInput\n                  key={'ttlSeconds'}\n                  ref={ttlRef}\n                  inputClassName=\"name-token-input white\"\n                  inputCustomStyle={{ paddingLeft: '10px', fontSize: '14px' }}\n                  wrapperCustomStyle={{\n                    position: 'relative',\n                    border: '1px solid var(--text-faded)',\n                    borderRadius: 'var(--corner-radius)',\n                    maxWidth: '130px',\n                  }}\n                  showValidationIcon={true}\n                  showValidationOutline={true}\n                  showValidationChecklist={true}\n                  type=\"number\"\n                  minNumber={MIN_TTL_SECONDS}\n                  maxNumber={MAX_TTL_SECONDS}\n                  validationListStyle={{ display: 'none' }}\n                  maxCharLength={MAX_TTL_SECONDS.toString().length}\n                  value={ttlSeconds}\n                  setValue={(v: string) => setTtlSeconds(+v)}\n                  catchInvalidInput={true}\n                  customPattern={\n                    new RegExp(\n                      `^[0-9]{1,${MAX_TTL_SECONDS.toString().length}}$`,\n                    )\n                  }\n                  validationPredicates={{\n                    [VALIDATION_INPUT_TYPES.VALID_TTL]: {\n                      fn: (ttl: string) => validateTTLSeconds(+ttl),\n                    },\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        }\n        onCancel={closeModal}\n        onClose={closeModal}\n        onNext={\n          isArweaveTransactionID(targetId) &&\n          isARNSDomainNameValid({ name: undername }) &&\n          ttlSeconds >= MIN_TTL_SECONDS &&\n          ttlSeconds <= MAX_TTL_SECONDS\n            ? () => handlePayloadCallback()\n            : undefined\n        }\n        footer={\n          <div className=\"flex\">\n            <TransactionCost\n              fee={{}}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n              showBorder={false}\n            />\n          </div>\n        }\n        nextText=\"Next\"\n        cancelText=\"Cancel\"\n      />\n    </div>\n  );\n}\n\nexport default EditUndernameModal;\n","import { Tooltip } from 'antd';\nimport { ColumnType } from 'antd/es/table';\nimport { useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport {\n  ChevronUpIcon,\n  CircleXFilled,\n  PencilIcon,\n  SearchIcon,\n  TrashIcon,\n} from '../../components/icons/index';\nimport ValidationInput from '../../components/inputs/text/ValidationInput/ValidationInput';\nimport ArweaveID, {\n  ArweaveIdTypes,\n} from '../../components/layout/ArweaveID/ArweaveID';\nimport { ArweaveTransactionID } from '../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../state/contexts/GlobalState';\nimport { useWalletState } from '../../state/contexts/WalletState';\nimport {\n  UNDERNAME_TABLE_ACTIONS,\n  UndernameMetadata,\n  UndernameTableInteractionTypes,\n} from '../../types';\nimport { isArweaveTransactionID, withExponentialBackoff } from '../../utils';\nimport { ARNS_NAME_REGEX_PARTIAL } from '../../utils/constants';\nimport eventEmitter from '../../utils/events';\n\nexport function useUndernames(id?: ArweaveTransactionID, name?: string) {\n  const [{ gateway, arweaveDataProvider }] = useGlobalState();\n  const [{ walletAddress }] = useWalletState();\n  const [sortAscending, setSortOrder] = useState(true);\n  const [sortField, setSortField] = useState<keyof UndernameMetadata>('name');\n  const [selectedRow, setSelectedRow] = useState<UndernameMetadata>();\n  const [rows, setRows] = useState<UndernameMetadata[]>([]);\n  const [filteredResults, setFilteredResults] = useState<UndernameMetadata[]>(\n    [],\n  );\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [percent, setPercentLoaded] = useState<number>(0);\n  const [action, setAction] = useState<\n    UndernameTableInteractionTypes | undefined\n  >();\n  const searchRef = useRef<HTMLInputElement>(null);\n  const [searchText, setSearchText] = useState<string>('');\n  const [searchOpen, setSearchOpen] = useState<boolean>(false);\n  const [domain, setDomain] = useState<string>('');\n\n  useEffect(() => {\n    if (!id && !name) {\n      return;\n    }\n    generateTableColumns();\n    fetchUndernameRows(id, name);\n  }, [id, name]);\n\n  useEffect(() => {\n    if (searchText) {\n      const filtered = rows.filter((row) =>\n        row.name.toLowerCase().startsWith(searchText.toLowerCase()),\n      );\n      setFilteredResults(filtered);\n    } else {\n      setFilteredResults([]);\n    }\n  }, [searchText]);\n\n  function generateTableColumns(): ColumnType<UndernameMetadata>[] {\n    const newColumns: ColumnType<UndernameMetadata>[] = [\n      {\n        title: (\n          <button\n            className=\"flex-row pointer grey\"\n            style={{ gap: '0.5em' }}\n            onClick={() => setSortField('name')}\n          >\n            <span>Undername</span>\n            {sortField === 'name' ? (\n              <ChevronUpIcon\n                width={10}\n                height={10}\n                fill={'var(--text-grey)'}\n                style={!sortAscending ? { transform: 'rotate(180deg)' } : {}}\n              />\n            ) : (\n              <></>\n            )}\n          </button>\n        ),\n        dataIndex: 'name',\n        key: 'name',\n        align: 'left',\n        width: '18%',\n        className: 'grey manage-assets-table-header',\n        ellipsis: true,\n        onHeaderCell: () => {\n          return {\n            onClick: () => {\n              rows.sort((a: UndernameMetadata, b: UndernameMetadata) =>\n                // by default we sort by name\n                !sortAscending\n                  ? a.name.localeCompare(b.name)\n                  : b.name.localeCompare(a.name),\n              );\n              // forces update of rows\n              setRows([...rows]);\n              setSortOrder(!sortAscending);\n            },\n          };\n        },\n        render: (val: string) => (\n          <Link\n            to={`https://${val}_${domain}.${gateway}`}\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"link\"\n          >\n            {val}\n          </Link>\n        ),\n      },\n      {\n        title: (\n          <button\n            className=\"flex-row pointer grey\"\n            style={{ gap: '0.5em' }}\n            onClick={() => setSortField('targetID')}\n          >\n            <span>Target ID</span>\n            {sortField === 'targetID' ? (\n              <ChevronUpIcon\n                width={10}\n                height={10}\n                fill={'var(--text-grey)'}\n                style={!sortAscending ? { transform: 'rotate(180deg)' } : {}}\n              />\n            ) : (\n              <></>\n            )}\n          </button>\n        ),\n        dataIndex: 'targetID',\n        key: 'targetID',\n        align: 'left',\n        width: '18%',\n        className: 'grey manage-assets-table-header',\n        render: (val: string) =>\n          val === 'N/A' || !isArweaveTransactionID(val) ? (\n            val\n          ) : (\n            <ArweaveID\n              id={new ArweaveTransactionID(val)}\n              characterCount={12}\n              shouldLink\n              type={ArweaveIdTypes.TRANSACTION}\n            />\n          ),\n        onHeaderCell: () => {\n          return {\n            onClick: () => {\n              rows.sort((a: any, b: any) =>\n                sortAscending\n                  ? a.targetID.localeCompare(b.targetID)\n                  : b.targetID.localeCompare(a.targetID),\n              );\n              // forces update of rows\n              setRows([...rows]);\n              setSortOrder(!sortAscending);\n            },\n          };\n        },\n      },\n      {\n        title: (\n          <button\n            className=\"flex-row pointer grey\"\n            style={{ gap: '0.5em' }}\n            onClick={() => setSortField('ttlSeconds')}\n          >\n            <span>TTL</span>\n            {sortField === 'ttlSeconds' ? (\n              <ChevronUpIcon\n                width={10}\n                height={10}\n                fill={'var(--text-grey)'}\n                style={!sortAscending ? { transform: 'rotate(180deg)' } : {}}\n              />\n            ) : (\n              <></>\n            )}\n          </button>\n        ),\n        dataIndex: 'ttlSeconds',\n        key: 'ttlSeconds',\n        align: 'left',\n        width: '18%',\n        className: 'grey manage-assets-table-header',\n        render: (val: string) => val,\n        onHeaderCell: () => {\n          return {\n            onClick: () => {\n              rows.sort((a: any, b: any) =>\n                sortAscending\n                  ? a.ttlSeconds - b.ttlSeconds\n                  : b.ttlSeconds - a.ttlSeconds,\n              );\n              // forces update of rows\n              setRows([...rows]);\n              setSortOrder(!sortAscending);\n            },\n          };\n        },\n      },\n      {\n        title: (\n          <div\n            className=\"flex flex-row center undername-search-wrapper\"\n            style={{\n              gap: '1px',\n              justifyContent: 'flex-end',\n              boxSizing: 'border-box',\n            }}\n          >\n            <button\n              className=\"flex button center pointer\"\n              style={{ zIndex: 10 }}\n              onClick={() => setSearchOpen(!searchOpen)}\n            >\n              <SearchIcon\n                width={'16px'}\n                height={'16px'}\n                fill={searchOpen ? 'var(--text-white)' : 'var(--text-grey)'}\n              />\n            </button>\n            {searchOpen ? (\n              <span\n                className=\"flex flex-row center\"\n                style={{\n                  gap: '1px',\n                  justifyContent: 'flex-end',\n                  width: 'fit-content',\n                  boxSizing: 'border-box',\n                }}\n              >\n                <ValidationInput\n                  ref={searchRef}\n                  value={searchText}\n                  setValue={(e) => setSearchText(e)}\n                  catchInvalidInput={true}\n                  showValidationIcon={false}\n                  placeholder={'Search for a name'}\n                  maxCharLength={61}\n                  wrapperCustomStyle={{\n                    position: 'relative',\n                    boxSizing: 'border-box',\n                  }}\n                  inputCustomStyle={{\n                    width: '100%',\n                    minWidth: '100px',\n                    overflow: 'hidden',\n                    fontSize: '13px',\n                    outline: 'none',\n                    color: 'white',\n                    alignContent: 'center',\n                    borderBottom: 'none',\n                    boxSizing: 'border-box',\n                    background: 'transparent',\n                    borderRadius: 'var(--corner-radius)',\n                    border: 'none',\n                    paddingRight: '10px',\n                  }}\n                  customPattern={ARNS_NAME_REGEX_PARTIAL}\n                  validationPredicates={{}}\n                />\n                <button\n                  className=\"flex button center pointer\"\n                  onClick={() => {\n                    setSearchText('');\n                    setSearchOpen(false);\n                  }}\n                >\n                  <CircleXFilled\n                    width={'18px'}\n                    height={'18px'}\n                    fill={'var(--text-grey)'}\n                  />\n                </button>\n              </span>\n            ) : (\n              <></>\n            )}\n          </div>\n        ),\n        className: 'manage-assets-table-header',\n        render: (value, row) => (\n          <div\n            className=\"flex flex-row action-buttons fade-in\"\n            style={{ gap: '10px', justifyContent: 'flex-end' }}\n          >\n            <Tooltip\n              trigger={['hover']}\n              title={'Edit'}\n              color=\"var(--card-bg)\"\n              placement=\"top\"\n              rootClassName=\"notification-tooltip\"\n            >\n              <button\n                className=\"button pointer\"\n                onClick={() => {\n                  setSelectedRow(row);\n                  setAction(UNDERNAME_TABLE_ACTIONS.EDIT);\n                }}\n              >\n                <PencilIcon width={18} height={18} fill={'var(--text-grey)'} />\n              </button>\n            </Tooltip>\n\n            <Tooltip\n              trigger={['hover']}\n              title={'Delete'}\n              color=\"#222224\"\n              placement=\"top\"\n              rootClassName=\"notification-tooltip\"\n            >\n              <button\n                className=\"button pointer\"\n                onClick={() => {\n                  setSelectedRow(row);\n                  setAction(UNDERNAME_TABLE_ACTIONS.REMOVE);\n                }}\n              >\n                <TrashIcon width={18} height={18} fill={'var(--text-grey)'} />\n              </button>\n            </Tooltip>\n          </div>\n        ),\n        align: 'right',\n        width: '10%',\n        key: 'action',\n        dataIndex: 'action',\n      },\n    ];\n    return newColumns;\n  }\n\n  async function fetchUndernameRows(\n    id?: ArweaveTransactionID,\n    name?: string,\n  ): Promise<void> {\n    let contractTxId: ArweaveTransactionID | undefined = undefined;\n    if (id) {\n      contractTxId = id;\n    } else if (name) {\n      const record = await withExponentialBackoff({\n        fn: () =>\n          arweaveDataProvider.getRecord({\n            domain: name,\n          }),\n        maxTries: 5,\n        initialDelay: 1000,\n        shouldRetry: (res) => !res?.contractTxId,\n      });\n      if (record) contractTxId = new ArweaveTransactionID(record?.contractTxId);\n    }\n\n    if (!contractTxId) {\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    const domain = await arweaveDataProvider\n      .getRecords({\n        filters: { contractTxId: [contractTxId] },\n        address: walletAddress,\n      })\n      .then((records) => Object.keys(records)[0])\n      .catch((error) => {\n        console.debug('No domain found for ANT', contractTxId?.toString());\n        eventEmitter.emit('error', error);\n        return '';\n      });\n    setDomain(domain);\n    const fetchedRows: UndernameMetadata[] = [];\n    const [contract, confirmations] = await Promise.all([\n      arweaveDataProvider.buildANTContract(contractTxId),\n      arweaveDataProvider\n        .getTransactionStatus(contractTxId)\n        .then((status) => status[contractTxId!.toString()].confirmations),\n    ]);\n    const undernames = Object.entries(contract.records).filter(\n      ([key]) => key !== '@',\n    );\n    for (const [name, record] of undernames) {\n      try {\n        const rowData = {\n          name: name,\n          targetID: record.transactionId,\n          ttlSeconds: record.ttlSeconds.toString(),\n          status: confirmations ?? 0,\n          key: name,\n        };\n        // sort by confirmation count (ASC) by default\n        fetchedRows.sort((a, b) => a.status - b.status);\n        fetchedRows.push(rowData);\n      } catch (error) {\n        eventEmitter.emit('error', error);\n      } finally {\n        setPercentLoaded(\n          ((undernames.indexOf([name, record]) + 1) / undernames.length) * 100,\n        );\n      }\n    }\n    setRows(fetchedRows);\n    setIsLoading(false);\n  }\n\n  return {\n    isLoading,\n    percent,\n    columns: generateTableColumns(),\n    rows: filteredResults.length ? filteredResults : rows,\n    sortField,\n    sortAscending,\n    selectedRow,\n    action,\n    setAction: (action: UNDERNAME_TABLE_ACTIONS | undefined) =>\n      setAction(action),\n    refresh: () => fetchUndernameRows(id, name),\n  };\n}\n","import { Table } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport { useUndernames } from '../../../hooks/useUndernames/useUndernames';\nimport { ANTContract } from '../../../services/arweave/ANTContract';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport {\n  ANT_INTERACTION_TYPES,\n  SetRecordPayload,\n  TransactionDataPayload,\n  UNDERNAME_TABLE_ACTIONS,\n  UndernameMetadata,\n} from '../../../types';\nimport {\n  getCustomPaginationButtons,\n  isArweaveTransactionID,\n  withExponentialBackoff,\n} from '../../../utils';\nimport eventEmitter from '../../../utils/events';\nimport TransactionSuccessCard from '../../cards/TransactionSuccessCard/TransactionSuccessCard';\nimport { PlusIcon } from '../../icons';\nimport { Loader } from '../../layout';\nimport { AddUndernameModal, EditUndernameModal } from '../../modals';\nimport ConfirmTransactionModal, {\n  CONFIRM_TRANSACTION_PROPS_MAP,\n} from '../../modals/ConfirmTransactionModal/ConfirmTransactionModal';\nimport './styles.css';\n\nfunction Undernames() {\n  const navigate = useNavigate();\n  const { id, name } = useParams();\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const [{ walletAddress }] = useWalletState();\n  const [antId, setANTId] = useState<ArweaveTransactionID>();\n  const [antState, setANTState] = useState<ANTContract>();\n  const [selectedRow, setSelectedRow] = useState<\n    UndernameMetadata | undefined\n  >();\n  const [percent, setPercentLoaded] = useState<number>(0);\n  const {\n    isLoading: undernameTableLoading,\n    percent: percentUndernamesLoaded,\n    columns: undernameColumns,\n    rows: undernameRows,\n    selectedRow: selectedUndernameRow,\n    sortAscending: undernameSortAscending,\n    sortField: undernameSortField,\n    action,\n    setAction,\n    refresh,\n  } = useUndernames(antId, name);\n  const [tableLoading, setTableLoading] = useState(true);\n  const [tablePage, setTablePage] = useState<number>(1);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // modal state\n  const [transactionData, setTransactionData] = useState<\n    TransactionDataPayload | undefined\n  >();\n  const [interactionType, setInteractionType] =\n    useState<ANT_INTERACTION_TYPES>();\n  const [deployedTransactionId, setDeployedTransactionId] =\n    useState<ArweaveTransactionID>();\n\n  useEffect(() => {\n    if (!id && !name) {\n      eventEmitter.emit('error', new Error('Missing ANT transaction ID.'));\n      navigate('/manage/ants');\n      return;\n    }\n\n    setTableLoading(undernameTableLoading);\n    setPercentLoaded(percentUndernamesLoaded);\n    setSelectedRow(selectedUndernameRow);\n\n    if (tableLoading) load();\n\n    setAction(action);\n\n    if (\n      action === UNDERNAME_TABLE_ACTIONS.REMOVE &&\n      antId &&\n      selectedUndernameRow?.name\n    ) {\n      setTransactionData({\n        subDomain: selectedUndernameRow?.name,\n      });\n      setInteractionType(ANT_INTERACTION_TYPES.REMOVE_RECORD);\n    }\n  }, [\n    id,\n    name,\n    undernameSortAscending,\n    undernameSortField,\n    selectedUndernameRow,\n    action,\n    undernameRows,\n  ]);\n\n  async function load() {\n    try {\n      let contractTxId: ArweaveTransactionID | undefined = undefined;\n      if (isArweaveTransactionID(id)) {\n        contractTxId = new ArweaveTransactionID(id);\n      } else if (name) {\n        const record = await withExponentialBackoff({\n          fn: () =>\n            arweaveDataProvider.getRecord({\n              domain: name,\n            }),\n          maxTries: 5,\n          initialDelay: 1000,\n          shouldRetry: (res) => !res?.contractTxId,\n        });\n\n        contractTxId = new ArweaveTransactionID(record?.contractTxId);\n      }\n\n      if (!contractTxId) {\n        throw new Error('Unable to load undernames, cannot resolve ANT ID.');\n      }\n      setANTId(contractTxId);\n      const contract = await arweaveDataProvider.buildANTContract(contractTxId);\n\n      setANTState(contract);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n      navigate('/manage/ants');\n    }\n  }\n\n  return (\n    <>\n      <div className=\"page\">\n        <div className=\"flex-column\">\n          {deployedTransactionId && interactionType ? (\n            <TransactionSuccessCard\n              txId={deployedTransactionId}\n              close={() => {\n                setDeployedTransactionId(undefined);\n                setInteractionType(undefined);\n              }}\n              title={\n                CONFIRM_TRANSACTION_PROPS_MAP[interactionType]?.successHeader\n              }\n            />\n          ) : (\n            <></>\n          )}\n          <div className=\"flex flex-justify-between\">\n            <div\n              className=\"flex flex-row\"\n              style={{ justifyContent: 'space-between' }}\n            >\n              <h2 className=\"white\">Manage Undernames</h2>\n              {antState?.getOwnershipStatus(walletAddress) ? (\n                <button\n                  disabled={\n                    antState?.getOwnershipStatus(walletAddress) === undefined\n                  }\n                  className={'button-secondary center'}\n                  style={{\n                    gap: '10px',\n                    padding: '9px 12px',\n                    fontSize: '14px',\n                    textAlign: 'center',\n                  }}\n                  onClick={() =>\n                    setSearchParams({ modal: UNDERNAME_TABLE_ACTIONS.CREATE })\n                  }\n                >\n                  <PlusIcon\n                    width={'16px'}\n                    height={'16px'}\n                    fill={'var(--accent)'}\n                  />\n                  Add Undername\n                </button>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n          {tableLoading ? (\n            <div\n              className=\"flex center\"\n              style={{ paddingTop: '10%', justifyContent: 'center' }}\n            >\n              <Loader\n                message={`Loading undernames... ${Math.round(percent)}%`}\n              />\n            </div>\n          ) : (\n            <Table\n              onRow={() => ({ className: 'hovered-row' })}\n              prefixCls=\"manage-undernames-table\"\n              bordered={false}\n              scroll={{ x: true }}\n              columns={undernameColumns}\n              dataSource={undernameRows}\n              pagination={{\n                position: ['bottomCenter'],\n                rootClassName: 'table-pagination',\n                itemRender: (page, type, originalElement) =>\n                  getCustomPaginationButtons({\n                    page,\n                    type,\n                    originalElement,\n                    currentPage: tablePage,\n                  }),\n                onChange: (page: number) => setTablePage(page),\n                showPrevNextJumpers: true,\n                showSizeChanger: false,\n                current: tablePage,\n              }}\n              locale={{\n                emptyText: (\n                  <div\n                    className=\"flex flex-column center\"\n                    style={{\n                      padding: '100px',\n                      boxSizing: 'border-box',\n                      width: '100%',\n                    }}\n                  >\n                    <span className=\"white bold\" style={{ fontSize: '16px' }}>\n                      No Undernames Found\n                    </span>\n                    <span\n                      className={'grey'}\n                      style={{ fontSize: '13px', maxWidth: '400px' }}\n                    >\n                      Arweave Name Tokens (ANTs) provide ownership and control\n                      of ArNS names. With ANTs you can easily manage, transfer,\n                      and adjust your domains, as well as create undernames.\n                    </span>\n\n                    <div\n                      className=\"flex flex-row center\"\n                      style={{ gap: '16px' }}\n                    >\n                      {antState?.getOwnershipStatus(walletAddress) ? (\n                        <button\n                          className={'button-secondary center'}\n                          style={{\n                            gap: '10px',\n                            padding: '9px 12px',\n                            fontSize: '14px',\n                            textAlign: 'center',\n                          }}\n                          onClick={() =>\n                            setSearchParams({\n                              modal: UNDERNAME_TABLE_ACTIONS.CREATE,\n                            })\n                          }\n                        >\n                          <PlusIcon\n                            width={'16px'}\n                            height={'16px'}\n                            fill={'var(--accent)'}\n                          />\n                          Add Undername\n                        </button>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                  </div>\n                ),\n              }}\n            />\n          )}\n        </div>\n      </div>\n      {searchParams.has('modal') &&\n      antId &&\n      antState?.getOwnershipStatus(walletAddress) ? (\n        <AddUndernameModal\n          closeModal={() => {\n            setSearchParams({});\n            setSelectedRow(undefined);\n            setSearchParams({});\n          }}\n          payloadCallback={(payload: SetRecordPayload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.SET_RECORD);\n            setAction(undefined);\n            setSelectedRow(undefined);\n            setSearchParams({});\n          }}\n          antId={antId}\n        />\n      ) : (\n        <> </>\n      )}\n\n      {action === UNDERNAME_TABLE_ACTIONS.EDIT &&\n      antId &&\n      selectedRow?.name &&\n      antState?.getOwnershipStatus(walletAddress) ? (\n        <EditUndernameModal\n          closeModal={() => {\n            setAction(undefined);\n            setSelectedRow(undefined);\n          }}\n          payloadCallback={(payload: SetRecordPayload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.EDIT_RECORD);\n            setAction(undefined);\n            setSelectedRow(undefined);\n          }}\n          antId={antId}\n          undername={selectedRow.name}\n        />\n      ) : (\n        <> </>\n      )}\n\n      {antId &&\n      transactionData &&\n      interactionType &&\n      antState?.getOwnershipStatus(walletAddress) ? (\n        <ConfirmTransactionModal\n          setDeployedTransactionId={(id: ArweaveTransactionID) => {\n            setDeployedTransactionId(id);\n            setTransactionData(undefined);\n            refresh();\n          }}\n          interactionType={interactionType}\n          payload={transactionData}\n          assetId={antId}\n          close={() => {\n            setTransactionData(undefined);\n            setSelectedRow(undefined);\n            setAction(undefined);\n          }}\n          cancel={() => {\n            setTransactionData(undefined);\n            setInteractionType(undefined);\n            setSelectedRow(undefined);\n            setAction(undefined);\n          }}\n          cancelText={'Cancel'}\n          confirmText=\"Confirm\"\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n\nexport default Undernames;\n"],"names":["SvgPlus","props","reactExports","SvgTrash","WarningCard","showIcon","customIcon","text","jsxRuntimeExports","SvgInfo","AddUndernameModal","antId","closeModal","payloadCallback","arweaveDataProvider","useGlobalState","isMobile","useIsMobile","state","setState","targetIdRef","ttlRef","nameRef","undername","setUndername","targetId","setTargetId","ttlSeconds","setTtlSeconds","MIN_TTL_SECONDS","associatedRecords","setAssociatedRecords","maxUndernameLength","setMaxUndernameLength","MAX_UNDERNAME_LENGTH","loadDetails","_a","state2","arnsRecords","pendingContractInteractions","contract","ANTContract","shortestAssociatedName","name","error","eventEmitter","handlePayloadCallback","Loader","getIncompatibleNames","undername2","records","DialogModal","ValidationInput","v","UNDERNAME_REGEX","VALIDATION_INPUT_TYPES","validateNoSpecialCharacters","validateNoLeadingOrTrailingDashes","Tooltip","ARNS_TX_ID_ENTRY_REGEX","id","MAX_TTL_SECONDS","ttl","validateTTLSeconds","isArweaveTransactionID","isUndernameValid","TransactionCost","EditUndernameModal","load","_c","_b","_f","_e","_d","_i","_h","_g","lodashExports","_l","_k","_j","formatForMaxCharCount","isARNSDomainNameValid","useUndernames","gateway","walletAddress","useWalletState","sortAscending","setSortOrder","sortField","setSortField","selectedRow","setSelectedRow","rows","setRows","filteredResults","setFilteredResults","isLoading","setIsLoading","percent","setPercentLoaded","action","setAction","searchRef","searchText","setSearchText","searchOpen","setSearchOpen","domain","setDomain","fetchUndernameRows","filtered","row","generateTableColumns","SvgChevronUp","a","b","val","Link","ArweaveID","ArweaveTransactionID","ArweaveIdTypes","SvgSearch","e","ARNS_NAME_REGEX_PARTIAL","SvgCircleXFilled","value","UNDERNAME_TABLE_ACTIONS","SvgPencil","id2","name2","contractTxId","record","withExponentialBackoff","res","domain2","fetchedRows","confirmations","status","undernames","key","name3","rowData","action2","Undernames","navigate","useNavigate","useParams","setANTId","antState","setANTState","undernameTableLoading","percentUndernamesLoaded","undernameColumns","undernameRows","selectedUndernameRow","undernameSortAscending","undernameSortField","refresh","tableLoading","setTableLoading","tablePage","setTablePage","searchParams","setSearchParams","useSearchParams","transactionData","setTransactionData","interactionType","setInteractionType","deployedTransactionId","setDeployedTransactionId","ANT_INTERACTION_TYPES","TransactionSuccessCard","CONFIRM_TRANSACTION_PROPS_MAP","Table","page","type","originalElement","getCustomPaginationButtons","payload","ConfirmTransactionModal"],"mappings":"swBACA,MAAAA,GAAAC,GAAAC,EAAA,cAAA,MAAA,CAAA,MAAA,UAAA,OAAA,UAAA,QAAA,YAAA,KAAA,UAAA,MAAA,6BAAA,GAAAD,CAAA,EAAAC,EAAA,cAAA,OAAA,CAAA,EAAA,yuBAAA,KAAA,SAAA,CAAA,CAAA,ECAAC,GAAAF,GAAAC,EAAA,cAAA,MAAA,CAAA,MAAA,UAAA,OAAA,UAAA,QAAA,YAAA,KAAA,UAAA,MAAA,6BAAA,GAAAD,CAAA,EAAAC,EAAA,cAAA,OAAA,CAAA,SAAA,UAAA,SAAA,UAAA,EAAA,uuBAAA,KAAA,SAAA,CAAA,CAAA,ECCA,SAAAE,GAAA,CAAA,SAAAC,EAAA,GACA,WAAAC,EACA,KAAAC,CAEA,EAAA,CAKA,OAAAC,EAAA,KACA,MAAA,CAAA,UAAA,kCACA,MAAA,CACA,eAAA,aACA,WAAA,aACA,UAAA,aACA,SAAA,UACA,IAAA,MACA,EACA,SAAA,CAEAH,GAAAC,EAAAE,EAAA,IACA,OAAA,CAAA,MAAA,CACA,OAAA,OACA,QAAA,OACA,WAAA,MACA,EACA,SAAAF,GAAAE,EAAA,IAAAC,GAAA,CAAA,MAAA,OAAA,OAAA,OAAA,KAAA,eAAA,CAAA,CAKA,CAAA,EAAAD,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,EAIAA,EAAA,IAAA,OAAA,CAAA,SAAAD,CAAA,CAAA,CAEA,CAAA,CAAA,CAGA,CCRA,SAAAG,GAAA,CAAA,MAAAC,EACA,WAAAC,EACA,gBAAAC,CAEA,EAAA,CAKA,KAAA,CAAA,CAAA,oBAAAC,CAAA,CAAA,EAAAC,EAAA,EACAC,EAAAC,GAAA,EACA,CAAAC,EAAAC,CAAA,EAAAjB,EAAA,SAAA,EAEAkB,EAAAlB,EAAA,OAAA,IAAA,EACAmB,EAAAnB,EAAA,OAAA,IAAA,EACAoB,EAAApB,EAAA,OAAA,IAAA,EACA,CAAAqB,EAAAC,CAAA,EAAAtB,EAAA,SAAA,EAAA,EACA,CAAAuB,EAAAC,CAAA,EAAAxB,EAAA,SAAA,EAAA,EACA,CAAAyB,EAAAC,CAAA,EAAA1B,EAAA,SAAA2B,CAAA,EACA,CAAAC,EAAAC,CAAA,EAAA7B,EAAA,SAAA,CAAA,CAAA,EAGA,CAAA8B,EAAAC,CAAA,EAAA/B,EAAA,SAAAgC,CAAA,EAGAhC,EAAA,UAAA,IAAA,OACAiC,EAAA,GACAC,EAAAd,EAAA,UAAA,MAAAc,EAAA,OAAA,EAAA,CAAAzB,CAAA,CAAA,EAGA,eAAAwB,GAAA,CACA,GAAA,CACA,KAAA,CAAAE,EAAAC,EAAAC,CAAA,EAAA,MAAA,QAAA,IAAA,CACAzB,EAAA,iBAAAH,CAAA,EACAG,EAAA,WAAA,CACA,QAAA,CAAA,aAAA,CAAAH,CAAA,CAAA,CACA,CAAA,EACAG,EAAA,+BAAAH,CAAA,CACA,CAAA,EAEA6B,EAAA,IAAAC,GAAAJ,EACA1B,EACA4B,CACA,EAGApB,EAAAqB,EAAA,KAAA,EACAT,EAAAO,CAAA,EACA,MAAAI,EAAA,OAAA,KAAAJ,CAAA,EAAA,OAAA,KAAA,IAAA,GAAA,OAAA,KAAAA,CAAA,EAAA,IAAAK,GAAAA,EAAA,MAAA,CAAA,EAAA,EAGAV,EAAAC,EAAAQ,CAAA,CAAA,OAAAE,EAAA,CAEAC,EAAA,KAAA,QAAAD,CAAA,CAAA,CACA,CAGA,SAAAE,GAAA,CACAjC,EAAA,CAAA,UAAAU,EACA,cAAAE,EACA,WAAAE,CACA,CAAA,CACA,CAGA,GAAA,CAAAT,EACA,OAAAV,EAAA,IAAA,MAAA,CAAA,UAAA,kBAAA,SAAAA,EAAA,IAAAuC,GAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,EAOA,SAAAC,EAAAC,EAAAC,EAAA,CAIA,OAAA,OAAA,KAAAA,CAAA,EAAA,OAAAP,GAAAM,EAAA,OAAAN,EAAA,OAAAT,CACA,CACA,CAGA,OAAA1B,EAAA,IACA,MAAA,CAAA,UAAA,kBACA,MAAAQ,EAAA,CAAA,QAAA,MAAA,EAAA,CAAA,EACA,SAAAR,EAAA,IAGA2C,GAAA,CAAA,MAAA3C,EAAA,IAAA,KAAA,CAAA,UAAA,QAAA,SAAA,eAAA,CAAA,EACA,KAAAA,EAAA,IAAA,OAAA,CAAA,SAAAA,EAAA,IAGA,MAAA,CAAA,UAAA,mBACA,MAAA,CAAA,SAAA,OAAA,MAAA,OAAA,EACA,SAAAA,EAAA,KAEA,MAAA,CAAA,UAAA,mBACA,MAAA,CAAA,cAAA,MAAA,EACA,SAAA,CAEAA,EAAA,KAAA,MAAA,CAAA,UAAA,mBAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CACAA,EAAA,IAAA,OAAA,CAAA,UAAA,OAAA,SAAA,kBAAA,CAAA,EAAAA,EAAA,KACA,OAAA,CAAA,UAAA,gBACA,MAAA,CAAA,SAAA,UAAA,EACA,SAAA,CAEAA,EAAA,IAAA4C,EAAA,CAAA,IAAA9B,EAEA,eAAA,yBACA,iBAAA,CACA,YAAA,OACA,SAAA,OACA,aAAA,MACA,EACA,mBAAA,CACA,MAAA,OACA,OAAA,8BACA,aAAA,sBACA,EACA,mBAAA,GACA,sBAAA,GACA,wBAAA,GACA,oBAAA,CAAA,QAAA,MAAA,EACA,MAAAC,EACA,SAAA8B,GAAA7B,EAAA6B,CAAA,EACA,kBAAA,GACA,cAAArB,EACA,cAAAsB,GACA,qBAAA,CACA,CAAAC,EAAA,SAAA,EAAA,CACA,GAAAZ,GAAAa,GAAAb,CAAA,CAEA,EACA,uDAAA,CAEA,GAAAA,GAAAc,GAAAd,CAAA,CAEA,CACA,CACA,EAAA,WAhCA,EAiCAnC,EAAA,KACA,OAAA,CAAA,UAAA,qBACA,MAAA,CACA,SAAA,WACA,IAAA,MACA,OAAA,MACA,MAAAe,EAAA,OAAA,OAAA,OACA,MAAA,aACA,EACA,SAAA,CAEAA,EAAA,OAAA,MAAAS,CAAA,CAAA,CAAA,CACA,CAAA,CAAA,EACAgB,EAAAzB,EAAAO,CAAA,EAAA,OAAAtB,EAAA,IAEAJ,GAAA,CAAA,KAAAI,EAAA,KAAA,OAAA,CAAA,SAAA,CAEA,eAAA,IACAA,EAAA,IACAkD,GAAA,CAAA,MAAAlD,EAAA,IAEA,MAAA,CAAA,UAAA,mBACA,MAAA,CACA,QAAA,MACA,IAAA,MACA,UAAA,YACA,EACA,SAAAwC,EAEAzB,EACAO,CACA,EAAA,IAAAa,GAAAnC,EAAA,IAAA,OAAA,CAAA,SAAAmC,CAAA,EAAAA,CAAA,CAAA,CAGA,CAAA,EACA,MAAA,iBAEA,UAAA,MACA,UAAA,GACA,SAAAnC,EAAA,KAAA,OAAA,CAAA,UAAA,iBAAA,SAAA,CAIAwC,EAAAzB,EACAO,CACA,EAAA,OACA,IACA,OAAAkB,EAEAzB,EACAO,CACA,EAAA,OAAA,EAAA,IAAA,EAGA,CAAA,CAAA,CACA,CAAA,EACA,IAAA,4EAAA,CAAA,CAAA,CAGA,CAAA,EAAAtB,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAIA,CAAA,CAAA,EAEAA,EAAA,KAAA,MAAA,CAAA,UAAA,mBAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CAGAA,EAAA,IAAA,OAAA,CAAA,UAAA,OAAA,SAAA,YAAA,CAAA,EAAAA,EAAA,IACA4C,EAAA,CAAA,IAAAhC,EAEA,eAAA,yBACA,iBAAA,CACA,YAAA,OACA,SAAA,OACA,aAAA,MACA,EACA,mBAAA,CACA,SAAA,WACA,OAAA,8BACA,aAAA,sBACA,EACA,mBAAA,GACA,sBAAA,GACA,wBAAA,GACA,oBAAA,CAAA,QAAA,MAAA,EACA,cAAA,GACA,MAAAK,EACA,SAAAC,EACA,kBAAA,GACA,cAAAiC,GACA,qBAAA,CACA,CAAAJ,EAAA,UAAA,EAAA,CACA,GAAAK,GAAA9C,EAAA,kBAAA8C,CAAA,CAEA,CACA,CACA,EAAA,UA3BA,CA4BA,CAAA,CAAA,EACApD,EAAA,KAAA,MAAA,CAAA,UAAA,mBAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CAGAA,EAAA,IAAA,OAAA,CAAA,UAAA,OAAA,SAAA,MAAA,CAAA,EAAAA,EAAA,IACA4C,EAAA,CAAA,IAAA/B,EAEA,eAAA,yBACA,iBAAA,CAAA,YAAA,OAAA,SAAA,MAAA,EACA,mBAAA,CACA,SAAA,WACA,OAAA,8BACA,aAAA,uBACA,SAAA,OACA,EACA,mBAAA,GACA,sBAAA,GACA,wBAAA,GACA,KAAA,SACA,UAAAQ,EACA,UAAAgC,EACA,oBAAA,CAAA,QAAA,MAAA,EACA,cAAAA,EAAA,SAAA,EAAA,OACA,MAAAlC,EACA,SAAA0B,GAAAzB,EAAA,CAAAyB,CAAA,EACA,kBAAA,GACA,cAAA,IAAA,OAEA,YAAAQ,EAAA,SAAA,EAAA,MAAA,IACA,EACA,qBAAA,CAEA,CAAAN,EAAA,SAAA,EAAA,CACA,GAAAO,GAAAC,GAAA,CAAAD,CAAA,CACA,CACA,CACA,EAAA,YA9BA,CA+BA,CAAA,CAAA,CACA,CAAA,CAAA,CACA,CAAA,CAAA,CAAA,EAEA,SAAAlD,EAEA,QAAAA,EACA,OAAAoD,EAAAvC,CAAA,GAAAwC,GAAA1C,CAAA,GAAAI,GAAAE,GAAAF,GAAAkC,EAAA,IAAAf,EAAA,EAAA,OAOA,OAAAtC,EAAA,IAAA,MAAA,CAAA,UAAA,OAAA,SAAAA,EAAA,IAIA0D,GAAA,CAAA,IAAA,CAAA,EACA,gBAAA,CAAA,WAAA,YAAA,EACA,WAAA,EACA,CAAA,CAAA,CAAA,EAEA,SAAA,OAEA,WAAA,QACA,CAAA,CACA,CAAA,CAGA,CCvTA,SAAAC,GAAA,CAAA,MAAAxD,EACA,UAAAY,EACA,WAAAX,EACA,gBAAAC,CAEA,EAAA,CAMA,KAAA,CAAA,CAAA,oBAAAC,CAAA,CAAA,EAAAC,EAAA,EACAC,EAAAC,GAAA,EACA,CAAAC,EAAAC,CAAA,EAAAjB,EAAA,SAAA,EAEAkB,EAAAlB,EAAA,OAAA,IAAA,EACAmB,EAAAnB,EAAA,OAAA,IAAA,EACA,CAAAuB,EAAAC,CAAA,EAAAxB,EAAA,SAAA,EAAA,EACA,CAAAyB,EAAAC,CAAA,EAAA1B,EAAA,SAAA2B,CAAA,EAEA3B,EAAA,UAAA,IAAA,CACAkE,EAAAzD,CAAA,EACAS,EAAA,SACAA,EAAA,QAAA,MAAA,CACA,EAAA,CAAAT,CAAA,CAAA,EAGA,eAAAyD,EAAAR,EAAA,6BACA,GAAA,CACA,MAAApB,EAAA,MAAA1B,EAAA,iBAAA8C,CAAA,EACAzC,EAAAqB,EAAA,KAAA,EACAwB,GACAK,GAAAC,GAAAlC,EAAAI,EAAA,QAAA,YAAAJ,EAAA,UAAA,YAAAkC,EAAA/C,KAAA,YAAA8C,EAAA,aACA,GAGA3C,GAAA6C,GAAAC,GAAAC,EAAAjC,EAAA,QAAA,YAAAiC,EAAA,UAAA,YAAAD,EAAAjD,KAAA,YAAAgD,EAAA,aAAA,GAGAG,GAAAC,GAAAC,EAAApC,EAAA,QAAA,YAAAoC,EAAA,UAAA,YAAAD,EAAApD,KAAA,MAAAmD,EAAA,YACA9C,EAAAiD,GAAA,OACAC,GAAAC,GAAAC,EAAAxC,EAAA,QAAA,YAAAwC,EAAA,UAAA,YAAAD,EAAAxD,KAAA,YAAAuD,EAAA,WACAjD,EACAgC,CACA,CACA,CAEA,OAAAjB,EAAA,CAEAC,EAAA,KAAA,QAAAD,CAAA,CAAA,CACA,CAGA,SAAAE,GAAA,OACAjC,EAAA,CAAA,UAAAU,EACA,cAAAE,EACA,WAAAE,EACA,gBAAAS,EAAAlB,GAAA,YAAAA,EAAA,UAAA,YAAAkB,EAAAb,EACA,CAAA,CACA,CAGA,OAAAL,EAQAV,EAAA,IACA,MAAA,CAAA,UAAA,kBACA,MAAAQ,EAAA,CAAA,QAAA,MAAA,EAAA,CAAA,EACA,SAAAR,EAAA,IAGA2C,GAAA,CAAA,MAAA3C,EAAA,KAAA,KAAA,CAAA,UAAA,QAAA,SAAA,CAEA,QAAAyE,GAAA1D,EAAA,EAAA,CAAA,CAAA,CAAA,EAAA,KAAAf,EAAA,IAGA,MAAA,CAAA,UAAA,mBACA,MAAA,CAAA,SAAA,OAAA,SAAA,QAAA,SAAA,OAAA,EACA,SAAAA,EAAA,KAAA,MAAA,CAAA,UAAA,mBAAA,MAAA,CAAA,cAAA,MAAA,EAAA,SAAA,CAGAA,EAAA,KAAA,MAAA,CAAA,UAAA,mBAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CACAA,EAAA,IAAA,OAAA,CAAA,UAAA,OAAA,SAAA,YAAA,CAAA,EAAAA,EAAA,IACA4C,EAAA,CAAA,IAAAhC,EAEA,eAAA,yBACA,iBAAA,CACA,YAAA,OACA,SAAA,OACA,aAAA,MACA,EACA,mBAAA,CACA,SAAA,WACA,OAAA,8BACA,aAAA,sBACA,EACA,mBAAA,GACA,sBAAA,GACA,wBAAA,GACA,oBAAA,CAAA,QAAA,MAAA,EACA,cAAA,GACA,MAAAK,EACA,SAAAC,EACA,kBAAA,GACA,cAAAiC,GACA,qBAAA,CACA,CAAAJ,EAAA,UAAA,EAAA,CACA,GAAAK,GAAA9C,EAAA,kBAAA8C,CAAA,CAEA,CACA,CACA,EAAA,UA3BA,CA4BA,CAAA,CAAA,EACApD,EAAA,KAAA,MAAA,CAAA,UAAA,mBAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CAGAA,EAAA,IAAA,OAAA,CAAA,UAAA,OAAA,SAAA,MAAA,CAAA,EAAAA,EAAA,IACA4C,EAAA,CAAA,IAAA/B,EAEA,eAAA,yBACA,iBAAA,CAAA,YAAA,OAAA,SAAA,MAAA,EACA,mBAAA,CACA,SAAA,WACA,OAAA,8BACA,aAAA,uBACA,SAAA,OACA,EACA,mBAAA,GACA,sBAAA,GACA,wBAAA,GACA,KAAA,SACA,UAAAQ,EACA,UAAAgC,EACA,oBAAA,CAAA,QAAA,MAAA,EACA,cAAAA,EAAA,SAAA,EAAA,OACA,MAAAlC,EACA,SAAA0B,GAAAzB,EAAA,CAAAyB,CAAA,EACA,kBAAA,GACA,cAAA,IAAA,OAEA,YAAAQ,EAAA,SAAA,EAAA,MAAA,IACA,EACA,qBAAA,CAEA,CAAAN,EAAA,SAAA,EAAA,CACA,GAAAO,GAAAC,GAAA,CAAAD,CAAA,CACA,CACA,CACA,EAAA,YA9BA,CA+BA,CAAA,CAAA,CACA,CAAA,CAAA,CACA,CAAA,EACA,SAAAlD,EAEA,QAAAA,EACA,OAAAoD,EAAAvC,CAAA,GAAAyD,GAAA,CAAA,KAAA3D,CAAA,CAAA,GAAAI,GAAAE,GAAAF,GAAAkC,EAAA,IAAAf,EAAA,EAAA,OAOA,OAAAtC,EAAA,IAAA,MAAA,CAAA,UAAA,OAAA,SAAAA,EAAA,IAIA0D,GAAA,CAAA,IAAA,CAAA,EACA,gBAAA,CAAA,WAAA,YAAA,EACA,WAAA,EACA,CAAA,CAAA,CAAA,EAEA,SAAA,OAEA,WAAA,QACA,CAAA,CACA,CAAA,EArHA1D,EAAA,IAAA,MAAA,CAAA,UAAA,kBAAA,SAAAA,EAAA,IAAAuC,GAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,CAwHA,CCvLA,SAAAoC,GAAAvB,EAAAjB,EAAA,CACA,KAAA,CAAA,CAAA,QAAAyC,EAAA,oBAAAtE,CAAA,CAAA,EAAAC,EAAA,EACA,CAAA,CAAA,cAAAsE,CAAA,CAAA,EAAAC,GAAA,EACA,CAAAC,EAAAC,CAAA,EAAAtF,EAAA,SAAA,EAAA,EACA,CAAAuF,EAAAC,CAAA,EAAAxF,EAAA,SAAA,MAAA,EACA,CAAAyF,EAAAC,CAAA,EAAA1F,EAAA,SAAA,EACA,CAAA2F,EAAAC,CAAA,EAAA5F,EAAA,SAAA,CAAA,CAAA,EACA,CAAA6F,EAAAC,CAAA,EAAA9F,EAAA,SAAA,CAAA,CACA,EAEA,CAAA+F,EAAAC,CAAA,EAAAhG,EAAA,SAAA,EAAA,EACA,CAAAiG,EAAAC,CAAA,EAAAlG,EAAA,SAAA,CAAA,EACA,CAAAmG,EAAAC,CAAA,EAAApG,EAAA,SAAA,EAGAqG,EAAArG,EAAA,OAAA,IAAA,EACA,CAAAsG,EAAAC,CAAA,EAAAvG,EAAA,SAAA,EAAA,EACA,CAAAwG,EAAAC,CAAA,EAAAzG,EAAA,SAAA,EAAA,EACA,CAAA0G,EAAAC,CAAA,EAAA3G,EAAA,SAAA,EAAA,EAEAA,EAAA,UAAA,IAAA,CACA,CAAA0D,GAAA,CAAAjB,GAIAmE,EAAAlD,EAAAjB,CAAA,CAAA,EAAA,CAAAiB,EAAAjB,CAAA,CAAA,EAGAzC,EAAA,UAAA,IAAA,CACA,GAAAsG,EAAA,CACA,MAAAO,EAAAlB,EAAA,OAAAmB,GAAAA,EAAA,KAAA,YAAA,EAAA,WAAAR,EAAA,YAAA,CAAA,CACA,EAEAR,EAAAe,CAAA,CAAA,MAEAf,EAAA,CAAA,CAAA,CACA,EAAA,CAAAQ,CAAA,CAAA,EAGA,SAAAS,GAAA,CAmRA,MAlRA,CAAA,CACA,MAAAzG,EAAA,KAEA,SAAA,CAAA,UAAA,wBACA,MAAA,CAAA,IAAA,OAAA,EACA,QAAA,IAAAkF,EAAA,MAAA,EACA,SAAA,CAEAlF,EAAA,IAAA,OAAA,CAAA,SAAA,WAAA,CAAA,EAAAiF,IAAA,OAAAjF,EAAA,IAEA0G,EAAA,CAAA,MAAA,GACA,OAAA,GACA,KAAA,mBACA,MAAA3B,EAAA,CAAA,EAAA,CAAA,UAAA,gBAAA,CACA,CAAA,EAAA/E,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAGA,CAAA,CAAA,EAEA,UAAA,OAEA,IAAA,OACA,MAAA,OACA,MAAA,MACA,UAAA,kCACA,SAAA,GACA,aAAA,KAEA,CAAA,QAAA,IAAA,CAEAqF,EAAA,KAAA,CAAAsB,EAAAC,IAAA7B,EAAA6B,EAAA,KAAA,cAAAD,EAAA,IAAA,EAAAA,EAAA,KAAA,cAAAC,EAAA,IAAA,CAIA,EAGAtB,EAAA,CAAA,GAAAD,CAAA,CAAA,EACAL,EAAA,CAAAD,CAAA,CAAA,CACA,GAEA,OAAA8B,GAAA7G,EAAA,IAEA8G,GAAA,CAAA,GAAA,WAAAD,CAAA,IAAAT,CAAA,IAAAxB,CAAA,GACA,IAAA,aACA,OAAA,SACA,UAAA,OACA,SAAAiC,CAEA,CAAA,CACA,EAEA,CACA,MAAA7G,EAAA,KAEA,SAAA,CAAA,UAAA,wBACA,MAAA,CAAA,IAAA,OAAA,EACA,QAAA,IAAAkF,EAAA,UAAA,EACA,SAAA,CAEAlF,EAAA,IAAA,OAAA,CAAA,SAAA,WAAA,CAAA,EAAAiF,IAAA,WAAAjF,EAAA,IAEA0G,EAAA,CAAA,MAAA,GACA,OAAA,GACA,KAAA,mBACA,MAAA3B,EAAA,CAAA,EAAA,CAAA,UAAA,gBAAA,CACA,CAAA,EAAA/E,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAGA,CAAA,CAAA,EAEA,UAAA,WAEA,IAAA,WACA,MAAA,OACA,MAAA,MACA,UAAA,kCACA,OAAA6G,GAAAA,IAAA,OAAA,CAAArD,EAAAqD,CAAA,EAAAA,EAAA7G,EAAA,IAKA+G,GAAA,CAAA,GAAA,IAAAC,EAAAH,CAAA,EACA,eAAA,GACA,WAAA,GACA,KAAAI,GAAA,WACA,CAAA,EACA,aAAA,KAGA,CAAA,QAAA,IAAA,CAEA5B,EAAA,KAAA,CAAAsB,EAAAC,IAAA7B,EAAA4B,EAAA,SAAA,cAAAC,EAAA,QAAA,EAAAA,EAAA,SAAA,cAAAD,EAAA,QAAA,CAGA,EAGArB,EAAA,CAAA,GAAAD,CAAA,CAAA,EACAL,EAAA,CAAAD,CAAA,CAAA,CACA,EAEA,EACA,CACA,MAAA/E,EAAA,KAEA,SAAA,CAAA,UAAA,wBACA,MAAA,CAAA,IAAA,OAAA,EACA,QAAA,IAAAkF,EAAA,YAAA,EACA,SAAA,CAEAlF,EAAA,IAAA,OAAA,CAAA,SAAA,KAAA,CAAA,EAAAiF,IAAA,aAAAjF,EAAA,IAEA0G,EAAA,CAAA,MAAA,GACA,OAAA,GACA,KAAA,mBACA,MAAA3B,EAAA,CAAA,EAAA,CAAA,UAAA,gBAAA,CACA,CAAA,EAAA/E,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAGA,CAAA,CAAA,EAEA,UAAA,aAEA,IAAA,aACA,MAAA,OACA,MAAA,MACA,UAAA,kCACA,OAAA6G,GAAAA,EACA,aAAA,KAEA,CAAA,QAAA,IAAA,CAEAxB,EAAA,KAAA,CAAAsB,EAAAC,IAAA7B,EAAA4B,EAAA,WAAAC,EAAA,WAAAA,EAAA,WAAAD,EAAA,UAGA,EAGArB,EAAA,CAAA,GAAAD,CAAA,CAAA,EACAL,EAAA,CAAAD,CAAA,CAAA,CACA,EAEA,EACA,CACA,MAAA/E,EAAA,KAEA,MAAA,CAAA,UAAA,gDACA,MAAA,CACA,IAAA,MACA,eAAA,WACA,UAAA,YACA,EACA,SAAA,CAEAA,EAAA,IAAA,SAAA,CAAA,UAAA,6BACA,MAAA,CAAA,OAAA,EAAA,EACA,QAAA,IAAAmG,EAAA,CAAAD,CAAA,EACA,SAAAlG,EAAA,IAEAkH,GAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAAhB,EAAA,oBAAA,kBACA,CAAA,CACA,CAAA,EACAA,EAAAlG,EAAA,KAEA,OAAA,CAAA,UAAA,uBACA,MAAA,CACA,IAAA,MACA,eAAA,WACA,MAAA,cACA,UAAA,YACA,EACA,SAAA,CAEAA,EAAA,IAAA4C,EAAA,CAAA,IAAAmD,EACA,MAAAC,EACA,SAAAmB,GAAAlB,EAAAkB,CAAA,EACA,kBAAA,GACA,mBAAA,GACA,YAAA,oBACA,cAAA,GACA,mBAAA,CACA,SAAA,WACA,UAAA,YACA,EACA,iBAAA,CACA,MAAA,OACA,SAAA,QACA,SAAA,SACA,SAAA,OACA,QAAA,OACA,MAAA,QACA,aAAA,SACA,aAAA,OACA,UAAA,aACA,WAAA,cACA,aAAA,uBACA,OAAA,OACA,aAAA,MACA,EACA,cAAAC,GACA,qBAAA,CAAA,CACA,CAAA,EACApH,EAAA,IACA,SAAA,CAAA,UAAA,6BACA,QAAA,IAAA,CAEAiG,EAAA,EAAA,EACAE,EAAA,EAAA,CAAA,EACA,SAAAnG,EAAA,IAEAqH,GAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,kBACA,CAAA,CACA,CAAA,CACA,CAAA,CAAA,EAAArH,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAGA,CAAA,CAAA,EAEA,UAAA,6BAEA,OAAA,CAAAsH,EAAAd,IAAAxG,EAAA,KAEA,MAAA,CAAA,UAAA,uCACA,MAAA,CAAA,IAAA,OAAA,eAAA,UAAA,EACA,SAAA,CAEAA,EAAA,IAAAkD,GAAA,CAAA,QAAA,CAAA,OAAA,EACA,MAAA,OACA,MAAA,iBACA,UAAA,MACA,cAAA,uBACA,SAAAlD,EAAA,IAEA,SAAA,CAAA,UAAA,iBACA,QAAA,IAAA,CAEAoF,EAAAoB,CAAA,EACAV,EAAAyB,EAAA,IAAA,CAAA,EACA,SAAAvH,EAAA,IAAAwH,GAAA,CAAA,MAAA,GAAA,OAAA,GAAA,KAAA,kBAAA,CAAA,CAEA,CAAA,CACA,CAAA,EACAxH,EAAA,IAEAkD,GAAA,CAAA,QAAA,CAAA,OAAA,EACA,MAAA,SACA,MAAA,UACA,UAAA,MACA,cAAA,uBACA,SAAAlD,EAAA,IAEA,SAAA,CAAA,UAAA,iBACA,QAAA,IAAA,CAEAoF,EAAAoB,CAAA,EACAV,EAAAyB,EAAA,MAAA,CAAA,EACA,SAAAvH,EAAA,IAAAL,GAAA,CAAA,MAAA,GAAA,OAAA,GAAA,KAAA,kBAAA,CAAA,CAEA,CAAA,CACA,CAAA,CACA,CAAA,CAAA,EACA,MAAA,QAEA,MAAA,MACA,IAAA,SACA,UAAA,QACA,CACA,CAEA,CAGA,eAAA2G,EAAAmB,EAAAC,EAAA,CAIA,IAAAC,EACA,GAAAF,EACAE,EAAAF,UAAAC,EAAA,CAEA,MAAAE,EAAA,MAAAC,GAAA,CAAA,GAAA,IAAAvH,EAAA,UAAA,CAEA,OAAAoH,CACA,CAAA,EACA,SAAA,EACA,aAAA,IACA,YAAAI,GAAA,EAAAA,GAAA,MAAAA,EAAA,aACA,CAAA,EAEAF,IAAAD,EAAA,IAAAX,EAAAY,GAAA,YAAAA,EAAA,YAAA,EAAA,CAGA,GAAA,CAAAD,EAAA,CACAjC,EAAA,EAAA,EACA,MAAA,CAEAA,EAAA,EAAA,EACA,MAAAqC,EAAA,MAAAzH,EAAA,WAAA,CACA,QAAA,CAAA,aAAA,CAAAqH,CAAA,CAAA,EACA,QAAA9C,CACA,CAAA,EAAA,KAAAnC,GAAA,OAAA,KAAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAAN,IAIA,QAAA,MAAA,0BAAAuF,GAAA,YAAAA,EAAA,UAAA,EACAtF,EAAA,KAAA,QAAAD,CAAA,EACA,GAAA,EAEAiE,EAAA0B,CAAA,EACA,MAAAC,EAAA,CAAA,EACA,CAAAhG,EAAAiG,CAAA,EAAA,MAAA,QAAA,IAAA,CAAA3H,EAAA,iBAAAqH,CAAA,EACArH,EAAA,qBAAAqH,CAAA,EAAA,KAAAO,GAAAA,EAAAP,EAAA,SAAA,CAAA,EAAA,aAAA,CAGA,CAAA,EAEAQ,EAAA,OAAA,QAAAnG,EAAA,OAAA,EAAA,OAAA,CAAA,CAAAoG,CAAA,IAAAA,IAAA,GACA,EAEA,SAAA,CAAAC,EAAAT,CAAA,IAAAO,EACA,GAAA,CACA,MAAAG,EAAA,CAAA,KAAAD,EACA,SAAAT,EAAA,cACA,WAAAA,EAAA,WAAA,SAAA,EACA,OAAAK,GAAA,EACA,IAAAI,CACA,EAGAL,EAAA,KAAA,CAAArB,GAAAC,KAAAD,GAAA,OAAAC,GAAA,MAAA,EACAoB,EAAA,KAAAM,CAAA,CAAA,OAAAlG,EAAA,CAEAC,EAAA,KAAA,QAAAD,CAAA,CAAA,QAAA,CAEAwD,GAAAuC,EAAA,QAAA,CAAAE,EAAAT,CAAA,CAAA,EAAA,GAAAO,EAAA,OAAA,GACA,CACA,CAGA7C,EAAA0C,CAAA,EACAtC,EAAA,EAAA,CAAA,CAGA,MAAA,CAAA,UAAAD,EACA,QAAAE,EACA,QAAAc,EAAA,EACA,KAAAlB,EAAA,OAAAA,EAAAF,EACA,UAAAJ,EACA,cAAAF,EACA,YAAAI,EACA,OAAAU,EACA,UAAA0C,GAAAzC,EAAAyC,CAAA,EAEA,QAAA,IAAAjC,EAAAlD,EAAAjB,CAAA,CACA,CAEA,CC9YA,SAAAqG,IAAA,OACA,MAAAC,EAAAC,GAAA,EACA,CAAA,GAAAtF,EAAA,KAAAjB,CAAA,EAAAwG,GAAA,EACA,CAAA,CAAA,oBAAArI,CAAA,CAAA,EAAAC,EAAA,EACA,CAAA,CAAA,cAAAsE,CAAA,CAAA,EAAAC,GAAA,EACA,CAAA3E,EAAAyI,CAAA,EAAAlJ,EAAA,SAAA,EACA,CAAAmJ,EAAAC,CAAA,EAAApJ,EAAA,SAAA,EACA,CAAAyF,EAAAC,CAAA,EAAA1F,EAAA,SAAA,EAGA,CAAAiG,EAAAC,CAAA,EAAAlG,EAAA,SAAA,CAAA,EACA,CAAA,UAAAqJ,EACA,QAAAC,EACA,QAAAC,EACA,KAAAC,EACA,YAAAC,EACA,cAAAC,EACA,UAAAC,EACA,OAAAxD,EACA,UAAAC,EACA,QAAAwD,CACA,EAAA3E,GAAAxE,EAAAgC,CAAA,EAEA,CAAAoH,EAAAC,CAAA,EAAA9J,EAAA,SAAA,EAAA,EACA,CAAA+J,EAAAC,CAAA,EAAAhK,EAAA,SAAA,CAAA,EACA,CAAAiK,EAAAC,CAAA,EAAAC,GAAA,EAGA,CAAAC,EAAAC,CAAA,EAAArK,EAAA,SAAA,EAGA,CAAAsK,EAAAC,CAAA,EAAAvK,EAAA,SAAA,EAEA,CAAAwK,EAAAC,CAAA,EAAAzK,EAAA,SAAA,EAGAA,EAAA,UAAA,IAAA,CACA,GAAA,CAAA0D,GAAA,CAAAjB,EAAA,CACAE,EAAA,KAAA,QAAA,IAAA,MAAA,6BAAA,CAAA,EACAoG,EAAA,cAAA,EACA,MAAA,CAGAe,EAAAT,CAAA,EACAnD,EAAAoD,CAAA,EACA5D,EAAA+D,CAAA,EAEAI,GAAA3F,EAAA,EAEAkC,EAAAD,CAAA,EAEAA,IAAA0B,EAAA,QAAApH,IAAAgJ,GAAA,MAAAA,EAAA,QAKAY,EAAA,CAAA,UAAAZ,GAAA,YAAAA,EAAA,IACA,CAAA,EAEAc,EAAAG,GAAA,aAAA,EACA,EAAA,CACAhH,EACAjB,EACAiH,EACAC,EACAF,EACAtD,EACAqD,CACA,CAAA,EAGA,eAAAtF,GAAA,CACA,GAAA,CACA,IAAA+D,EACA,GAAAnE,EAAAJ,CAAA,EACAuE,EAAA,IAAAX,EAAA5D,CAAA,UAAAjB,EAAA,CAEA,MAAAyF,EAAA,MAAAC,GAAA,CAAA,GAAA,IAAAvH,EAAA,UAAA,CAEA,OAAA6B,CACA,CAAA,EACA,SAAA,EACA,aAAA,IACA,YAAA2F,GAAA,EAAAA,GAAA,MAAAA,EAAA,aACA,CAAA,EAGAH,EAAA,IAAAX,EAAAY,GAAA,YAAAA,EAAA,YAAA,CAAA,CAGA,GAAA,CAAAD,EACA,MAAA,IAAA,MAAA,mDAAA,EAEAiB,EAAAjB,CAAA,EACA,MAAA3F,EAAA,MAAA1B,EAAA,iBAAAqH,CAAA,EAEAmB,EAAA9G,CAAA,CAAA,OAAAI,EAAA,CAEAC,EAAA,KAAA,QAAAD,CAAA,EACAqG,EAAA,cAAA,CAAA,CACA,CAGA,OAAAzI,EAAA,KAAAA,EAAA,SAAA,CAAA,SAAA,CAEAA,EAAA,IAAA,MAAA,CAAA,UAAA,OAAA,SAAAA,EAAA,KAAA,MAAA,CAAA,UAAA,cAAA,SAAA,CAEAkK,GAAAF,EAAAhK,EAAA,IACAqK,GAAA,CAAA,KAAAH,EACA,MAAA,IAAA,CAEAC,EAAA,MAAA,EACAF,EAAA,MAAA,CAAA,EACA,OAAArI,EAAA0I,GAAAN,CAAA,IAAA,YAAApI,EAAA,aAEA,CAAA,EAAA5B,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,EAIAA,EAAA,IAAA,MAAA,CAAA,UAAA,4BAAA,SAAAA,EAAA,KAGA,MAAA,CAAA,UAAA,gBACA,MAAA,CAAA,eAAA,eAAA,EACA,SAAA,CAEAA,EAAA,IAAA,KAAA,CAAA,UAAA,QAAA,SAAA,mBAAA,CAAA,EAAA6I,GAAA,MAAAA,EAAA,mBAAAhE,GAAA7E,EAAA,KAEA,SAAA,CAAA,UAAA6I,GAAA,YAAAA,EAAA,mBAAAhE,MAAA,OAEA,UAAA,0BAEA,MAAA,CACA,IAAA,OACA,QAAA,WACA,SAAA,OACA,UAAA,QACA,EACA,QAAA,IAAA+E,EAAA,CAAA,MAAArC,EAAA,MAAA,CAAA,EAEA,SAAA,CAGAvH,EAAA,IAAAR,GAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,eACA,CAAA,EACA,eAAA,CAAA,CAAA,EAAAQ,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAIA,CAAA,CAAA,CAAA,CAAA,EAGAuJ,EAAAvJ,EAAA,IAEA,MAAA,CAAA,UAAA,cACA,MAAA,CAAA,WAAA,MAAA,eAAA,QAAA,EACA,SAAAA,EAAA,IAEAuC,GAAA,CAAA,QAAA,yBAAA,KAAA,MAAAoD,CAAA,CAAA,GACA,CAAA,CACA,CAAA,EAAA3F,EAAA,IAGAuK,GAAA,CAAA,MAAA,KAAA,CAAA,UAAA,aAAA,GACA,UAAA,0BACA,SAAA,GACA,OAAA,CAAA,EAAA,EAAA,EACA,QAAAtB,EACA,WAAAC,EACA,WAAA,CACA,SAAA,CAAA,cAAA,EACA,cAAA,mBACA,WAAA,CAAAsB,EAAAC,EAAAC,IAAAC,GAAA,CAEA,KAAAH,EACA,KAAAC,EACA,gBAAAC,EACA,YAAAjB,CACA,CAAA,EACA,SAAAe,GAAAd,EAAAc,CAAA,EACA,oBAAA,GACA,gBAAA,GACA,QAAAf,CACA,EACA,OAAA,CACA,UAAAzJ,EAAA,KAEA,MAAA,CAAA,UAAA,0BACA,MAAA,CACA,QAAA,QACA,UAAA,aACA,MAAA,MACA,EACA,SAAA,CAEAA,EAAA,IAAA,OAAA,CAAA,UAAA,aAAA,MAAA,CAAA,SAAA,MAAA,EAAA,SAAA,qBAAA,CAAA,EAEAA,EAAA,IACA,OAAA,CAAA,UAAA,OACA,MAAA,CAAA,SAAA,OAAA,SAAA,OAAA,EACA,SAAA,2KACA,CAAA,EAIAA,EAAA,IAEA,MAAA,CAAA,UAAA,uBACA,MAAA,CAAA,IAAA,MAAA,EACA,SAAA6I,GAAA,MAAAA,EAAA,mBAAAhE,GAAA7E,EAAA,KAGA,SAAA,CAAA,UAAA,0BACA,MAAA,CACA,IAAA,OACA,QAAA,WACA,SAAA,OACA,UAAA,QACA,EACA,QAAA,IAAA4J,EAAA,CAEA,MAAArC,EAAA,MACA,CAAA,EACA,SAAA,CAGAvH,EAAA,IAAAR,GAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,eACA,CAAA,EACA,eAAA,CAAA,CAAA,EAAAQ,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAIA,CAAA,CAEA,CAAA,CAAA,CACA,CAEA,CAAA,CACA,CAAA,CAAA,CAAA,CAAA,EAGA2J,EAAA,IAAA,OAAA,GAAAxJ,IAAA0I,GAAA,MAAAA,EAAA,mBAAAhE,IAAA7E,EAAA,IAIAE,GAAA,CAAA,WAAA,IAAA,CAEA0J,EAAA,CAAA,CAAA,EACAxE,EAAA,MAAA,EACAwE,EAAA,CAAA,CAAA,CAAA,EACA,gBAAAgB,GAAA,CAEAb,EAAAa,CAAA,EACAX,EAAAG,GAAA,UAAA,EACAtE,EAAA,MAAA,EACAV,EAAA,MAAA,EACAwE,EAAA,CAAA,CAAA,CAAA,EACA,MAAAzJ,CACA,CAAA,EAAAH,EAAA,IAAAA,EAAA,SAAA,CAAA,SAAA,GAAA,CAAA,EAGA6F,IAAA0B,EAAA,MAAApH,IAAAgF,GAAA,MAAAA,EAAA,QAAA0D,GAAA,MAAAA,EAAA,mBAAAhE,IAAA7E,EAAA,IAOA2D,GAAA,CAAA,WAAA,IAAA,CAEAmC,EAAA,MAAA,EACAV,EAAA,MAAA,CAAA,EACA,gBAAAwF,GAAA,CAEAb,EAAAa,CAAA,EACAX,EAAAG,GAAA,WAAA,EACAtE,EAAA,MAAA,EACAV,EAAA,MAAA,CAAA,EACA,MAAAjF,EACA,UAAAgF,EAAA,IACA,CAAA,EAAAnF,EAAA,IAAAA,EAAA,SAAA,CAAA,SAAA,GAAA,CAAA,EAGAG,GAAA2J,GAAAE,IAAAnB,GAAA,MAAAA,EAAA,mBAAAhE,IAAA7E,EAAA,IAOA6K,GAAA,CAAA,yBAAApD,GAAA,CAEA0C,EAAA1C,CAAA,EACAsC,EAAA,MAAA,EACAT,EAAA,CAAA,EACA,gBAAAU,EACA,QAAAF,EACA,QAAA3J,EACA,MAAA,IAAA,CAEA4J,EAAA,MAAA,EACA3E,EAAA,MAAA,EACAU,EAAA,MAAA,CAAA,EACA,OAAA,IAAA,CAEAiE,EAAA,MAAA,EACAE,EAAA,MAAA,EACA7E,EAAA,MAAA,EACAU,EAAA,MAAA,CAAA,EACA,WAAA,SACA,YAAA,SACA,CAAA,EAAA9F,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAGA,CAAA,CAAA,CAIA"}
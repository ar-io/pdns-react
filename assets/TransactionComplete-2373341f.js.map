{"version":3,"file":"TransactionComplete-2373341f.js","sources":["../../node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js","../../node_modules/@ant-design/icons/es/icons/PlusOutlined.js","../../src/components/cards/ActionCard/ActionCard.tsx","../../src/components/pages/Transaction/transaction-announcements.tsx","../../src/components/pages/Transaction/TransactionComplete.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar PlusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M192 474h672q8 0 8 8v60q0 8-8 8H160q-8 0-8-8v-60q0-8 8-8z\" } }] }, \"name\": \"plus\", \"theme\": \"outlined\" };\nexport default PlusOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport PlusOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlusOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar PlusOutlined = function PlusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: PlusOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  PlusOutlined.displayName = 'PlusOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(PlusOutlined);","import { Link } from 'react-router-dom';\n\nfunction ActionCard({ to, body }: { to: string; body?: JSX.Element | string }) {\n  return (\n    <Link\n      to={to}\n      className=\"link hover\"\n      style={{ textDecoration: 'none', width: '100%' }}\n    >\n      <div\n        className=\"flex flex-column center white radius\"\n        style={{\n          minWidth: '175px',\n          minHeight: '100px',\n          width: '100%',\n          padding: '0px',\n          gap: '15px',\n          textDecoration: 'none',\n          position: 'relative',\n          fontSize: '18px',\n          border: '1px solid var(--text-faded)',\n        }}\n      >\n        {body}\n      </div>\n    </Link>\n  );\n}\n\nexport default ActionCard;\n","import { CheckCircleFilled } from '@ant-design/icons';\nimport { ANT_INTERACTION_TYPES, ARNS_INTERACTION_TYPES } from '@src/types';\nimport { decodeDomainToASCII, lowerCaseDomain } from '@src/utils';\nimport { Link } from 'react-router-dom';\n\nexport const getTransactionCompleteAnnouncement = ({\n  interactionType,\n  ...params\n}: {\n  interactionType: ARNS_INTERACTION_TYPES | ANT_INTERACTION_TYPES;\n} & Record<string, any>) => {\n  switch (interactionType) {\n    case ARNS_INTERACTION_TYPES.INCREASE_UNDERNAMES: {\n      return (\n        <span className=\"white center\">\n          <CheckCircleFilled\n            style={{ fontSize: 18, color: 'var(--success-green)' }}\n          />\n          &nbsp; Undernames Increased\n        </span>\n      );\n    }\n    case ARNS_INTERACTION_TYPES.EXTEND_LEASE: {\n      return (\n        <span className=\"white center\">\n          <CheckCircleFilled\n            style={{ fontSize: 18, color: 'var(--success-green)' }}\n          />\n          &nbsp; Your lease has been extended\n        </span>\n      );\n    }\n    case ARNS_INTERACTION_TYPES.BUY_RECORD: {\n      return (\n        <span\n          className=\"flex white center\"\n          style={{ gap: '8px', width: '100%', padding: '0px 24px' }}\n        >\n          <span>\n            <CheckCircleFilled\n              style={{ fontSize: 18, color: 'var(--success-green)' }}\n            />\n          </span>\n          &nbsp;\n          {params?.auction && !params?.isBid ? (\n            <span\n              className=\"flex center\"\n              style={{ width: '100%', justifyContent: 'space-between' }}\n            >\n              Auction started for {decodeDomainToASCII(params?.name)}{' '}\n              <Link\n                className=\"outline-button\"\n                style={{\n                  color: 'var(--text-black)',\n                  background: 'var(--text-white)',\n                  borderColor: 'var(--text-black)',\n                }}\n                to={`/auctions/${lowerCaseDomain(params?.name)}`}\n              >\n                View Auction\n              </Link>\n            </span>\n          ) : (\n            <>\n              <b>{decodeDomainToASCII(params?.name)}</b> is yours!\n            </>\n          )}\n        </span>\n      );\n    }\n    default: {\n      return <span className=\"flex white center\">Transaction Success</span>;\n    }\n  }\n};\n","import { PlusOutlined } from '@ant-design/icons';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useTransactionState } from '../../../state/contexts/TransactionState';\nimport {\n  ARNSMapping,\n  TransactionData,\n  ValidInteractionType,\n} from '../../../types';\nimport {\n  getARNSMappingByInteractionType,\n  getLinkId,\n} from '../../../utils/transactionUtils/transactionUtils';\nimport { ANTCard } from '../../cards';\nimport ActionCard from '../../cards/ActionCard/ActionCard';\nimport { ArrowLeft, SettingsIcon } from '../../icons';\nimport PageLoader from '../../layout/progress/PageLoader/PageLoader';\nimport { getTransactionCompleteAnnouncement } from './transaction-announcements';\n\nfunction TransactionComplete() {\n  const [\n    { interactionResult, interactionType, workflowName, transactionData },\n    dispatchTransactionState,\n  ] = useTransactionState();\n  const navigate = useNavigate();\n\n  const [antProps, setAntProps] = useState<ARNSMapping>();\n  const [localData, setLocalData] = useState<{\n    transactionData: any;\n    interactionType: any;\n    interactionResult: any;\n  }>();\n\n  useEffect(() => {\n    if (!interactionResult) {\n      navigate('/');\n    }\n    if (!antProps) {\n      setLocalData({\n        transactionData,\n        interactionType,\n        interactionResult,\n      });\n      setAntProps(\n        getARNSMappingByInteractionType({\n          interactionType: interactionType as ValidInteractionType,\n          transactionData: {\n            ...transactionData,\n            deployedTransactionId: interactionResult?.id,\n          } as TransactionData,\n        }) as ARNSMapping,\n      );\n    } else {\n      dispatchTransactionState({\n        type: 'reset',\n      });\n    }\n  }, [antProps]);\n\n  if (!antProps || !localData) {\n    return <PageLoader loading={true} message={'Loading...'} />;\n  }\n\n  const link = getLinkId(workflowName as ValidInteractionType, {\n    ...localData.transactionData,\n    deployedTransactionId: localData.interactionResult.id,\n  }).trim();\n\n  return (\n    <div className=\"page center\">\n      <div\n        className=\"flex-column center\"\n        style={{ gap: '20px', width: '700px' }}\n      >\n        <div\n          className=\"flex flex-row center radius\"\n          style={{\n            width: '700px',\n            height: '90px',\n            background: 'var(--green-bg)',\n            border: '1px solid #44AF69',\n            fontSize: '18px',\n            marginBottom: '20px',\n          }}\n        >\n          {getTransactionCompleteAnnouncement({\n            ...localData.transactionData,\n            interactionType: localData.interactionType,\n          })}\n        </div>\n\n        <div className=\"flex-column center\" style={{ gap: '20px' }}>\n          <div\n            className=\"flex flex-row center\"\n            style={{\n              justifyContent: 'space-between',\n              boxSizing: 'border-box',\n              gap: '20px',\n            }}\n          >\n            <ActionCard\n              to={`/manage/ants/${link}`}\n              body={\n                <div\n                  className=\"flex flex-column center\"\n                  style={{ gap: '15px' }}\n                >\n                  <SettingsIcon width={'20px'} fill={'var(--text-grey)'} />\n                  Configure Domain\n                </div>\n              }\n            />\n            <ActionCard\n              to={`/manage/ants/${link}/undernames`}\n              body={\n                <div\n                  className=\"flex flex-column center\"\n                  style={{ gap: '15px' }}\n                >\n                  <PlusOutlined\n                    style={{ color: 'var(--text-grey)', fontSize: '20px' }}\n                  />\n                  Add Undernames\n                </div>\n              }\n            />\n          </div>\n          <ANTCard\n            {...antProps}\n            overrides={{\n              ...antProps.overrides,\n            }}\n            compact={false}\n            bordered\n          />\n          <div\n            className=\"flex flex-row center\"\n            style={{\n              justifyContent: 'flex-start',\n            }}\n          >\n            <button\n              className=\"flex button hover center white\"\n              onClick={() => navigate('/manage')}\n              style={{ gap: '10px' }}\n            >\n              <ArrowLeft width={'20px'} fill={'var(--text-grey)'} />\n              Back to Manage Assets\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TransactionComplete;\n"],"names":["PlusOutlined$2","PlusOutlinedSvg","PlusOutlined","props","ref","reactExports","AntdIcon","_extends","PlusOutlined$1","ActionCard","to","body","jsxRuntimeExports","Link","getTransactionCompleteAnnouncement","interactionType","params","ARNS_INTERACTION_TYPES","CheckCircleFilled","decodeDomainToASCII","lowerCaseDomain","TransactionComplete","interactionResult","workflowName","transactionData","dispatchTransactionState","useTransactionState","navigate","useNavigate","antProps","setAntProps","localData","setLocalData","getARNSMappingByInteractionType","PageLoader","link","getLinkId","SvgSettings","ANTCard","SvgArrowLeft"],"mappings":"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","x_google_ignoreList":[0,1]}
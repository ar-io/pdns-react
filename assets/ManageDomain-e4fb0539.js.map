{"version":3,"file":"ManageDomain-e4fb0539.js","sources":["../../src/components/pages/ManageDomain/ManageDomain.tsx"],"sourcesContent":["import TransactionSuccessCard from '@src/components/cards/TransactionSuccessCard/TransactionSuccessCard';\nimport ValidationInput from '@src/components/inputs/text/ValidationInput/ValidationInput';\nimport { TransferANTModal } from '@src/components/modals';\nimport AddControllerModal from '@src/components/modals/AddControllerModal/AddControllerModal';\nimport ConfirmTransactionModal, {\n  CONFIRM_TRANSACTION_PROPS_MAP,\n} from '@src/components/modals/ConfirmTransactionModal/ConfirmTransactionModal';\nimport RemoveControllersModal from '@src/components/modals/RemoveControllerModal/RemoveControllerModal';\nimport { ANTContract } from '@src/services/arweave/ANTContract';\nimport { Tooltip } from 'antd';\nimport { Table } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom';\n\nimport { useIsMobile } from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport {\n  ANT_INTERACTION_TYPES,\n  ARNSRecordEntry,\n  ContractInteraction,\n  DomainDetails,\n  INTERACTION_TYPES,\n  ManageDomainRow,\n  UNDERNAME_TABLE_ACTIONS,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport {\n  formatDate,\n  getInteractionTypeFromField,\n  getLeaseDurationFromEndTimestamp,\n  getPendingInteractionsRowsForContract,\n  getUndernameCount,\n  isArweaveTransactionID,\n  lowerCaseDomain,\n  mapTransactionDataKeyToPayload,\n  validateMaxASCIILength,\n  validateTTLSeconds,\n} from '../../../utils';\nimport {\n  ARNS_TX_ID_ENTRY_REGEX,\n  DEFAULT_MAX_UNDERNAMES,\n  DEFAULT_TTL_SECONDS,\n  MAX_LEASE_DURATION,\n  MAX_TTL_SECONDS,\n  MAX_UNDERNAME_COUNT,\n  MIN_TTL_SECONDS,\n  SECONDS_IN_GRACE_PERIOD,\n  SMARTWEAVE_MAX_INPUT_SIZE,\n  STUB_ARWEAVE_TXID,\n  TTL_SECONDS_ENTRY_REGEX,\n} from '../../../utils/constants';\nimport eventEmitter from '../../../utils/events';\nimport { AntDetailKey, mapKeyToAttribute } from '../../cards/ANTCard/ANTCard';\nimport {\n  CirclePending,\n  ExternalLinkIcon,\n  HamburgerOutlineIcon,\n  NewspaperIcon,\n  PencilIcon,\n  VerticalDotMenuIcon,\n} from '../../icons';\nimport { Loader } from '../../layout';\nimport TransactionStatus from '../../layout/TransactionStatus/TransactionStatus';\nimport './styles.css';\n\nconst EDITABLE_FIELDS = ['name', 'ticker', 'targetID', 'ttlSeconds'];\n\nfunction ManageDomain() {\n  const { name } = useParams();\n  const isMobile = useIsMobile();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const [{ walletAddress }] = useWalletState();\n  const [rows, setRows] = useState<ManageDomainRow[]>([]);\n  const [isMaxLeaseDuration, setIsMaxLeaseDuration] = useState<boolean>(false);\n  const [isMaxUndernameCount, setIsMaxUndernameCount] =\n    useState<boolean>(false);\n  const [undernameCount, setUndernameCount] = useState<number>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [showTransferANTModal, setShowTransferANTModal] =\n    useState<boolean>(false);\n  const [showAddControllerModal, setShowAddControllerModal] =\n    useState<boolean>(false);\n  const [showRemoveControllerModal, setShowRemoveControllerModal] =\n    useState<boolean>(false);\n  const [editingField, setEditingField] = useState<string>();\n  const [showConfirmModal, setShowConfirmModal] = useState<boolean>(false);\n  const [interactionType, setInteractionType] =\n    useState<ANT_INTERACTION_TYPES>();\n  const [transactionData, setTransactionData] = useState<any>();\n  const [deployedTransactionId, setDeployedTransactionId] =\n    useState<ArweaveTransactionID>();\n  const [pendingInteractions, setPendingInteractions] = useState<\n    Array<ContractInteraction>\n  >([]);\n  const [modifiedValue, setModifiedValue] = useState<string | number>();\n  const [antState, setANTState] = useState<ANTContract>();\n  const [contractTxId, setContractTxId] = useState<ArweaveTransactionID>();\n\n  useEffect(() => {\n    if (!name || !walletAddress) {\n      navigate('/manage/names');\n      return;\n    }\n\n    fetchDomainDetails(name);\n  }, [name, deployedTransactionId]);\n\n  // TODO: [PE-4630] tech debt, refactor this into smaller pure functions\n  async function fetchDomainDetails(domainName: string) {\n    try {\n      setLoading(true);\n\n      const recordEntry = await arweaveDataProvider.getRecord({\n        domain: lowerCaseDomain(domainName),\n      });\n      const txId = recordEntry?.contractTxId;\n      if (!txId) {\n        throw Error('This name is not registered');\n      }\n      const contractTxId = new ArweaveTransactionID(txId);\n\n      const [\n        contract,\n        confirmations,\n        pendingContractInteractions,\n        associatedRecords,\n      ] = await Promise.all([\n        arweaveDataProvider.buildANTContract(contractTxId),\n        arweaveDataProvider\n          .getTransactionStatus(contractTxId)\n          .then((status) => status[contractTxId.toString()].confirmations),\n        arweaveDataProvider.getPendingContractInteractions(contractTxId),\n        arweaveDataProvider.getRecords<ARNSRecordEntry>({\n          filters: {\n            contractTxId: [contractTxId],\n          },\n        }),\n      ]);\n\n      // simple check that it is ANT shaped contract\n      // TODO: add more checks, eg AST tree and function IO's\n      if (!contract.isValid()) {\n        throw Error('Invalid ANT contract');\n      }\n\n      const names = Object.keys(associatedRecords).filter(\n        (key) => key !== name,\n      );\n\n      const record = name\n        ? await arweaveDataProvider\n            .getRecord({\n              domain: lowerCaseDomain(name),\n            })\n            .catch(() => undefined)\n        : undefined;\n      if (!record) {\n        throw Error('This name is not registered');\n      }\n\n      const duration = record?.endTimestamp\n        ? getLeaseDurationFromEndTimestamp(\n            record.startTimestamp * 1000,\n            record.endTimestamp * 1000,\n          )\n        : 'Indefinite';\n\n      const getLeaseDurationString = () => {\n        if (record?.endTimestamp) {\n          const duration = Math.max(\n            1,\n            getLeaseDurationFromEndTimestamp(\n              record.startTimestamp * 1000,\n              record.endTimestamp * 1000,\n            ),\n          );\n          const y = duration > 1 ? 'years' : 'year';\n          return `${duration} ${y}`;\n        }\n        return 'Indefinite';\n      };\n\n      setIsMaxLeaseDuration(\n        (duration &&\n          typeof duration === 'number' &&\n          duration >= MAX_LEASE_DURATION) ||\n          duration === 'Indefinite',\n      );\n\n      setUndernameCount(record.undernames);\n      setIsMaxUndernameCount(\n        !!undernameCount && record.undernames >= MAX_UNDERNAME_COUNT,\n      );\n\n      const consolidatedDetails: DomainDetails = {\n        expiryDate: record?.endTimestamp\n          ? // assume permabuy if missing timestamp\n            +record.endTimestamp\n          : 'Indefinite',\n        leaseDuration: `${getLeaseDurationString()}`,\n        associatedNames: !names.length ? 'N/A' : names.join(', '),\n        status: confirmations,\n        name: contract.name ?? 'N/A',\n        contractTxId: contractTxId.toString(),\n        targetID:\n          contract.getRecord('@') &&\n          isArweaveTransactionID(contract.getRecord('@')!.transactionId)\n            ? contract.getRecord('@')!.transactionId\n            : 'N/A',\n        ticker: contract.ticker ?? 'N/A',\n        controllers: contract.controllers.join(', ') ?? 'N/A',\n        owner: contract.owner ?? 'N/A',\n        ttlSeconds: contract.getRecord('@')?.ttlSeconds ?? DEFAULT_TTL_SECONDS,\n\n        // -1 because @ record is not counted\n        undernames: `${getUndernameCount(contract.records)}/${(\n          record?.undernames ?? DEFAULT_MAX_UNDERNAMES\n        ).toLocaleString()}`,\n      };\n\n      // get pending tx details\n      const pendingTxs = getPendingInteractionsRowsForContract(\n        pendingContractInteractions,\n        consolidatedDetails,\n      );\n\n      const rows = Object.keys(consolidatedDetails).reduce(\n        (details: ManageDomainRow[], attribute: string, index: number) => {\n          const existingValue =\n            consolidatedDetails[attribute as keyof DomainDetails];\n          const pendingInteraction = pendingTxs.find(\n            (i) => i.attribute === attribute,\n          );\n          const value = pendingInteraction\n            ? pendingInteraction.value\n            : existingValue;\n          const detail = {\n            attribute,\n            value,\n            key: index,\n            interactionType: getInteractionTypeFromField(attribute),\n            pendingInteraction,\n            editable: EDITABLE_FIELDS.includes(attribute),\n          };\n          details.push(detail);\n          return details;\n        },\n        [],\n      );\n\n      setRows(rows);\n      setANTState(contract);\n      setContractTxId(contractTxId);\n      setPendingInteractions(pendingContractInteractions);\n      setLoading(false);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n      navigate('/manage/names', { state: location.pathname });\n    }\n  }\n\n  function getValidationPredicates(\n    value: string | number | undefined,\n    row: ManageDomainRow,\n  ): { [x: string]: { fn: (value: any) => Promise<any>; required?: boolean } } {\n    switch (row.attribute) {\n      case 'ttlSeconds':\n        return {\n          [VALIDATION_INPUT_TYPES.VALID_TTL]: {\n            fn: validateTTLSeconds,\n          },\n        };\n\n      case 'name':\n      case 'ticker':\n        return {\n          [VALIDATION_INPUT_TYPES.VALID_ANT_NAME]: {\n            fn: (name: any) =>\n              validateMaxASCIILength(name, SMARTWEAVE_MAX_INPUT_SIZE),\n          },\n        };\n      case 'targetID':\n      case 'controller': {\n        return {\n          [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n            fn: (id: string) => arweaveDataProvider.validateArweaveId(id),\n          },\n        };\n      }\n      default:\n        return {};\n    }\n  }\n\n  function handleSave(row: ManageDomainRow) {\n    // TODO: make this more clear, we should be updating only the value that matters and not overwriting anything\n    if (!row.isValid || !row.interactionType || !antState) {\n      return;\n    }\n    const payload =\n      row.interactionType === INTERACTION_TYPES.SET_TARGET_ID\n        ? mapTransactionDataKeyToPayload(row.interactionType, [\n            '@',\n            modifiedValue!.toString(),\n            antState.getRecord('@')?.ttlSeconds ?? MIN_TTL_SECONDS,\n          ])\n        : row.interactionType === INTERACTION_TYPES.SET_TTL_SECONDS\n        ? mapTransactionDataKeyToPayload(row.interactionType, [\n            '@',\n            antState.getRecord('@')?.transactionId?.length\n              ? antState.getRecord('@')!.transactionId\n              : STUB_ARWEAVE_TXID,\n            +modifiedValue!,\n          ])\n        : mapTransactionDataKeyToPayload(\n            row.interactionType,\n            modifiedValue!.toString(),\n          );\n\n    if (payload && row.interactionType && contractTxId) {\n      const transactionData = {\n        ...payload,\n        assetId: contractTxId,\n      };\n      setInteractionType(\n        row.interactionType as unknown as ANT_INTERACTION_TYPES,\n      );\n      setTransactionData(transactionData);\n      setShowConfirmModal(true);\n    }\n  }\n\n  return (\n    <>\n      <div className=\"page\" style={{ gap: '30px' }}>\n        {deployedTransactionId && interactionType ? (\n          <TransactionSuccessCard\n            txId={deployedTransactionId}\n            title={CONFIRM_TRANSACTION_PROPS_MAP[interactionType].successHeader}\n            close={() => {\n              setDeployedTransactionId(undefined);\n              setInteractionType(undefined);\n            }}\n          />\n        ) : (\n          <></>\n        )}\n        <div\n          className=\"flex flex-row\"\n          style={{ justifyContent: 'space-between', width: '100%' }}\n        >\n          <h2 className=\"flex white center\" style={{ gap: '16px' }}>\n            <HamburgerOutlineIcon\n              width={'20px'}\n              height={'20px'}\n              fill=\"var(--text-white)\"\n            />\n            {name}\n          </h2>\n          <div\n            className=\"flex flex-row\"\n            style={{ gap: '20px', width: 'fit-content' }}\n          >\n            <Tooltip\n              trigger={['hover']}\n              title={\n                isMaxUndernameCount\n                  ? 'Max undername support reached'\n                  : 'Increase undername support'\n              }\n              color=\"#222224\"\n              placement=\"top\"\n              rootClassName=\"notification-tooltip\"\n            >\n              <button\n                disabled={loading || isMaxUndernameCount}\n                className={`button-secondary ${\n                  loading || isMaxUndernameCount ? 'disabled-button' : 'hover'\n                }`}\n                style={{\n                  padding: loading || isMaxUndernameCount ? '0px' : '9px',\n                  gap: '8px',\n                  fontSize: '14px',\n                  color: 'var(--accent)',\n                  fontFamily: 'Rubik',\n                }}\n                onClick={() =>\n                  navigate(`/manage/names/${name}/upgrade-undernames`)\n                }\n              >\n                Increase Undernames\n              </button>\n            </Tooltip>\n            <Tooltip\n              trigger={['hover']}\n              title={\n                isMaxLeaseDuration\n                  ? 'Max lease duration reached'\n                  : 'Extend lease'\n              }\n              color=\"#222224\"\n              placement=\"top\"\n              rootClassName=\"notification-tooltip\"\n            >\n              <button\n                disabled={loading || isMaxLeaseDuration}\n                className={`button-primary ${\n                  loading || isMaxLeaseDuration ? 'disabled-button' : 'hover'\n                }`}\n                style={{\n                  padding: loading || isMaxLeaseDuration ? '0px' : '9px',\n                  gap: '8px',\n                  fontSize: '14px',\n                  color: 'var(--text-black)',\n                  fontFamily: 'Rubik',\n                }}\n                onClick={() => navigate(`/manage/names/${name}/extend`)}\n              >\n                Extend Lease\n              </button>\n            </Tooltip>\n          </div>\n        </div>\n        <div className=\"flex-row center\">\n          {loading || !antState ? (\n            <div className=\"flex\" style={{ padding: '10%' }}>\n              <Loader size={80} />\n            </div>\n          ) : (\n            <Table\n              showHeader={false}\n              style={{ width: '100%' }}\n              onRow={(row: ManageDomainRow) => ({\n                className: row.attribute === editingField ? 'active-row' : '',\n              })}\n              scroll={{ x: true }}\n              pagination={false}\n              prefixCls=\"manage-ant-table\"\n              columns={[\n                {\n                  title: '',\n                  dataIndex: 'attribute',\n                  key: 'attribute',\n                  align: 'left',\n                  width: isMobile ? '0px' : '20%',\n                  className: 'grey whitespace-no-wrap',\n                  render: (value: string) =>\n                    `${mapKeyToAttribute(value as AntDetailKey)}:`,\n                },\n                {\n                  title: '',\n                  dataIndex: 'value',\n                  key: 'value',\n                  align: 'left',\n                  width: '70%',\n                  className: 'white',\n                  render: (value: string | number, row: any) => {\n                    const isEditMode = row.attribute === editingField;\n                    if (\n                      row.attribute === 'expiryDate' &&\n                      typeof value === 'number'\n                    ) {\n                      return (\n                        <span\n                          style={{\n                            color:\n                              value * 1000 > Date.now()\n                                ? 'var(--success-green)'\n                                : value * 1000 +\n                                    SECONDS_IN_GRACE_PERIOD * 1000 <\n                                  Date.now()\n                                ? 'var(--accent)'\n                                : 'var(--error-red)',\n                          }}\n                        >\n                          {formatDate(value * 1000)}\n                        </span>\n                      );\n                    }\n                    if (row.attribute === 'status' && pendingInteractions)\n                      return (\n                        <Tooltip\n                          placement=\"right\"\n                          title={pendingInteractions.map(\n                            (interaction, index) => (\n                              <Link\n                                key={'interaction-' + index}\n                                className=\"link white text underline\"\n                                to={`https://viewblock.io/arweave/tx/${interaction.contractTxId}`}\n                                target=\"_blank\"\n                              >\n                                There is a pending transaction modifying this\n                                field.\n                                <ExternalLinkIcon\n                                  height={12}\n                                  width={12}\n                                  fill={'var(--text-white)'}\n                                />\n                              </Link>\n                            ),\n                          )}\n                          showArrow={true}\n                          overlayStyle={{\n                            maxWidth: 'fit-content',\n                          }}\n                        >\n                          {!pendingInteractions.length ? (\n                            <TransactionStatus confirmations={+value} />\n                          ) : (\n                            <CirclePending\n                              height={20}\n                              width={20}\n                              fill={'var(--accent)'}\n                            />\n                          )}\n                        </Tooltip>\n                      );\n                    if (row.attribute === 'undernames') {\n                      return (\n                        <span\n                          className=\"flex center\"\n                          style={{\n                            justifyContent: 'flex-start',\n                            gap: '10px',\n                          }}\n                        >\n                          {value}\n                          <NewspaperIcon\n                            width={'20px'}\n                            height={'20px'}\n                            fill=\"var(--text-grey)\"\n                          />\n                        </span>\n                      );\n                    }\n                    if (row.editable) {\n                      return (\n                        <>\n                          {/* TODO: add label for mobile view */}\n\n                          <ValidationInput\n                            customPattern={\n                              row.attribute === 'targetID'\n                                ? ARNS_TX_ID_ENTRY_REGEX\n                                : row.attribute === 'ttlSeconds'\n                                ? TTL_SECONDS_ENTRY_REGEX\n                                : undefined\n                            }\n                            catchInvalidInput={true}\n                            showValidationIcon={\n                              row.attribute == editingField && !!modifiedValue\n                            }\n                            onPressEnter={() => handleSave(row)}\n                            showValidationOutline={false}\n                            inputId={row.attribute + '-input'}\n                            minNumber={MIN_TTL_SECONDS}\n                            maxNumber={MAX_TTL_SECONDS}\n                            onClick={() => {\n                              if (editingField === row.attribute) {\n                                return;\n                              }\n                              setEditingField(row.attribute);\n                              setModifiedValue(value);\n                            }}\n                            inputClassName={'flex'}\n                            wrapperCustomStyle={{\n                              position: 'relative',\n                              boxSizing: 'border-box',\n                            }}\n                            inputCustomStyle={{\n                              width: '100%',\n                              overflow: 'hidden',\n                              fontSize: '13px',\n                              outline: 'none',\n                              color: 'white',\n                              alignContent: 'center',\n                              borderBottom: 'none',\n                              boxSizing: 'border-box',\n                              ...(isEditMode\n                                ? {\n                                    background: 'var(--card-bg)',\n                                    borderRadius: 'var(--corner-radius)',\n                                    border: '1px solid var(--text-faded)',\n                                    padding: '15px',\n                                  }\n                                : {\n                                    border: 'none',\n                                    background: 'transparent',\n                                  }),\n                            }}\n                            disabled={editingField !== row.attribute}\n                            placeholder={`Enter a ${mapKeyToAttribute(\n                              row.attribute,\n                            )}`}\n                            value={\n                              editingField === row.attribute\n                                ? modifiedValue\n                                : row.value\n                            }\n                            setValue={(e) => {\n                              if (row.attribute === editingField) {\n                                setModifiedValue(e ?? '');\n                              }\n                            }}\n                            validityCallback={(valid: boolean) => {\n                              row.isValid = valid;\n                            }}\n                            validationPredicates={getValidationPredicates(\n                              modifiedValue,\n                              row,\n                            )}\n                            maxCharLength={(str) => {\n                              if (\n                                row.attribute === 'name' ||\n                                row.attribute === 'ticker'\n                              ) {\n                                return str.length <= SMARTWEAVE_MAX_INPUT_SIZE;\n                              }\n                              if (row.attribute === 'ttlSeconds') {\n                                return str.length <= 7;\n                              }\n                              if (row.attribute === 'targetID') {\n                                return str.length <= 43;\n                              }\n                              return false;\n                            }}\n                          />\n                        </>\n                      );\n                    }\n                    return value;\n                  },\n                },\n                {\n                  title: '',\n                  dataIndex: 'action',\n                  key: 'action',\n                  width: '10%',\n                  align: 'right',\n                  className: 'white',\n                  render: (value: any, row: any) => {\n                    //TODO: if it's got an action attached, show it\n                    if (\n                      row.editable &&\n                      antState.getOwnershipStatus(walletAddress)\n                    ) {\n                      return (\n                        <>\n                          {editingField !== row.attribute ? (\n                            <button\n                              className=\"button pointer hover\"\n                              onClick={() => {\n                                setEditingField(row.attribute);\n                                setModifiedValue(row.value);\n                              }}\n                              style={{ boxSizing: 'border-box' }}\n                            >\n                              <PencilIcon\n                                style={{\n                                  width: '16px',\n                                  height: '16px',\n                                  fill: 'var(--text-grey)',\n                                  boxSizing: 'border-box',\n                                }}\n                              />\n                            </button>\n                          ) : (\n                            <span\n                              className=\"flex flex-row\"\n                              style={{\n                                boxSizing: 'border-box',\n                                gap: '10px',\n                              }}\n                            >\n                              <button\n                                className=\"button bold grey pointer hover\"\n                                style={{\n                                  padding: '6px',\n                                  fontSize: '13px',\n                                  boxSizing: 'border-box',\n                                }}\n                                onClick={() => setEditingField('')}\n                              >\n                                Cancel\n                              </button>\n                              <button\n                                className=\"button-primary hover\"\n                                style={{\n                                  padding: '9px 12px',\n                                  fontSize: '13px',\n                                  boxSizing: 'border-box',\n                                }}\n                                onClick={() => handleSave(row)}\n                              >\n                                Save\n                              </button>\n                            </span>\n                          )}\n                        </>\n                      );\n                    }\n                    if (\n                      row.attribute === 'owner' &&\n                      antState.getOwnershipStatus(walletAddress) === 'owner'\n                    ) {\n                      return (\n                        <span className={'flex flex-right'}>\n                          <button\n                            onClick={() => setShowTransferANTModal(true)}\n                            className=\"button-secondary\"\n                            style={{\n                              padding: '9px 12px',\n                              fontSize: '13px',\n                              boxSizing: 'border-box',\n                              letterSpacing: '0.5px',\n                              fontWeight: 500,\n                            }}\n                          >\n                            Transfer\n                          </button>\n                        </span>\n                      );\n                    }\n                    if (\n                      row.attribute === 'controllers' &&\n                      antState.getOwnershipStatus(walletAddress) === 'owner'\n                    ) {\n                      return (\n                        // TODO: add condition to \"open\" to be false when modals are open\n                        <Tooltip\n                          open={undefined}\n                          placement=\"bottomRight\"\n                          color=\"var(--card-bg)\"\n                          autoAdjustOverflow\n                          arrow={false}\n                          overlayInnerStyle={{\n                            width: 'fit-content',\n                            border: '1px solid var(--text-faded)',\n                            padding: '9px 12px',\n                          }}\n                          overlayStyle={{ width: 'fit-content' }}\n                          trigger={'click'}\n                          title={\n                            <div\n                              className=\"flex-column flex\"\n                              style={{ gap: '10px' }}\n                            >\n                              <button\n                                className=\"flex flex-right white pointer button\"\n                                onClick={() => setShowAddControllerModal(true)}\n                              >\n                                Add Controller\n                              </button>\n                              <button\n                                className=\"flex flex-right white pointer button\"\n                                onClick={() =>\n                                  setShowRemoveControllerModal(true)\n                                }\n                              >\n                                Remove Controller\n                              </button>\n                            </div>\n                          }\n                        >\n                          <VerticalDotMenuIcon\n                            width={'18px'}\n                            height={'18px'}\n                            fill=\"var(--text-grey)\"\n                            className=\"pointer\"\n                          />\n                        </Tooltip>\n                      );\n                    }\n                    if (row.attribute === 'undernames') {\n                      return (\n                        <Tooltip\n                          placement=\"bottomRight\"\n                          color=\"var(--card-bg)\"\n                          autoAdjustOverflow\n                          arrow={false}\n                          overlayInnerStyle={{\n                            width: 'fit-content',\n                            border: '1px solid var(--text-faded)',\n                            padding: '9px 12px',\n                          }}\n                          overlayStyle={{ width: 'fit-content' }}\n                          trigger={'click'}\n                          title={\n                            <div\n                              className=\"flex-column flex\"\n                              style={{ gap: '10px' }}\n                            >\n                              <button\n                                className=\"flex flex-right white pointer button\"\n                                onClick={() =>\n                                  navigate(`/manage/names/${name}/undernames`)\n                                }\n                              >\n                                Manage\n                              </button>\n                              {antState?.getOwnershipStatus(walletAddress) &&\n                              contractTxId ? (\n                                <button\n                                  className=\"flex flex-right white pointer button\"\n                                  onClick={() => {\n                                    const params = new URLSearchParams({\n                                      modal: UNDERNAME_TABLE_ACTIONS.CREATE,\n                                    });\n                                    navigate(\n                                      encodeURI(\n                                        `/manage/names/${name}/undernames?${params.toString()}`,\n                                      ),\n                                    );\n                                  }}\n                                >\n                                  Add Undername\n                                </button>\n                              ) : (\n                                <></>\n                              )}\n                            </div>\n                          }\n                        >\n                          <VerticalDotMenuIcon\n                            width={'18px'}\n                            height={'18px'}\n                            fill=\"var(--text-grey)\"\n                            className=\"pointer\"\n                          />\n                        </Tooltip>\n                      );\n                    }\n                    return value;\n                  },\n                },\n              ]}\n              dataSource={rows}\n            />\n          )}\n        </div>\n      </div>\n      {showTransferANTModal && contractTxId ? (\n        <TransferANTModal\n          closeModal={() => setShowTransferANTModal(false)}\n          antId={contractTxId}\n          payloadCallback={(payload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.TRANSFER);\n            setShowConfirmModal(true);\n            setShowTransferANTModal(false);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n      {showAddControllerModal && contractTxId ? (\n        <AddControllerModal\n          closeModal={() => setShowAddControllerModal(false)}\n          antId={contractTxId}\n          payloadCallback={(payload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.SET_CONTROLLER);\n            setShowConfirmModal(true);\n            setShowAddControllerModal(false);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n      {showRemoveControllerModal && contractTxId ? (\n        <RemoveControllersModal\n          closeModal={() => setShowRemoveControllerModal(false)}\n          antId={contractTxId}\n          payloadCallback={(payload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.REMOVE_CONTROLLER);\n            setShowConfirmModal(true);\n            setShowRemoveControllerModal(false);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n      {showConfirmModal && interactionType && contractTxId ? (\n        <ConfirmTransactionModal\n          interactionType={interactionType}\n          payload={transactionData}\n          close={() => {\n            setShowConfirmModal(false);\n            setTransactionData(undefined);\n            setEditingField(undefined);\n            setModifiedValue(undefined);\n          }}\n          cancel={() => {\n            if (interactionType === ANT_INTERACTION_TYPES.TRANSFER) {\n              setShowTransferANTModal(true);\n              setShowConfirmModal(false);\n              return;\n            }\n            if (interactionType === ANT_INTERACTION_TYPES.SET_CONTROLLER) {\n              setShowAddControllerModal(true);\n              setShowConfirmModal(false);\n              return;\n            }\n            if (interactionType === ANT_INTERACTION_TYPES.REMOVE_CONTROLLER) {\n              setShowRemoveControllerModal(true);\n              setShowConfirmModal(false);\n              return;\n            }\n            setShowConfirmModal(false);\n            setTransactionData(undefined);\n            setEditingField(undefined);\n            setModifiedValue(undefined);\n          }}\n          cancelText={\n            interactionType === ANT_INTERACTION_TYPES.TRANSFER ||\n            interactionType === ANT_INTERACTION_TYPES.SET_CONTROLLER ||\n            interactionType === ANT_INTERACTION_TYPES.REMOVE_CONTROLLER\n              ? 'Back'\n              : 'Cancel'\n          }\n          setDeployedTransactionId={(id) => setDeployedTransactionId(id)}\n          assetId={contractTxId}\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n\nexport default ManageDomain;\n"],"names":["EDITABLE_FIELDS","ManageDomain","name","useParams","isMobile","useIsMobile","navigate","useNavigate","location","useLocation","arweaveDataProvider","useGlobalState","walletAddress","useWalletState","rows","setRows","reactExports","isMaxLeaseDuration","setIsMaxLeaseDuration","isMaxUndernameCount","setIsMaxUndernameCount","undernameCount","setUndernameCount","loading","setLoading","showTransferANTModal","setShowTransferANTModal","showAddControllerModal","setShowAddControllerModal","showRemoveControllerModal","setShowRemoveControllerModal","editingField","setEditingField","showConfirmModal","setShowConfirmModal","interactionType","setInteractionType","transactionData","setTransactionData","deployedTransactionId","setDeployedTransactionId","pendingInteractions","setPendingInteractions","modifiedValue","setModifiedValue","antState","setANTState","contractTxId","setContractTxId","fetchDomainDetails","domainName","recordEntry","lowerCaseDomain","txId","contractTxId2","ArweaveTransactionID","contract","confirmations","pendingContractInteractions","associatedRecords","status","names","key","record","duration","getLeaseDurationFromEndTimestamp","getLeaseDurationString","duration2","y","MAX_LEASE_DURATION","MAX_UNDERNAME_COUNT","consolidatedDetails","isArweaveTransactionID","_a","DEFAULT_TTL_SECONDS","getUndernameCount","DEFAULT_MAX_UNDERNAMES","pendingTxs","getPendingInteractionsRowsForContract","rows2","details","attribute","index","existingValue","pendingInteraction","i","value","detail","getInteractionTypeFromField","error","eventEmitter","getValidationPredicates","row","VALIDATION_INPUT_TYPES","validateTTLSeconds","name2","validateMaxASCIILength","SMARTWEAVE_MAX_INPUT_SIZE","id","handleSave","payload","INTERACTION_TYPES","mapTransactionDataKeyToPayload","MIN_TTL_SECONDS","_c","_b","STUB_ARWEAVE_TXID","transactionData2","jsxRuntimeExports","TransactionSuccessCard","CONFIRM_TRANSACTION_PROPS_MAP","SvgHamburgerOutline","Tooltip","Loader","Table","mapKeyToAttribute","isEditMode","SECONDS_IN_GRACE_PERIOD","formatDate","interaction","Link","SvgExternalLink","SvgCirclePending","TransactionStatus","SvgNewspaper","ValidationInput","ARNS_TX_ID_ENTRY_REGEX","TTL_SECONDS_ENTRY_REGEX","MAX_TTL_SECONDS","e","valid","str","SvgPencil","SvgDotsThreeOutlineVertical","params","UNDERNAME_TABLE_ACTIONS","TransferANTModal","ANT_INTERACTION_TYPES","AddControllerModal","RemoveControllersModal","ConfirmTransactionModal"],"mappings":"04BAmEA,MAAAA,GAAA,CAAA,OAAA,SAAA,WAAA,YAAA,EAEA,SAAAC,IAAA,CACA,KAAA,CAAA,KAAAC,CAAA,EAAAC,GAAA,EACAC,EAAAC,GAAA,EACAC,EAAAC,GAAA,EACAC,EAAAC,GAAA,EACA,CAAA,CAAA,oBAAAC,CAAA,CAAA,EAAAC,GAAA,EACA,CAAA,CAAA,cAAAC,CAAA,CAAA,EAAAC,GAAA,EACA,CAAAC,GAAAC,EAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EACA,CAAAC,EAAAC,EAAA,EAAAF,EAAA,SAAA,EAAA,EACA,CAAAG,EAAAC,EAAA,EAAAJ,EAAA,SAAA,EAAA,EAEA,CAAAK,GAAAC,EAAA,EAAAN,EAAA,SAAA,EACA,CAAAO,EAAAC,CAAA,EAAAR,EAAA,SAAA,EAAA,EACA,CAAAS,GAAAC,CAAA,EAAAV,EAAA,SAAA,EAAA,EAEA,CAAAW,GAAAC,CAAA,EAAAZ,EAAA,SAAA,EAAA,EAEA,CAAAa,GAAAC,CAAA,EAAAd,EAAA,SAAA,EAAA,EAEA,CAAAe,EAAAC,CAAA,EAAAhB,EAAA,SAAA,EACA,CAAAiB,GAAAC,CAAA,EAAAlB,EAAA,SAAA,EAAA,EACA,CAAAmB,EAAAC,CAAA,EAAApB,EAAA,SAAA,EAEA,CAAAqB,GAAAC,CAAA,EAAAtB,EAAA,SAAA,EACA,CAAAuB,EAAAC,CAAA,EAAAxB,EAAA,SAAA,EAEA,CAAAyB,EAAAC,EAAA,EAAA1B,EAAA,SAAA,CAAA,CAAA,EAGA,CAAA2B,EAAAC,CAAA,EAAA5B,EAAA,SAAA,EACA,CAAA6B,EAAAC,EAAA,EAAA9B,EAAA,SAAA,EACA,CAAA+B,EAAAC,EAAA,EAAAhC,EAAA,SAAA,EAEAA,EAAA,UAAA,IAAA,CACA,GAAA,CAAAd,GAAA,CAAAU,EAAA,CACAN,EAAA,eAAA,EACA,MAAA,CAGA2C,GAAA/C,CAAA,CAAA,EAAA,CAAAA,EAAAqC,CAAA,CAAA,EAIA,eAAAU,GAAAC,EAAA,OACA,GAAA,CACA1B,EAAA,EAAA,EAEA,MAAA2B,EAAA,MAAAzC,EAAA,UAAA,CAAA,OAAA0C,EAAAF,CAAA,CACA,CAAA,EAEAG,EAAAF,GAAA,YAAAA,EAAA,aACA,GAAA,CAAAE,EACA,MAAA,MAAA,6BAAA,EAEA,MAAAC,EAAA,IAAAC,GAAAF,CAAA,EAEA,CAAAG,EACAC,GACAC,EACAC,EACA,EAAA,MAAA,QAAA,IAAA,CACAjD,EAAA,iBAAA4C,CAAA,EACA5C,EAAA,qBAAA4C,CAAA,EAAA,KAAAM,GAAAA,EAAAN,EAAA,SAAA,CAAA,EAAA,aAAA,EAGA5C,EAAA,+BAAA4C,CAAA,EACA5C,EAAA,WAAA,CACA,QAAA,CACA,aAAA,CAAA4C,CAAA,CACA,CACA,CAAA,CACA,CAAA,EAKA,GAAA,CAAAE,EAAA,QAAA,EACA,MAAA,MAAA,sBAAA,EAGA,MAAAK,EAAA,OAAA,KAAAF,EAAA,EAAA,OAAAG,GAAAA,IAAA5D,CACA,EAGA6D,EAAA7D,EAAA,MAAAQ,EAAA,UAAA,CAEA,OAAA0C,EAAAlD,CAAA,CACA,CAAA,EAAA,MAAA,IAAA,EAAA,EAAA,OAIA,GAAA,CAAA6D,EACA,MAAA,MAAA,6BAAA,EAGA,MAAAC,EAAAD,GAAA,MAAAA,EAAA,aAAAE,EACAF,EAAA,eAAA,IACAA,EAAA,aAAA,GACA,EAAA,aAIAG,GAAA,IAAA,CACA,GAAAH,GAAA,MAAAA,EAAA,aAAA,CACA,MAAAI,EAAA,KAAA,IAAA,EACAF,EACAF,EAAA,eAAA,IACAA,EAAA,aAAA,GACA,CACA,EAEAK,EAAAD,EAAA,EAAA,QAAA,OACA,MAAA,GAAAA,CAAA,IAAAC,CAAA,EAAA,CAEA,MAAA,YAAA,EAGAlD,GAAA8C,GAAA,OAAAA,GAAA,UAAAA,GAAAK,IAAAL,IAAA,YAIA,EAGA1C,GAAAyC,EAAA,UAAA,EACA3C,GAAA,CAAA,CAAAC,IAAA0C,EAAA,YAAAO,EACA,EAGA,MAAAC,EAAA,CAAA,WAAAR,GAAA,MAAAA,EAAA,aACA,CAAAA,EAAA,aAEA,aACA,cAAA,GAAAG,GAAA,CAAA,GACA,gBAAAL,EAAA,OAAAA,EAAA,KAAA,IAAA,EAAA,MACA,OAAAJ,GACA,KAAAD,EAAA,MAAA,MACA,aAAAF,EAAA,SAAA,EACA,SAAAE,EAAA,UAAA,GAAA,GAAAgB,GAAAhB,EAAA,UAAA,GAAA,EAAA,aAAA,EAAAA,EAAA,UAAA,GAAA,EAAA,cAAA,MAKA,OAAAA,EAAA,QAAA,MACA,YAAAA,EAAA,YAAA,KAAA,IAAA,GAAA,MACA,MAAAA,EAAA,OAAA,MACA,aAAAiB,EAAAjB,EAAA,UAAA,GAAA,IAAA,YAAAiB,EAAA,aAAAC,GACA,WAAA,GAAAC,GAAAnB,EAAA,OAAA,CAAA,MAAAO,GAAA,YAAAA,EAAA,aAAAa,IAAA,eAAA,CAAA,EAKA,EAIAC,GAAAC,GAAApB,EACAa,CACA,EAGAQ,GAAA,OAAA,KAAAR,CAAA,EAAA,OAAA,CAAAS,EAAAC,EAAAC,KAAA,CAEA,MAAAC,GAAAZ,EAAAU,CAAA,EAEAG,EAAAP,GAAA,KAAAQ,IAAAA,GAAA,YAAAJ,CACA,EAEAK,GAAAF,EAAAA,EAAA,MAAAD,GAGAI,GAAA,CAAA,UAAAN,EACA,MAAAK,GACA,IAAAJ,GACA,gBAAAM,GAAAP,CAAA,EACA,mBAAAG,EACA,SAAApF,GAAA,SAAAiF,CAAA,CACA,EAEA,OAAAD,EAAA,KAAAO,EAAA,EACAP,CAAA,EACA,CAAA,CACA,EAGAjE,GAAAgE,EAAA,EACAjC,GAAAU,CAAA,EACAR,GAAAM,CAAA,EACAZ,GAAAgB,CAAA,EACAlC,EAAA,EAAA,CAAA,OAAAiE,EAAA,CAEAC,GAAA,KAAA,QAAAD,CAAA,EACAnF,EAAA,gBAAA,CAAA,MAAAE,EAAA,QAAA,CAAA,CAAA,CACA,CAGA,SAAAmF,GAAAL,EAAAM,EAAA,CAIA,OAAAA,EAAA,UAAA,CAAA,IAAA,aAEA,MAAA,CAAA,CAAAC,EAAA,SAAA,EAAA,CACA,GAAAC,EACA,CACA,EACA,IAAA,OAEA,IAAA,SAEA,MAAA,CAAA,CAAAD,EAAA,cAAA,EAAA,CACA,GAAAE,GAAAC,GAAAD,EAAAE,CAAA,CAEA,CACA,EACA,IAAA,WACA,IAAA,aAEA,MAAA,CAAA,CAAAJ,EAAA,UAAA,EAAA,CACA,GAAAK,GAAAxF,EAAA,kBAAAwF,CAAA,CACA,CACA,EAEA,QAEA,MAAA,CAAA,CAAA,CACA,CAGA,SAAAC,EAAAP,EAAA,WAEA,GAAA,CAAAA,EAAA,SAAA,CAAAA,EAAA,iBAAA,CAAA/C,EACA,OAEA,MAAAuD,EAAAR,EAAA,kBAAAS,EAAA,cAAAC,EAAAV,EAAA,gBAAA,CAEA,IACAjD,EAAA,SAAA,IACA8B,EAAA5B,EAAA,UAAA,GAAA,IAAA,YAAA4B,EAAA,aAAA8B,CACA,CAAA,EAAAX,EAAA,kBAAAS,EAAA,gBAAAC,EAAAV,EAAA,gBAAA,CAGA,KACAY,GAAAC,EAAA5D,EAAA,UAAA,GAAA,IAAA,YAAA4D,EAAA,gBAAA,MAAAD,EAAA,OAAA3D,EAAA,UAAA,GAAA,EAAA,cAAA6D,GAGA,CAAA/D,CACA,CAAA,EAAA2D,EAEAV,EAAA,gBACAjD,EAAA,SAAA,CACA,EAGA,GAAAyD,GAAAR,EAAA,iBAAA7C,EAAA,CACA,MAAA4D,EAAA,CAAA,GAAAP,EACA,QAAArD,CACA,EAEAX,EAAAwD,EAAA,eACA,EAEAtD,EAAAqE,CAAA,EACAzE,EAAA,EAAA,CAAA,CACA,CAGA,OAAA0E,EAAA,KAAAA,EAAA,SAAA,CAAA,SAAA,CAEAA,EAAA,KAAA,MAAA,CAAA,UAAA,OAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CACArE,GAAAJ,EAAAyE,EAAA,IACAC,GAAA,CAAA,KAAAtE,EACA,MAAAuE,GAAA3E,CAAA,EAAA,cACA,MAAA,IAAA,CAEAK,EAAA,MAAA,EACAJ,EAAA,MAAA,CAAA,CACA,CAAA,EAAAwE,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,EAGAA,EAAA,KAEA,MAAA,CAAA,UAAA,gBACA,MAAA,CAAA,eAAA,gBAAA,MAAA,MAAA,EACA,SAAA,CAEAA,EAAA,KAAA,KAAA,CAAA,UAAA,oBAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CACAA,EAAA,IAAAG,GAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,mBACA,CAAA,EACA7G,CACA,CAAA,CAAA,EACA0G,EAAA,KACA,MAAA,CAAA,UAAA,gBACA,MAAA,CAAA,IAAA,OAAA,MAAA,aAAA,EACA,SAAA,CAEAA,EAAA,IAAAI,EAAA,CAAA,QAAA,CAAA,OAAA,EACA,MAAA7F,EAAA,gCAAA,6BAIA,MAAA,UAEA,UAAA,MACA,cAAA,uBACA,SAAAyF,EAAA,IAEA,SAAA,CAAA,SAAArF,GAAAJ,EACA,UAAA,oBAAAI,GAAAJ,EAAA,kBAAA,OAAA,GAGA,MAAA,CACA,QAAAI,GAAAJ,EAAA,MAAA,MACA,IAAA,MACA,SAAA,OACA,MAAA,gBACA,WAAA,OACA,EACA,QAAA,IAAAb,EAAA,iBAAAJ,CAAA,qBAAA,EAEA,SAAA,qBAEA,CAAA,CAEA,CAAA,EACA0G,EAAA,IACAI,EAAA,CAAA,QAAA,CAAA,OAAA,EACA,MAAA/F,EAAA,6BAAA,eAIA,MAAA,UAEA,UAAA,MACA,cAAA,uBACA,SAAA2F,EAAA,IAEA,SAAA,CAAA,SAAArF,GAAAN,EACA,UAAA,kBAAAM,GAAAN,EAAA,kBAAA,OAAA,GAGA,MAAA,CACA,QAAAM,GAAAN,EAAA,MAAA,MACA,IAAA,MACA,SAAA,OACA,MAAA,oBACA,WAAA,OACA,EACA,QAAA,IAAAX,EAAA,iBAAAJ,CAAA,SAAA,EACA,SAAA,cACA,CAAA,CAEA,CAAA,CACA,CAAA,CAAA,CACA,CAAA,CAAA,EACA0G,EAAA,IAAA,MAAA,CAAA,UAAA,kBAAA,SAAArF,GAAA,CAAAsB,EAAA+D,EAAA,IAAA,MAAA,CAAA,UAAA,OAAA,MAAA,CAAA,QAAA,KAAA,EAAA,SAAAA,EAAA,IAAAK,GAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,EAAAL,EAAA,IAOAM,GAAA,CAAA,WAAA,GACA,MAAA,CAAA,MAAA,MAAA,EACA,MAAAtB,IAAA,CACA,UAAAA,EAAA,YAAA7D,EAAA,aAAA,EACA,GACA,OAAA,CAAA,EAAA,EAAA,EACA,WAAA,GACA,UAAA,mBACA,QAAA,CACA,CACA,MAAA,GACA,UAAA,YACA,IAAA,YACA,MAAA,OACA,MAAA3B,EAAA,MAAA,MACA,UAAA,0BACA,OAAAkF,GAAA,GAAA6B,EAAA7B,CAAA,CAAA,GAEA,EACA,CACA,MAAA,GACA,UAAA,QACA,IAAA,QACA,MAAA,OACA,MAAA,MACA,UAAA,QACA,OAAA,CAAAA,EAAAM,IAAA,CAEA,MAAAwB,EAAAxB,EAAA,YAAA7D,EACA,OAAA6D,EAAA,YAAA,cAAA,OAAAN,GAAA,SAIAsB,EAAA,IACA,OAAA,CAAA,MAAA,CACA,MAAAtB,EAAA,IAAA,KAAA,IAAA,EAAA,uBAAAA,EAAA,IAAA+B,GAAA,IAAA,KAAA,IAAA,EAAA,gBAAA,kBAQA,EACA,SAAAC,GAAAhC,EAAA,GAAA,CAEA,CAAA,EAIAM,EAAA,YAAA,UAAAnD,EACAmE,EAAA,IACAI,EAAA,CAAA,UAAA,QACA,MAAAvE,EAAA,IACA,CAAA8E,EAAArC,IAAA0B,EAAA,KAEAY,GAAA,CAAA,UAAA,4BAEA,GAAA,mCAAAD,EAAA,YAAA,GACA,OAAA,SACA,SAAA,CACA,uDAAAX,EAAA,IAGAa,GAAA,CAAA,OAAA,GACA,MAAA,GACA,KAAA,mBACA,CAAA,CACA,CAAA,EAAA,eAAAvC,CAXA,CAYA,EAEA,UAAA,GACA,aAAA,CACA,SAAA,aACA,EACA,SAAAzC,EAAA,OAAAmE,EAAA,IAKAc,GAAA,CAAA,OAAA,GACA,MAAA,GACA,KAAA,eACA,CAAA,EARAd,EAAA,IAAAe,GAAA,CAAA,cAAA,CAAArC,CAAA,CAAA,CASA,CAAA,EAIAM,EAAA,YAAA,aACAgB,EAAA,KACA,OAAA,CAAA,UAAA,cACA,MAAA,CACA,eAAA,aACA,IAAA,MACA,EACA,SAAA,CAEAtB,EAAAsB,EAAA,IACAgB,GAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,kBACA,CAAA,CACA,CAAA,CAAA,EAIAhC,EAAA,SACAgB,EAAA,IAAAA,EAAA,SAAA,CAAA,SAAAA,EAAA,IAIAiB,GAAA,CAAA,cAAAjC,EAAA,YAAA,WAAAkC,GAAAlC,EAAA,YAAA,aAAAmC,GAAA,OAMA,kBAAA,GAEA,mBAAAnC,EAAA,WAAA7D,GAAA,CAAA,CAAAY,EAEA,aAAA,IAAAwD,EAAAP,CAAA,EAEA,sBAAA,GACA,QAAAA,EAAA,UAAA,SACA,UAAAW,EACA,UAAAyB,GACA,QAAA,IAAA,CAEAjG,IAAA6D,EAAA,YAGA5D,EAAA4D,EAAA,SAAA,EACAhD,EAAA0C,CAAA,EAAA,EACA,eAAA,OACA,mBAAA,CACA,SAAA,WACA,UAAA,YACA,EACA,iBAAA,CACA,MAAA,OACA,SAAA,SACA,SAAA,OACA,QAAA,OACA,MAAA,QACA,aAAA,SACA,aAAA,OACA,UAAA,aACA,GAAA8B,EAAA,CAEA,WAAA,iBACA,aAAA,uBACA,OAAA,8BACA,QAAA,MACA,EAAA,CAEA,OAAA,OACA,WAAA,aACA,CACA,EACA,SAAArF,IAAA6D,EAAA,UACA,YAAA,WAAAuB,EACAvB,EAAA,SACA,CAAA,GACA,MAAA7D,IAAA6D,EAAA,UAAAjD,EAAAiD,EAAA,MAIA,SAAAqC,GAAA,CAGArC,EAAA,YAAA7D,GACAa,EAAAqF,GAAA,EAAA,CACA,EACA,iBAAAC,GAAA,CAEAtC,EAAA,QAAAsC,CAAA,EACA,qBAAAvC,GACAhD,EACAiD,CACA,EACA,cAAAuC,GAEAvC,EAAA,YAAA,QAAAA,EAAA,YAAA,SAIAuC,EAAA,QAAAlC,EAEAL,EAAA,YAAA,aACAuC,EAAA,QAAA,EAEAvC,EAAA,YAAA,WACAuC,EAAA,QAAA,GAEA,EACA,CAAA,CAAA,CAAA,EAKA7C,CAAA,CACA,EACA,CACA,MAAA,GACA,UAAA,SACA,IAAA,SACA,MAAA,MACA,MAAA,QACA,UAAA,QACA,OAAA,CAAAA,EAAAM,IAGAA,EAAA,UAAA/C,EAAA,mBAAAjC,CAAA,EAIAgG,EAAA,IAAAA,EAAA,SAAA,CAAA,SAAA7E,IAAA6D,EAAA,UAAAgB,EAAA,IAGA,SAAA,CAAA,UAAA,uBACA,QAAA,IAAA,CAEA5E,EAAA4D,EAAA,SAAA,EACAhD,EAAAgD,EAAA,KAAA,CAAA,EACA,MAAA,CAAA,UAAA,YAAA,EACA,SAAAgB,EAAA,IAEAwB,GAAA,CAAA,MAAA,CACA,MAAA,OACA,OAAA,OACA,KAAA,mBACA,UAAA,YACA,CACA,CAAA,CACA,CAAA,EAAAxB,EAAA,KAGA,OAAA,CAAA,UAAA,gBACA,MAAA,CACA,UAAA,aACA,IAAA,MACA,EACA,SAAA,CAEAA,EAAA,IAAA,SAAA,CAAA,UAAA,iCACA,MAAA,CACA,QAAA,MACA,SAAA,OACA,UAAA,YACA,EACA,QAAA,IAAA5E,EAAA,EAAA,EACA,SAAA,QACA,CAAA,EAEA4E,EAAA,IACA,SAAA,CAAA,UAAA,uBACA,MAAA,CACA,QAAA,WACA,SAAA,OACA,UAAA,YACA,EACA,QAAA,IAAAT,EAAAP,CAAA,EACA,SAAA,MACA,CAAA,CAEA,CAAA,CAAA,CAAA,CAAA,EAMAA,EAAA,YAAA,SAAA/C,EAAA,mBAAAjC,CAAA,IAAA,QAIAgG,EAAA,IAAA,OAAA,CAAA,UAAA,kBAAA,SAAAA,EAAA,IAEA,SAAA,CAAA,QAAA,IAAAlF,EAAA,EAAA,EACA,UAAA,mBACA,MAAA,CACA,QAAA,WACA,SAAA,OACA,UAAA,aACA,cAAA,QACA,WAAA,GACA,EACA,SAAA,UACA,CAAA,CAAA,CAAA,EAMAkE,EAAA,YAAA,eAAA/C,EAAA,mBAAAjC,CAAA,IAAA,QAIAgG,EAAA,IAEAI,EAAA,CAAA,KAAA,OACA,UAAA,cACA,MAAA,iBACA,mBAAA,GACA,MAAA,GACA,kBAAA,CACA,MAAA,cACA,OAAA,8BACA,QAAA,UACA,EACA,aAAA,CAAA,MAAA,aAAA,EACA,QAAA,QACA,MAAAJ,EAAA,KAEA,MAAA,CAAA,UAAA,mBACA,MAAA,CAAA,IAAA,MAAA,EACA,SAAA,CAEAA,EAAA,IAAA,SAAA,CAAA,UAAA,uCACA,QAAA,IAAAhF,EAAA,EAAA,EACA,SAAA,gBACA,CAAA,EAEAgF,EAAA,IACA,SAAA,CAAA,UAAA,uCACA,QAAA,IAAA9E,EAAA,EAAA,EAEA,SAAA,mBAEA,CAAA,CAEA,CAAA,CAAA,EACA,SAAA8E,EAAA,IAGAyB,EAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,mBACA,UAAA,SACA,CAAA,CACA,CAAA,EAIAzC,EAAA,YAAA,aACAgB,EAAA,IACAI,EAAA,CAAA,UAAA,cACA,MAAA,iBACA,mBAAA,GACA,MAAA,GACA,kBAAA,CACA,MAAA,cACA,OAAA,8BACA,QAAA,UACA,EACA,aAAA,CAAA,MAAA,aAAA,EACA,QAAA,QACA,MAAAJ,EAAA,KAEA,MAAA,CAAA,UAAA,mBACA,MAAA,CAAA,IAAA,MAAA,EACA,SAAA,CAEAA,EAAA,IAAA,SAAA,CAAA,UAAA,uCACA,QAAA,IAAAtG,EAAA,iBAAAJ,CAAA,aAAA,EAEA,SAAA,QAEA,CAAA,EAEA2C,GAAA,MAAAA,EAAA,mBAAAjC,IAAAmC,EAAA6D,EAAA,IAGA,SAAA,CAAA,UAAA,uCACA,QAAA,IAAA,CAEA,MAAA0B,EAAA,IAAA,gBAAA,CAAA,MAAAC,GAAA,MACA,CAAA,EAEAjI,EAAA,UACA,iBAAAJ,CAAA,eAAAoI,EAAA,SAAA,CAAA,EACA,CACA,CACA,EACA,SAAA,eACA,CAAA,EAAA1B,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAIA,CAAA,CAAA,EAEA,SAAAA,EAAA,IAGAyB,EAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,mBACA,UAAA,SACA,CAAA,CACA,CAAA,EAIA/C,CACA,CACA,EACA,WAAAxE,EACA,CAAA,CAAA,CAAA,CAGA,CAAA,CAAA,EACAW,IAAAsB,EAAA6D,EAAA,IAEA4B,GAAA,CAAA,WAAA,IAAA9G,EAAA,EAAA,EACA,MAAAqB,EACA,gBAAAqD,GAAA,CAEA9D,EAAA8D,CAAA,EACAhE,EAAAqG,EAAA,QAAA,EACAvG,EAAA,EAAA,EACAR,EAAA,EAAA,CAAA,CACA,CAAA,EAAAkF,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,EAGAjF,IAAAoB,EAAA6D,EAAA,IAGA8B,GAAA,CAAA,WAAA,IAAA9G,EAAA,EAAA,EACA,MAAAmB,EACA,gBAAAqD,GAAA,CAEA9D,EAAA8D,CAAA,EACAhE,EAAAqG,EAAA,cAAA,EACAvG,EAAA,EAAA,EACAN,EAAA,EAAA,CAAA,CACA,CAAA,EAAAgF,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,EAGA/E,IAAAkB,EAAA6D,EAAA,IAGA+B,GAAA,CAAA,WAAA,IAAA7G,EAAA,EAAA,EACA,MAAAiB,EACA,gBAAAqD,GAAA,CAEA9D,EAAA8D,CAAA,EACAhE,EAAAqG,EAAA,iBAAA,EACAvG,EAAA,EAAA,EACAJ,EAAA,EAAA,CAAA,CACA,CAAA,EAAA8E,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,EAGA3E,IAAAE,GAAAY,EAAA6D,EAAA,IAGAgC,GAAA,CAAA,gBAAAzG,EACA,QAAAE,GACA,MAAA,IAAA,CAEAH,EAAA,EAAA,EACAI,EAAA,MAAA,EACAN,EAAA,MAAA,EACAY,EAAA,MAAA,CAAA,EACA,OAAA,IAAA,CAEA,GAAAT,IAAAsG,EAAA,SAAA,CACA/G,EAAA,EAAA,EACAQ,EAAA,EAAA,EACA,MAAA,CAEA,GAAAC,IAAAsG,EAAA,eAAA,CACA7G,EAAA,EAAA,EACAM,EAAA,EAAA,EACA,MAAA,CAEA,GAAAC,IAAAsG,EAAA,kBAAA,CACA3G,EAAA,EAAA,EACAI,EAAA,EAAA,EACA,MAAA,CAEAA,EAAA,EAAA,EACAI,EAAA,MAAA,EACAN,EAAA,MAAA,EACAY,EAAA,MAAA,CAAA,EACA,WAAAT,IAAAsG,EAAA,UAAAtG,IAAAsG,EAAA,gBAAAtG,IAAAsG,EAAA,kBAAA,OAAA,SAMA,yBAAAvC,GAAA1D,EAAA0D,CAAA,EAEA,QAAAnD,CACA,CAAA,EAAA6D,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,CAGA,CAAA,CAAA,CAIA"}
{"version":3,"file":"ManageDomain-05ab6ddd.js","sources":["../../src/components/pages/ManageDomain/ManageDomain.tsx"],"sourcesContent":["import TransactionSuccessCard from '@src/components/cards/TransactionSuccessCard/TransactionSuccessCard';\nimport DomainSettings from '@src/components/forms/DomainSettings/DomainSettings';\nimport { usePrimaryName } from '@src/hooks/usePrimaryName';\nimport { useGlobalState, useModalState } from '@src/state';\nimport { useTransactionState } from '@src/state/contexts/TransactionState';\nimport { Star } from 'lucide-react';\nimport { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { decodeDomainToASCII } from '../../../utils';\nimport { HamburgerOutlineIcon } from '../../icons';\nimport './styles.css';\n\nfunction ManageDomain() {\n  const { name } = useParams();\n  const navigate = useNavigate();\n  const [{ ioProcessId }] = useGlobalState();\n  const [{ workflowName, interactionResult }, dispatchTransactionState] =\n    useTransactionState();\n  const [, dispatchModalState] = useModalState();\n  const { data: primaryNameData } = usePrimaryName();\n\n  useEffect(() => {\n    // Reset transaction state on unmount - clears transaction success banner\n    return () => {\n      dispatchTransactionState({ type: 'reset' });\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!name) {\n      navigate('/manage/names');\n      return;\n    }\n  }, [name]);\n\n  return (\n    <>\n      <div\n        className=\"page\"\n        style={{ gap: '0px', paddingTop: '10px', paddingBottom: '10px' }}\n      >\n        {interactionResult ? (\n          <TransactionSuccessCard\n            txId={interactionResult.id}\n            title={`${workflowName} completed`}\n            close={() => {\n              dispatchTransactionState({\n                type: 'reset',\n              });\n            }}\n          />\n        ) : (\n          <></>\n        )}\n        <div\n          className=\"flex flex-row\"\n          style={{\n            justifyContent: 'space-between',\n            width: '100%',\n          }}\n        >\n          <h2 className=\"flex white center\" style={{ gap: '16px' }}>\n            <HamburgerOutlineIcon\n              width={'20px'}\n              height={'20px'}\n              fill=\"var(--text-white)\"\n            />\n            {decodeDomainToASCII(name!)}\n            <Star\n              className={\n                (name == primaryNameData?.name\n                  ? 'text-primary fill-primary'\n                  : 'text-grey') + ` w-[18px]`\n              }\n            />\n          </h2>\n          <button\n            className={\n              'flex text-primary bg-primary-thin max-w-fit rounded border border-primary px-3 py-1 gap-3 text-[16px] items-center'\n            }\n            onClick={() => {\n              if (!name) return;\n              if (primaryNameData?.name === name) {\n                // remove primary name payload\n                dispatchTransactionState({\n                  type: 'setTransactionData',\n                  payload: {\n                    names: [name],\n                    ioProcessId,\n                    assetId: '',\n                    functionName: 'removePrimaryNames',\n                  },\n                });\n              } else {\n                dispatchTransactionState({\n                  type: 'setTransactionData',\n                  payload: {\n                    name,\n                    ioProcessId,\n                    assetId: ioProcessId,\n                    functionName: 'primaryNameRequest',\n                  },\n                });\n              }\n\n              dispatchModalState({\n                type: 'setModalOpen',\n                payload: { showPrimaryNameModal: true },\n              });\n            }}\n          >\n            <Star className={`w-[16px]`} />{' '}\n            {name == primaryNameData?.name ? 'Remove Primary' : 'Make Primary'}\n          </button>\n        </div>\n        <DomainSettings domain={name} />\n      </div>\n    </>\n  );\n}\n\nexport default ManageDomain;\n"],"names":["ManageDomain","name","useParams","navigate","useNavigate","ioProcessId","useGlobalState","workflowName","interactionResult","dispatchTransactionState","useTransactionState","dispatchModalState","useModalState","primaryNameData","usePrimaryName","reactExports","jsxRuntimeExports","TransactionSuccessCard","SvgHamburgerOutline","decodeDomainToASCII","Star","DomainSettings"],"mappings":"+mBAaA,SAAAA,GAAA,CACA,KAAA,CAAA,KAAAC,CAAA,EAAAC,EAAA,EACAC,EAAAC,EAAA,EACA,CAAA,CAAA,YAAAC,CAAA,CAAA,EAAAC,EAAA,EACA,CAAA,CAAA,aAAAC,EAAA,kBAAAC,CAAA,EAAAC,CAAA,EAAAC,EAAA,EAEA,CAAA,CAAAC,CAAA,EAAAC,EAAA,EACA,CAAA,KAAAC,CAAA,EAAAC,EAAA,EAEA,OAAAC,EAAA,UAAA,IAEA,IAAA,CACAN,EAAA,CAAA,KAAA,OAAA,CAAA,CAAA,EACA,CAAA,CAAA,EAGAM,EAAA,UAAA,IAAA,CACA,GAAA,CAAAd,EAAA,CACAE,EAAA,eAAA,EACA,MAAA,CACA,EAAA,CAAAF,CAAA,CAAA,EAGAe,EAAA,IAAAA,EAAA,SAAA,CAAA,SAAAA,EAAA,KAEA,MAAA,CAAA,UAAA,OACA,MAAA,CAAA,IAAA,MAAA,WAAA,OAAA,cAAA,MAAA,EACA,SAAA,CAEAR,EAAAQ,EAAA,IACAC,EAAA,CAAA,KAAAT,EAAA,GACA,MAAA,GAAAD,CAAA,aACA,MAAA,IAAA,CAEAE,EAAA,CAAA,KAAA,OACA,CAAA,CACA,CACA,CAAA,EAAAO,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,EAGAA,EAAA,KAEA,MAAA,CAAA,UAAA,gBACA,MAAA,CACA,eAAA,gBACA,MAAA,MACA,EACA,SAAA,CAEAA,EAAA,KAAA,KAAA,CAAA,UAAA,oBAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CACAA,EAAA,IAAAE,EAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,mBACA,CAAA,EACAC,EAAAlB,CAAA,EACAe,EAAA,IACAI,EAAA,CAAA,WAAAnB,IAAAY,GAAA,YAAAA,EAAA,MAAA,4BAAA,aAAA,WAIA,CAAA,CAEA,CAAA,CAAA,EACAG,EAAA,KACA,SAAA,CAAA,UAAA,qHAEA,QAAA,IAAA,CAGAf,KACAY,GAAA,YAAAA,EAAA,QAAAZ,EAEAQ,EAAA,CAAA,KAAA,qBACA,QAAA,CACA,MAAA,CAAAR,CAAA,EACA,YAAAI,EACA,QAAA,GACA,aAAA,oBACA,CACA,CAAA,EAGAI,EAAA,CAAA,KAAA,qBACA,QAAA,CACA,KAAAR,EACA,YAAAI,EACA,QAAAA,EACA,aAAA,oBACA,CACA,CAAA,EAIAM,EAAA,CAAA,KAAA,eACA,QAAA,CAAA,qBAAA,EAAA,CACA,CAAA,EACA,EACA,SAAA,CAEAK,EAAA,IAAAI,EAAA,CAAA,UAAA,UAAA,CAAA,EAAA,IAAAnB,IAAAY,GAAA,YAAAA,EAAA,MAAA,iBAAA,cACA,CAAA,CAAA,CACA,CAAA,CAAA,EACAG,EAAA,IAAAK,EAAA,CAAA,OAAApB,CAAA,CAAA,CACA,CAAA,CAAA,CAAA,CAAA,CAIA"}
{"version":3,"file":"secp256k1-675fb0e2.js","sources":["../../node_modules/@noble/hashes/esm/_md.js","../../node_modules/@noble/hashes/esm/sha256.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/utils.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/modular.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/curve.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/weierstrass.js","../../node_modules/viem/node_modules/@noble/curves/esm/abstract/hash-to-curve.js","../../node_modules/@noble/hashes/esm/hmac.js","../../node_modules/viem/node_modules/@noble/curves/esm/_shortw_utils.js","../../node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js"],"sourcesContent":["import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","import { mod } from './modular.js';\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nexport function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map"],"names":["setBigUint64","view","byteOffset","value","isLE","_32n","_u32_max","wh","wl","h","l","Chi","a","b","c","Maj","HashMD","Hash","blockLen","outputLen","padOffset","createView","data","exists","buffer","toBytes","len","pos","take","dataView","out","output","i","oview","outLen","state","res","to","length","finished","destroyed","SHA256_K","SHA256_IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","W15","W2","s0","rotr","s1","sigma1","T1","T2","sha256","wrapConstructor","_0n$4","_1n$4","_2n$3","isBytes","abytes","item","hexes","_","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","asciis","asciiToBase16","char","hexToBytes","hl","al","array","ai","hi","n1","n2","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","n","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","e","concatBytes","arrays","sum","pad","equalBytes","diff","utf8ToBytes","str","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","pred","validatorFns","val","object","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","_0n$3","_1n$3","_2n$2","_3n$1","_4n$1","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","number","u","q","r","m","tonelliShanks","P","legendreC","Q","S","Z","p1div4","Fp","root","Q1div2","g","t2","ge","FpSqrt","c1","nv","FIELD_FIELDS","validateField","field","initial","opts","map","FpPow","f","p","d","FpInvertBatch","nums","tmp","lastMultiplied","acc","inverted","nLength","nBitLength","_nBitLength","nByteLength","Field","ORDER","redef","BITS","BYTES","sqrtP","lhs","rhs","lst","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","key","fieldLen","minLen","reduced","_0n$2","_1n$2","wNAF","bits","constTimeNegate","condition","neg","W","windows","windowSize","elm","points","base","window","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","cond1","cond2","precomputesMap","transform","comp","validateBasic","curve","validatePointOpts","endo","b2n","h2b","ut","DER","sBytes","s","rBytesLeft","sig","slice","shl","rhl","rl","_0n$1","_1n$1","_2n$1","_3n","_4n","weierstrassPoints","CURVE","_c","point","_isCompressed","fromBytes","tail","y","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","lengths","wrapPrivateKey","pointPrecomputes","assertPrjPoint","other","Point","px","py","pz","is0","toInv","privateKey","left","right","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","wnaf","I","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","mul","iz","z","ax","ay","zz","cofactor","isTorsionFree","clearCofactor","isCompressed","_bits","validateOpts","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","isValidFieldElement","modN","invN","cat","head","y2","sqrtError","suffix","isYOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","from","Signature","recovery","msgHash","rec","bits2int_modN","radj","prefix","R","ir","u1","u2","utils","getPublicKey","isProbPub","getSharedSecret","privateA","publicB","bits2int","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","hash","randomBytes","lowS","prehash","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","sign","privKey","verify","signature","publicKey","sg","_sig","derError","error","is","_a","SWUFpSqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","sqrtRatio","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","mapToCurveSimpleSWU","tv6","isValid","os2ip","i2osp","strxor","anum","expand_message_xmd","msg","DST","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xof","dkLen","hash_to_field","count","options","expand","_DST","log2p","L","len_in_bytes","prb","j","elm_offset","tv","isogenyMap","COEFF","xNum","xDen","yNum","yDen","createHasher","mapToCurve","def","u0","HMAC","hash$1","_key","buf","oHash","iHash","hmac","message","getHash","msgs","concatBytes$1","createCurve","defHash","create","secp256k1P","secp256k1N","_1n","_2n","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","a1","b1","a2","POW_2_128","_0n","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","t","rand","k_","rx","schnorrVerify","pub","schnorr","isoMap","mapSWU","htf","scalars","hashToCurve","encodeToCurve"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}
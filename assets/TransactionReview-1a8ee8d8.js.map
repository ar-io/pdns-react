{"version":3,"file":"TransactionReview-1a8ee8d8.js","sources":["../../src/components/pages/Transaction/transaction-headers.tsx","../../src/components/pages/Transaction/TransactionReview.tsx"],"sourcesContent":["import { ANT_INTERACTION_TYPES, ARNS_INTERACTION_TYPES } from '@src/types';\n\nexport function getTransactionHeader({\n  workflowName,\n  ...params // eslint-disable-line @typescript-eslint/no-unused-vars\n}: {\n  workflowName: ARNS_INTERACTION_TYPES | ANT_INTERACTION_TYPES;\n} & Record<string, any>) {\n  switch (workflowName) {\n    case ARNS_INTERACTION_TYPES.INCREASE_UNDERNAMES:\n    case ARNS_INTERACTION_TYPES.EXTEND_LEASE:\n      return (\n        <h1\n          className=\"flex white text-[2rem]\"\n          style={{ width: '100%', paddingBottom: '30px' }}\n        >\n          Review\n        </h1>\n      );\n    case ARNS_INTERACTION_TYPES.UPGRADE_NAME:\n    case ARNS_INTERACTION_TYPES.BUY_RECORD:\n      return `Review your Purchase`;\n    default:\n      return undefined;\n  }\n}\n","import { ARIOWriteable, AoARIOWrite, FundFrom } from '@ar.io/sdk/web';\nimport { ANTCard } from '@src/components/cards';\nimport { TransactionDetails } from '@src/components/data-display/TransactionDetails/TransactionDetails';\nimport WorkflowButtons from '@src/components/inputs/buttons/WorkflowButtons/WorkflowButtons';\nimport { StepProgressBar } from '@src/components/layout/progress';\nimport PageLoader from '@src/components/layout/progress/PageLoader/PageLoader';\nimport { useIsMobile } from '@src/hooks';\nimport { useCostDetails } from '@src/hooks/useCostDetails';\nimport { dispatchArNSUpdate, useArNSState } from '@src/state';\nimport dispatchArIOInteraction from '@src/state/actions/dispatchArIOInteraction';\nimport { useGlobalState } from '@src/state/contexts/GlobalState';\nimport { useTransactionState } from '@src/state/contexts/TransactionState';\nimport { useWalletState } from '@src/state/contexts/WalletState';\nimport {\n  ARNSMapping,\n  ARNS_INTERACTION_TYPES,\n  ArNSInteractionTypeToIntentMap,\n  TransactionData,\n  ValidInteractionType,\n} from '@src/types';\nimport {\n  getARNSMappingByInteractionType,\n  getWorkflowStepsForInteraction,\n} from '@src/utils';\nimport eventEmitter from '@src/utils/events';\nimport { StepProps } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { getTransactionHeader } from './transaction-headers';\n\n// page on route transaction/review\n// on completion routes to transaction/complete\nfunction TransactionReview() {\n  const navigate = useNavigate();\n  const [{ arioContract, arioProcessId, aoNetwork, aoClient }] =\n    useGlobalState();\n  const [, dispatchArNSState] = useArNSState();\n  const [{ walletAddress, wallet }] = useWalletState();\n  const [\n    { workflowName, interactionType, transactionData, interactionResult },\n    dispatchTransactionState,\n  ] = useTransactionState();\n  const isMobile = useIsMobile();\n  const [antProps, setAntProps] = useState<ARNSMapping>();\n  const [steps, setSteps] = useState<StepProps[] | undefined>(\n    getWorkflowStepsForInteraction(interactionType),\n  );\n  const [header, setHeader] = useState<string | JSX.Element | undefined>(\n    getTransactionHeader({\n      workflowName: workflowName as ARNS_INTERACTION_TYPES,\n    }),\n  );\n\n  const [fundingSource, setFundingSource] = useState<FundFrom | undefined>(\n    'balance',\n  );\n\n  const costDetailsParams = {\n    ...((transactionData ?? {}) as any),\n    intent:\n      ArNSInteractionTypeToIntentMap[workflowName as ARNS_INTERACTION_TYPES],\n    fromAddress: walletAddress?.toString(),\n    fundFrom: fundingSource,\n    quantity: (transactionData as any)?.qty,\n  };\n  const { data: costDetail } = useCostDetails(costDetailsParams);\n\n  useEffect(() => {\n    if (!transactionData && !workflowName) {\n      navigate('/');\n      return;\n    }\n    setAntProps(\n      getARNSMappingByInteractionType({\n        interactionType: interactionType as ValidInteractionType,\n        transactionData: {\n          ...transactionData,\n          deployedTransactionId: interactionResult?.id,\n        } as any as TransactionData,\n      }) as ARNSMapping,\n    );\n\n    setSteps(getWorkflowStepsForInteraction(interactionType));\n    setHeader(\n      getTransactionHeader({\n        workflowName: workflowName as ARNS_INTERACTION_TYPES,\n      }),\n    );\n  }, [\n    transactionData,\n    interactionResult,\n    workflowName,\n    interactionType,\n    walletAddress,\n  ]);\n\n  useEffect(() => {\n    if (interactionResult?.id) {\n      navigate('/transaction/complete');\n    }\n  }, [interactionResult, navigate]);\n\n  async function handleNext() {\n    try {\n      if (!(arioContract instanceof ARIOWriteable)) {\n        throw new Error('Wallet must be connected to dispatch transactions.');\n      }\n      if (!transactionData || !workflowName) {\n        throw new Error('Transaction data is missing');\n      }\n\n      if (!walletAddress) {\n        throw new Error('Wallet address is missing');\n      }\n      // TODO: check that it's connected\n      await dispatchArIOInteraction({\n        arioContract: arioContract as AoARIOWrite,\n        workflowName: workflowName as ARNS_INTERACTION_TYPES,\n        payload: transactionData,\n        owner: walletAddress,\n        processId: arioProcessId,\n        dispatch: dispatchTransactionState,\n        signer: wallet?.contractSigner,\n        ao: aoClient,\n        scheduler: aoNetwork.ARIO.SCHEDULER,\n        fundFrom: fundingSource,\n      });\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    } finally {\n      if (walletAddress) {\n        dispatchArNSUpdate({\n          dispatch: dispatchArNSState,\n          arioProcessId,\n          walletAddress,\n          aoNetworkSettings: aoNetwork,\n        });\n      }\n    }\n  }\n\n  if (!antProps) {\n    return (\n      <PageLoader loading={true} message={'Loading transaction data...'} />\n    );\n  }\n\n  return (\n    <div className=\"page\">\n      <div\n        className=\"flex flex-column center\"\n        style={isMobile ? {} : { gap: '0px', maxWidth: '900px', width: '100%' }}\n      >\n        {steps && steps.length ? (\n          <div\n            className=\"flex flex-row\"\n            style={{\n              marginBottom: '20px',\n              width: '100%',\n            }}\n          >\n            <StepProgressBar stage={3} stages={steps} />\n          </div>\n        ) : (\n          <></>\n        )}\n\n        {typeof header === 'string' ? (\n          <div\n            className=\"flex flex-row text-large white bold center\"\n            style={{\n              height: '100%',\n              padding: '50px 0px',\n              borderTop: steps?.length ? 'solid 1px var(--text-faded)' : '',\n            }}\n          >\n            {header}\n          </div>\n        ) : (\n          header\n        )}\n        <ANTCard\n          {...antProps}\n          bordered\n          compact={true}\n          overrides={{\n            ...antProps.overrides,\n            targetId: (transactionData as any)?.targetId?.toString(),\n          }}\n        />\n\n        <div className=\"flex w-full pt-10 box-border\">\n          <TransactionDetails\n            details={costDetailsParams}\n            fundingSourceCallback={(v) => setFundingSource(v)}\n          />\n        </div>\n\n        <div\n          className=\"flex\"\n          style={{\n            marginTop: 20,\n            width: '100%',\n            justifyContent: 'flex-end',\n          }}\n        >\n          <WorkflowButtons\n            onNext={\n              !costDetail ||\n              (costDetail.fundingPlan?.shortfall &&\n                costDetail.fundingPlan?.shortfall > 0)\n                ? undefined\n                : () => handleNext()\n            }\n            onBack={() => navigate(-1)}\n            backText={'Back'}\n            nextText={'Confirm'}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TransactionReview;\n"],"names":["getTransactionHeader","workflowName","params","ARNS_INTERACTION_TYPES","jsxRuntimeExports","TransactionReview","navigate","useNavigate","arioContract","arioProcessId","aoNetwork","aoClient","useGlobalState","dispatchArNSState","useArNSState","walletAddress","wallet","useWalletState","interactionType","transactionData","interactionResult","dispatchTransactionState","useTransactionState","isMobile","useIsMobile","antProps","setAntProps","reactExports","steps","setSteps","getWorkflowStepsForInteraction","header","setHeader","fundingSource","setFundingSource","costDetailsParams","ArNSInteractionTypeToIntentMap","costDetail","useCostDetails","getARNSMappingByInteractionType","handleNext","ARIOWriteable","dispatchArIOInteraction","error","eventEmitter","dispatchArNSUpdate","StepProgressBar","ANTCard","_a","TransactionDetails","v","WorkflowButtons","_b","_c","PageLoader"],"mappings":"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"}
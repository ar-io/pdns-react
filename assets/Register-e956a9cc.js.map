{"version":3,"file":"Register-e956a9cc.js","sources":["../../src/hooks/useIsFocused/useIsFocused.tsx","../../src/hooks/useRegistrationStatus/useRegistrationStatus.tsx","../../src/components/inputs/text/NameTokenSelector/NameTokenSelector.tsx","../../src/components/pages/Register/Register.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport function useIsFocused(id: string) {\n  // helpful when you need to modify the style of a seperate element when another element is focused\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    const element = document.getElementById(id);\n\n    if (!element) {\n      console.error(`No element found with id: ${id}`);\n      return;\n    }\n\n    const onFocus = () => setIsFocused(true);\n    const onBlur = () => setIsFocused(false);\n\n    element.addEventListener('focus', onFocus);\n    element.addEventListener('blur', onBlur);\n\n    return () => {\n      element.removeEventListener('focus', onFocus);\n      element.removeEventListener('blur', onBlur);\n    };\n  }, [id]);\n\n  return isFocused;\n}\n","import { ArweaveTransactionID } from '@src/services/arweave/ArweaveTransactionID';\nimport { useEffect, useState } from 'react';\n\nimport { useGlobalState } from '../../state/contexts/GlobalState';\n\nconst defaultReserved = {\n  isReserved: false,\n  reservedFor: undefined,\n};\n\nexport function useRegistrationStatus(domain: string) {\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const [isAvailable, setIsAvailable] = useState<boolean>(false);\n  const [isReserved, setIsReserved] = useState<{\n    isReserved: boolean;\n    reservedFor?: ArweaveTransactionID;\n  }>(defaultReserved);\n  const [validated, setValidated] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    if (!domain.length) {\n      reset();\n    }\n    updateRegistrationStatus(domain);\n  }, [domain]);\n\n  function reset() {\n    setIsAvailable(false);\n    setIsReserved(defaultReserved);\n    setValidated(false);\n  }\n\n  async function updateRegistrationStatus(domain: string) {\n    try {\n      reset();\n      setLoading(true);\n      setValidated(false);\n\n      if (!domain.length) {\n        return reset();\n      }\n      const availablePromise = arweaveDataProvider.isDomainAvailable({\n        domain,\n      });\n      const reservedPromise = arweaveDataProvider.isDomainReserved({\n        domain,\n      });\n\n      const [isAvailable, isReserved] = await Promise.all([\n        availablePromise,\n        reservedPromise,\n      ]);\n\n      setIsAvailable(isAvailable);\n      setIsReserved({\n        ...isReserved,\n        reservedFor: isReserved.reservedFor\n          ? new ArweaveTransactionID(isReserved.reservedFor)\n          : undefined,\n      });\n      setValidated(true);\n    } catch (error) {\n      console.error(error);\n      reset();\n    } finally {\n      setLoading(false);\n    }\n  }\n  return {\n    isAvailable,\n    isReserved: isReserved?.isReserved,\n    reservedFor: isReserved?.reservedFor,\n    loading,\n    validated,\n  };\n}\n","import { ANT, AOProcess, AoArNSNameData } from '@ar.io/sdk/web';\nimport Tooltip from '@src/components/data-display/Tooltip';\nimport { Pagination, PaginationProps } from 'antd';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useIsFocused } from '../../../../hooks';\nimport { ArweaveTransactionID } from '../../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../../state/contexts/GlobalState';\nimport { useWalletState } from '../../../../state/contexts/WalletState';\nimport { AoAddress, VALIDATION_INPUT_TYPES } from '../../../../types';\nimport { isArweaveTransactionID } from '../../../../utils';\nimport { ARWEAVE_TX_LENGTH } from '../../../../utils/constants';\nimport eventEmitter from '../../../../utils/events';\nimport { CloseIcon, HamburgerOutlineIcon } from '../../../icons';\nimport { Loader } from '../../../layout';\nimport ValidationInput from '../ValidationInput/ValidationInput';\nimport './styles.css';\n\ntype NameTokenDetails = {\n  [id: string]: {\n    owner: string;\n    controllers: string[];\n    name: string;\n    ticker: string;\n    names: string[];\n  };\n};\n\nfunction NameTokenSelector({\n  selectedTokenCallback,\n}: {\n  selectedTokenCallback: (id: ArweaveTransactionID | undefined) => void;\n}) {\n  const [{ arweaveDataProvider, antAoClient }] = useGlobalState();\n  const [{ walletAddress }] = useWalletState();\n\n  const [searchText, setSearchText] = useState<string>();\n  const [tokens, setTokens] = useState<NameTokenDetails>();\n  const [loading, setLoading] = useState(false);\n  const [filteredTokens, setFilteredTokens] =\n    useState<\n      Array<\n        | { id: string; name?: string; ticker?: string; names?: string[] }\n        | undefined\n      >\n    >();\n  const [selectedToken, setSelectedToken] = useState<\n    { id: string; name: string; ticker: string; names: string[] } | undefined\n  >(undefined);\n  const [searching, setSearching] = useState<boolean>(false);\n  const [searchActive, setSearchActive] = useState(false);\n  const [validImport, setValidImport] = useState<boolean | undefined>(\n    undefined,\n  );\n  const isFocused = useIsFocused('name-token-input');\n\n  const listRef = useRef<HTMLDivElement>(null);\n  const [listPage, setListPage] = useState<number>(1);\n  const listItemCount = 3;\n\n  useEffect(() => {\n    selectedTokenCallback(\n      selectedToken ? new ArweaveTransactionID(selectedToken.id) : undefined,\n    );\n    setListPage(1);\n  }, [selectedToken]);\n\n  // FIXME: disabled to avoid too many requests\n  // useEffect(() => {\n  //   if (!walletAddress) {\n  //     return;\n  //   }\n  //   getTokenList(walletAddress);\n  // }, [walletAddress]);\n\n  useEffect(() => {\n    if (!listRef.current) {\n      return;\n    }\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [listRef]);\n\n  function handleClickOutside(e: any) {\n    if (\n      listRef.current &&\n      e.target !== listRef.current &&\n      !listRef.current.contains(e.target)\n    ) {\n      setSearchText('');\n      setSearchActive(false);\n      setFilteredTokens(undefined);\n      setListPage(1);\n    }\n  }\n\n  async function getTokenList(\n    address: AoAddress | undefined,\n    imports: ArweaveTransactionID[] = [],\n  ) {\n    try {\n      setLoading(true);\n      if (!address) {\n        throw new Error('No address provided');\n      }\n\n      const fetchedprocessIds: Array<ArweaveTransactionID> = [];\n      // const fetchedprocessIds = await arweaveDataProvider\n      //   .getContractsForWallet({\n      //     address,\n      //   })\n      //   .catch(() => {\n      //     throw new Error('Unable to get contracts for wallet');\n      //   });\n\n      const validImports = imports.length\n        ? await Promise.all(\n            imports.map(async (id: ArweaveTransactionID) => {\n              try {\n                const contract = ANT.init({\n                  process: new AOProcess({\n                    processId: id.toString(),\n                    ao: antAoClient,\n                  }),\n                });\n\n                const info = await contract.getInfo();\n\n                // TODO: further validate that contract exists and has valid state\n\n                if (!contract || !info) {\n                  throw new Error('Unable to get contract');\n                }\n\n                setValidImport(true);\n                return id;\n              } catch (error) {\n                eventEmitter.emit('error', error);\n              }\n            }),\n          ).then(\n            (ids: Array<ArweaveTransactionID | undefined>) =>\n              ids.filter((id) => !!id) as ArweaveTransactionID[],\n          )\n        : [];\n\n      if (!fetchedprocessIds.length && !validImports.length) {\n        return;\n      }\n\n      const processIds = fetchedprocessIds.concat(validImports);\n      const associatedRecords = await arweaveDataProvider.getRecords({\n        filters: {\n          processId: processIds,\n        },\n      });\n\n      const contracts: {\n        processId: ArweaveTransactionID;\n        names: Record<string, AoArNSNameData>;\n        owner: string;\n        controllers: string[];\n        ticker: string;\n        name: string;\n      }[] = await Promise.all(\n        processIds.map(async (processId) => {\n          const contract = ANT.init({\n            process: new AOProcess({\n              processId: processId.toString(),\n              ao: antAoClient,\n            }),\n          });\n          const names = Object.keys(associatedRecords).reduce(\n            (acc: Record<string, AoArNSNameData>, id: string) => {\n              if (associatedRecords[id].processId === processId.toString()) {\n                acc[id] = associatedRecords[id];\n              }\n              return acc;\n            },\n            {},\n          );\n\n          const [owner, controllers, ticker, name] = await Promise.all([\n            contract.getOwner(),\n            contract.getControllers(),\n            contract.getTicker(),\n            contract.getName(),\n          ]).catch(() => {\n            throw new Error('Unable to get contract details');\n          });\n          return {\n            processId,\n            names,\n            owner,\n            controllers,\n            ticker,\n            name,\n          };\n        }),\n      ).then((contracts) => contracts.filter((contract) => !!contract));\n\n      if (!contracts.length) {\n        throw new Error('Unable to get details for Name Tokens');\n      }\n\n      const newTokens: NameTokenDetails = contracts.reduce(\n        async (result, contract) => {\n          const { processId, owner, controllers, name, ticker, names } =\n            contract;\n\n          return {\n            ...result,\n            [processId.toString()]: {\n              owner,\n              controllers,\n              name,\n              ticker,\n              names: Object.keys(names),\n            },\n          };\n        },\n        {},\n      );\n\n      // HACK: we have nested all Promise.all so await twice to resolve\n      setTokens(await newTokens);\n      if (validImports.length) {\n        const details = newTokens[validImports[0].toString()];\n        setSelectedToken({\n          name: details?.name,\n          ticker: details?.ticker,\n          id: validImports[0].toString(),\n          names: details?.names ?? [],\n        });\n      }\n    } catch (error: any) {\n      eventEmitter.emit('error', error);\n    } finally {\n      setLoading(false);\n      setListPage(1);\n    }\n  }\n\n  function handleTokenSearch(query: string) {\n    try {\n      setSearching(true);\n      setValidImport(undefined);\n      if (!query) {\n        setSearchText('');\n        return;\n      }\n      setSearchText(query);\n\n      if (!tokens) {\n        throw new Error('No Name Tokens Found');\n      }\n      const filteredResults = Object.keys(tokens)\n        .filter((id) => {\n          const { owner, controllers, name, ticker } = tokens[id];\n          const queryResult = [owner, controllers, name, ticker, id].some(\n            (term) =>\n              term &&\n              term.toString().toLowerCase().includes(query.toLowerCase()),\n          );\n          return queryResult;\n        })\n        .map((id) => {\n          const { name, ticker, names } = tokens[id];\n          return { id, name: name ?? '', ticker: ticker ?? '', names };\n        })\n        .filter((n) => !!n);\n      if (!filteredResults.length) {\n        throw new Error('No ANT tokens found for that search');\n      }\n\n      setFilteredTokens(filteredResults);\n    } catch (error) {\n      setFilteredTokens(undefined);\n    } finally {\n      setSearching(false);\n      setListPage(1);\n    }\n  }\n\n  function handleSetToken({\n    id,\n    name,\n    ticker,\n    names,\n  }: {\n    id?: string;\n    name?: string;\n    ticker?: string;\n    names: string[];\n  }) {\n    try {\n      setSearchText('');\n      setFilteredTokens(undefined);\n\n      if (id === undefined) {\n        throw new Error(`No ID provided for ${name ?? ticker ?? ''}`);\n      }\n      setSelectedToken({ id, name: name ?? '', ticker: ticker ?? '', names });\n      selectedTokenCallback(new ArweaveTransactionID(id));\n      setListPage(1);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    } finally {\n      setSearchActive(false);\n    }\n  }\n\n  const customPreviousAndNextButtons: PaginationProps['itemRender'] = (\n    page,\n    type,\n    originalElement,\n  ) => {\n    if (!tokens) {\n      return;\n    }\n    if (type === 'next' || type === 'prev') {\n      return;\n    }\n    if (type === 'page') {\n      return (\n        <span\n          className=\"flex flex-row hover center\"\n          style={{\n            color: listPage == page ? 'white' : 'var(--text-grey)',\n            width: '32px',\n          }}\n        >\n          {page}\n        </span>\n      );\n    }\n    return originalElement;\n  };\n\n  function updatePage(page: number) {\n    setListPage(page);\n  }\n\n  return (\n    <div\n      ref={listRef}\n      className=\"flex flex-column radius\"\n      style={{\n        position: 'relative',\n        height: 'fit-content',\n        maxHeight: '400px',\n        border:\n          isFocused || searchActive\n            ? `1px solid var(--text-white)`\n            : `1px solid var(--text-faded)`,\n        gap: 0,\n        boxSizing: 'border-box',\n      }}\n    >\n      {/* input wrapper */}\n      <div\n        className=\"name-token-input-wrapper\"\n        style={{ borderBottom: '1px solid var(--text-faded)' }}\n      >\n        <ValidationInput\n          inputId=\"name-token-input\"\n          onClick={() => setSearchActive(true)}\n          showValidationIcon={true}\n          setValue={(v) => handleTokenSearch(v)}\n          value={searchText ?? ''}\n          maxCharLength={ARWEAVE_TX_LENGTH}\n          placeholder={\n            selectedToken\n              ? selectedToken.name?.length\n                ? selectedToken.name\n                : selectedToken.id\n              : 'Add an Arweave Name Token (ANT)'\n          }\n          validationPredicates={{\n            [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n              fn: (id: string) => {\n                return arweaveDataProvider.validateArweaveId(id);\n              },\n            },\n          }}\n          validityCallback={(validity) => validity}\n          wrapperCustomStyle={{\n            width: '100%',\n            hieght: '45px',\n            borderRadius: '0px',\n            backgroundColor: 'var(--card-bg)',\n            boxSizing: 'border-box',\n            paddingLeft: '10px',\n          }}\n          inputClassName={`white ${\n            selectedToken ? 'name-token-input-selected' : 'name-token-input'\n          }`}\n        />\n        <span\n          className={`flex flex-row text grey flex-center ${\n            selectedToken ? 'bold' : ''\n          } hover`}\n          style={{\n            width: 'fit-content',\n            height: 'fit-content',\n            wordBreak: 'keep-all',\n          }}\n        >\n          {loading || searching ? (\n            <Loader size={20} color=\"var(--text-white)\" />\n          ) : searchText && validImport === false ? (\n            <></>\n          ) : searchText &&\n            isArweaveTransactionID(searchText) &&\n            !Object.keys(tokens ?? []).includes(searchText) ? (\n            <button\n              className=\"outline-button flex flex-row center pointer\"\n              style={{\n                borderRadius: '50px',\n                width: 'fit-content',\n                padding: '3px 6px',\n                fontSize: '12px',\n                minWidth: 'fit-content',\n                border: '1px solid var(--text-grey)',\n              }}\n              onClick={() => {\n                getTokenList(walletAddress, [\n                  new ArweaveTransactionID(searchText),\n                ]);\n              }}\n            >\n              Import\n            </button>\n          ) : selectedToken ? (\n            <button\n              className=\"outline-button flex flex-row center pointer\"\n              style={{\n                gap: '3px',\n                borderRadius: '50px',\n                width: 'fit-content',\n                padding: '3px 7px',\n                fontSize: '12px',\n                minWidth: 'fit-content',\n                border: '1px solid var(--text-grey)',\n              }}\n              onClick={() => {\n                setSelectedToken(undefined);\n                selectedTokenCallback(undefined);\n              }}\n            >\n              <CloseIcon width={'13px'} height={'13px'} />\n              Remove\n            </button>\n          ) : (\n            <Tooltip message=\"For advanced use cases only, you can register this name with a custom ANT by entering its Process ID.\" />\n          )}\n        </span>\n      </div>\n      {/* selector dropdown */}\n      {tokens && searchActive ? (\n        <div\n          className=\"flex flex-column\"\n          style={{\n            alignItems: 'flex-start',\n            justifyContent: 'flex-start',\n            gap: 0,\n            height: 'fit-content',\n            width: '100%',\n            backgroundColor: 'var(--card-bg)',\n            boxSizing: 'border-box',\n            zIndex: 10,\n          }}\n        >\n          {searchText && !filteredTokens?.length ? (\n            <span\n              className=\"text-large center\"\n              style={{\n                color: '#444547',\n                margin: 'auto',\n                height: '50px',\n              }}\n            >\n              No Results\n            </span>\n          ) : filteredTokens ? (\n            filteredTokens\n              .slice(\n                Math.max((listPage - 1) * listItemCount, 0),\n                listPage * listItemCount,\n              )\n              .map((token, index) => {\n                if (!token) {\n                  return;\n                }\n\n                return (\n                  <button\n                    key={index}\n                    className=\"name-token-item pointer\"\n                    onClick={() => {\n                      handleSetToken({\n                        id: token.id,\n                        name: token.name ?? '',\n                        ticker: token.ticker ?? '',\n                        names: token.names ?? [],\n                      });\n                    }}\n                  >\n                    {token.name && token.ticker\n                      ? `${token.name.slice(0, 20)} (${token.ticker}) - ${\n                          token.id\n                        }`\n                      : token.id}\n                    {token.names?.length ? (\n                      <Tooltip\n                        key={index}\n                        icon={\n                          <HamburgerOutlineIcon\n                            width={20}\n                            height={20}\n                            fill=\"var(--text-grey)\"\n                          />\n                        }\n                        message={\n                          <div\n                            className=\"flex flex-column\"\n                            style={{\n                              padding: '5px',\n                              gap: '5px',\n                              boxSizing: 'border-box',\n                            }}\n                          >\n                            {token.names.map((name) => (\n                              <span key={name}>{name}</span>\n                            ))}\n                          </div>\n                        }\n                      />\n                    ) : (\n                      <></>\n                    )}\n                  </button>\n                );\n              })\n          ) : (\n            Object.entries(tokens)\n              .slice(\n                Math.max((listPage - 1) * listItemCount, 0),\n                listPage * listItemCount,\n              )\n              .map((token, index) => {\n                if (!token) {\n                  return;\n                }\n                const [id, details] = token;\n                const { name, ticker, names } = details;\n\n                return (\n                  <button\n                    key={index}\n                    className=\"name-token-item pointer\"\n                    onClick={() => {\n                      handleSetToken({\n                        id,\n                        name: name ?? '',\n                        ticker: ticker ?? '',\n                        names: names ?? [],\n                      });\n                    }}\n                  >\n                    {name && ticker\n                      ? `${name.slice(0, 20)} ${\n                          name.length > 20 ? '...' : ''\n                        } (${ticker}) - ${id}`\n                      : id}\n                    {names?.length ? (\n                      <Tooltip\n                        icon={\n                          <HamburgerOutlineIcon\n                            width={20}\n                            height={20}\n                            fill=\"var(--text-grey)\"\n                          />\n                        }\n                        message={\n                          <div\n                            className=\"flex flex-column\"\n                            style={{\n                              padding: '5px',\n                              boxSizing: 'border-box',\n                            }}\n                          >\n                            {names.map((name) => (\n                              <span key={name}>{name}</span>\n                            ))}\n                          </div>\n                        }\n                      />\n                    ) : (\n                      <></>\n                    )}\n                  </button>\n                );\n              })\n          )}\n          <div\n            className=\"custom-next-pagination flex flex-column\"\n            style={{\n              padding: '10px 25px',\n              boxSizing: 'border-box',\n              width: '100%',\n              justifyContent: 'flex-start',\n            }}\n          >\n            {tokens.length || filteredTokens?.length || !searchText ? (\n              <Pagination\n                total={\n                  Object.keys(tokens).length && !filteredTokens\n                    ? Object.keys(tokens).length\n                    : filteredTokens\n                    ? filteredTokens.length\n                    : 0\n                }\n                itemRender={customPreviousAndNextButtons}\n                showPrevNextJumpers={true}\n                showSizeChanger={false}\n                showQuickJumper={false}\n                onChange={updatePage}\n                current={listPage}\n                defaultPageSize={listItemCount}\n              />\n            ) : (\n              <></>\n            )}{' '}\n          </div>\n        </div>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n\nexport default NameTokenSelector;\n","import { CheckCircleFilled } from '@ant-design/icons';\nimport { ANT, AOProcess, mARIOToken } from '@ar.io/sdk/web';\nimport { Accordion } from '@src/components/data-display';\nimport Tooltip from '@src/components/data-display/Tooltip';\nimport { InsufficientFundsError, ValidationError } from '@src/utils/errors';\nimport emojiRegex from 'emoji-regex';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport { useIsFocused, useRegistrationStatus } from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport { useRegistrationState } from '../../../state/contexts/RegistrationState';\nimport { useTransactionState } from '../../../state/contexts/TransactionState';\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport {\n  ARNS_INTERACTION_TYPES,\n  BuyRecordPayload,\n  TRANSACTION_TYPES,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport {\n  encodeDomainToASCII,\n  formatDate,\n  isArweaveTransactionID,\n  userHasSufficientBalance,\n} from '../../../utils';\nimport {\n  MAX_LEASE_DURATION,\n  MIN_LEASE_DURATION,\n} from '../../../utils/constants';\nimport eventEmitter from '../../../utils/events';\nimport Counter from '../../inputs/Counter/Counter';\nimport WorkflowButtons from '../../inputs/buttons/WorkflowButtons/WorkflowButtons';\nimport NameTokenSelector from '../../inputs/text/NameTokenSelector/NameTokenSelector';\nimport ValidationInput from '../../inputs/text/ValidationInput/ValidationInput';\nimport Loader from '../../layout/Loader/Loader';\nimport TransactionCost from '../../layout/TransactionCost/TransactionCost';\nimport { StepProgressBar } from '../../layout/progress';\nimport PageLoader from '../../layout/progress/PageLoader/PageLoader';\nimport './styles.css';\n\nfunction RegisterNameForm() {\n  const [\n    { domain, fee, leaseDuration, registrationType, antID, targetId },\n    dispatchRegisterState,\n  ] = useRegistrationState();\n  const [\n    {\n      arweaveDataProvider,\n      arioTicker,\n      arioContract,\n      arioProcessId,\n      antAoClient,\n    },\n  ] = useGlobalState();\n  const [{ walletAddress, balances }] = useWalletState();\n  const [, dispatchTransactionState] = useTransactionState();\n  const { name } = useParams();\n  const { loading: isValidatingRegistration } = useRegistrationStatus(\n    name ?? domain,\n  );\n  const [newTargetId, setNewTargetId] = useState<string>();\n  const targetIdFocused = useIsFocused('target-id-input');\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [hasValidationErrors, setHasValidationErrors] =\n    useState<boolean>(false);\n  const [validatingNext, setValidatingNext] = useState<boolean>(false);\n  const ioFee = fee?.[arioTicker];\n  const feeError = ioFee && ioFee < 0;\n\n  useEffect(() => {\n    const redirect = searchParams.get('redirect');\n    if (redirect && name) {\n      if (!balances[arioTicker]) return;\n      setSearchParams();\n      handleNext();\n      return;\n    }\n  }, [balances, fee]);\n\n  useEffect(() => {\n    if (!arioContract || !domain || !arioTicker || !registrationType) return;\n\n    const update = async () => {\n      dispatchRegisterState({\n        type: 'setFee',\n        payload: { ar: 0, [arioTicker]: undefined },\n      });\n      setValidatingNext(true);\n      const cost = await arioContract\n        .getTokenCost({\n          intent: 'Buy-Record',\n          name: domain,\n          type: registrationType,\n          years: leaseDuration,\n        })\n        .then((c) => new mARIOToken(c).toARIO().valueOf())\n        .catch(() => undefined);\n      setValidatingNext(false);\n\n      dispatchRegisterState({\n        type: 'setFee',\n        payload: { ar: 0, [arioTicker]: cost },\n      });\n    };\n    update();\n  }, [\n    arioContract,\n    dispatchRegisterState,\n    domain,\n    arioTicker,\n    leaseDuration,\n    registrationType,\n  ]);\n\n  useEffect(() => {\n    if (name && domain !== name) {\n      dispatchRegisterState({\n        type: 'setDomainName',\n        payload: name,\n      });\n    }\n  }, [name, domain]);\n\n  async function handleANTId(id?: ArweaveTransactionID) {\n    if (!id) {\n      dispatchRegisterState({\n        type: 'setANTID',\n        payload: undefined,\n      });\n      return;\n    }\n    dispatchRegisterState({\n      type: 'setANTID',\n      payload: id,\n    });\n\n    const contract = ANT.init({\n      process: new AOProcess({\n        processId: id.toString(),\n        ao: antAoClient,\n      }),\n    });\n    if (!contract) throw new Error('Contract not found');\n  }\n\n  if (!registrationType) {\n    return <Loader size={80} />;\n  }\n\n  async function handleNext() {\n    try {\n      // validate transaction cost, return if insufficient balance and emit validation message\n      if (!walletAddress) {\n        const redirectParams = new URLSearchParams({ redirect: 'true' });\n        navigate('/connect', {\n          state: {\n            to: `/register/${domain}?${redirectParams.toString()}`,\n            from: `/register/${domain}`,\n          },\n        });\n        return;\n      }\n\n      setValidatingNext(true);\n\n      const ioBalance = await arioContract\n        .getBalance({\n          address: walletAddress.toString(),\n        })\n        .then((balance) => new mARIOToken(balance).toARIO());\n\n      const balanceErrors = userHasSufficientBalance<{\n        [x: string]: number;\n        AR: number;\n      }>({\n        balances: { AR: balances.ar, [arioTicker]: ioBalance.valueOf() },\n        costs: { AR: fee.ar, [arioTicker]: fee[arioTicker] } as {\n          [x: string]: number;\n          AR: number;\n        },\n      });\n\n      if (balanceErrors.length) {\n        balanceErrors.forEach((error: any) => {\n          eventEmitter.emit('error', new InsufficientFundsError(error.message));\n        });\n        return;\n      }\n\n      if (feeError) throw new Error('Issue calculating transaction cost.');\n      if (hasValidationErrors) {\n        throw new ValidationError(\n          'Please fix the errors above before continuing.',\n        );\n      }\n    } catch (error: any) {\n      eventEmitter.emit('error', error);\n      setValidatingNext(false);\n      return;\n    } finally {\n      setValidatingNext(false);\n    }\n\n    const name =\n      domain && emojiRegex().test(domain)\n        ? encodeDomainToASCII(domain)\n        : domain;\n    const buyRecordPayload: BuyRecordPayload = {\n      name,\n      processId: antID?.toString() ?? 'atomic',\n      // TODO: move this to a helper function\n      years:\n        registrationType === TRANSACTION_TYPES.LEASE\n          ? leaseDuration\n          : undefined,\n      type: registrationType,\n      targetId,\n    };\n\n    dispatchTransactionState({\n      type: 'setTransactionData',\n      payload: {\n        assetId: arioProcessId,\n        functionName: 'buyRecord',\n        ...buyRecordPayload,\n        interactionPrice: fee?.[arioTicker],\n      },\n    });\n    dispatchTransactionState({\n      type: 'setInteractionType',\n      payload: ARNS_INTERACTION_TYPES.BUY_RECORD,\n    });\n    dispatchRegisterState({\n      type: 'reset',\n    });\n    dispatchTransactionState({\n      type: 'setWorkflowName',\n      payload: ARNS_INTERACTION_TYPES.BUY_RECORD,\n    });\n    // navigate to the transaction page, which will load the updated state of the transaction context\n    navigate('/transaction/review', {\n      state: `/register/${domain}`,\n    });\n  }\n\n  return (\n    <div className=\"page center\">\n      <PageLoader\n        message={'Loading Domain info, please wait.'}\n        loading={isValidatingRegistration}\n      />\n      <div\n        className=\"flex flex-column flex-center\"\n        style={{\n          maxWidth: '900px',\n          width: '100%',\n          padding: '0px',\n\n          gap: '50px',\n          boxSizing: 'border-box',\n        }}\n      >\n        <div\n          className=\"flex flex-row flex-center\"\n          style={{\n            paddingBottom: '20px',\n            borderBottom: 'solid 1px var(--text-faded)',\n          }}\n        >\n          <StepProgressBar\n            stages={[\n              { title: 'Choose', description: 'Pick a name', status: 'finish' },\n              {\n                title: 'Configure',\n                description: 'Registration Period',\n                status: 'process',\n              },\n              {\n                title: 'Confirm',\n                description: 'Review transaction',\n                status: 'wait',\n              },\n            ]}\n            stage={1}\n          />\n        </div>\n\n        <span\n          className=\"text-medium white center\"\n          style={{ fontWeight: '500px', fontSize: '23px', gap: '15px' }}\n        >\n          <span style={{ color: 'var(--success-green)' }}>\n            {domain} <span className={'white'}>is available!</span>\n          </span>{' '}\n          <CheckCircleFilled\n            style={{ fontSize: '20px', color: 'var(--success-green)' }}\n          />\n        </span>\n        <div className=\"flex flex-column flex-center\">\n          <div\n            className=\"flex flex-column flex-center\"\n            style={{\n              width: '100%',\n              height: 'fit-content',\n              gap: '15px',\n            }}\n          >\n            <div\n              className=\"flex flex-row flex-space-between\"\n              style={{ gap: '25px' }}\n            >\n              <button\n                className=\"flex flex-row center text-medium bold pointer\"\n                onClick={() =>\n                  dispatchRegisterState({\n                    type: 'setRegistrationType',\n                    payload: TRANSACTION_TYPES.LEASE,\n                  })\n                }\n                style={{\n                  position: 'relative',\n                  background:\n                    registrationType === TRANSACTION_TYPES.LEASE\n                      ? 'var(--text-white)'\n                      : '',\n                  color:\n                    registrationType === TRANSACTION_TYPES.LEASE\n                      ? 'var(--text-black)'\n                      : 'var(--text-white)',\n                  border: 'solid 2px var(--text-faded)',\n                  borderRadius: 'var(--corner-radius)',\n                  height: '56px',\n                  borderBottomWidth: '0.5px',\n                }}\n              >\n                Lease{' '}\n                {registrationType === TRANSACTION_TYPES.LEASE ? (\n                  <div\n                    style={{\n                      position: 'absolute',\n                      bottom: '-6px',\n                      left: '50%',\n                      transform: 'rotate(45deg)',\n                      width: '11px',\n                      height: '11px',\n                      background: 'var(--text-white)',\n                    }}\n                  ></div>\n                ) : (\n                  <></>\n                )}\n              </button>\n              <button\n                className=\"flex flex-row center text-medium bold pointer\"\n                style={{\n                  position: 'relative',\n                  background:\n                    registrationType === TRANSACTION_TYPES.BUY\n                      ? 'var(--text-white)'\n                      : '',\n                  color:\n                    registrationType === TRANSACTION_TYPES.BUY\n                      ? 'var(--text-black)'\n                      : 'var(--text-white)',\n                  border: 'solid 2px var(--text-faded)',\n                  borderRadius: 'var(--corner-radius)',\n                  height: '56px',\n                  borderBottomWidth: '0.5px',\n                }}\n                onClick={() =>\n                  dispatchRegisterState({\n                    type: 'setRegistrationType',\n                    payload: TRANSACTION_TYPES.BUY,\n                  })\n                }\n              >\n                Buy{' '}\n                {registrationType === TRANSACTION_TYPES.BUY ? (\n                  <div\n                    style={{\n                      position: 'absolute',\n                      bottom: -6,\n                      left: '50%',\n                      transform: 'rotate(45deg)',\n                      width: '11px',\n                      height: '11px',\n                      background: 'var(--text-white)',\n                    }}\n                  ></div>\n                ) : (\n                  <></>\n                )}\n              </button>\n            </div>\n\n            <div\n              className=\"flex flex-column flex-center card\"\n              style={{\n                width: '100%',\n                minHeight: '0px',\n                height: 'fit-content',\n                maxWidth: 'unset',\n                padding: '25px',\n                boxSizing: 'border-box',\n                borderTopWidth: '0.2px',\n                borderRadius: 'var(--corner-radius)',\n                justifyContent: 'flex-start',\n              }}\n            >\n              {registrationType === TRANSACTION_TYPES.LEASE ? (\n                <Counter\n                  value={leaseDuration}\n                  setValue={(v: number) => {\n                    dispatchRegisterState({\n                      type: 'setLeaseDuration',\n                      payload: v,\n                    });\n                  }}\n                  // TODO: move this to a helper function\n                  minValue={MIN_LEASE_DURATION}\n                  maxValue={MAX_LEASE_DURATION}\n                  valueStyle={{ padding: '20px 120px' }}\n                  valueName={leaseDuration > 1 ? 'years' : 'year'}\n                  detail={`Until ${formatDate(\n                    Date.now() + leaseDuration * 365 * 24 * 60 * 60 * 1000,\n                  )}`}\n                  title={\n                    <span\n                      className=\"white\"\n                      style={{\n                        padding: '0px 10px 10px 10px',\n                        fontWeight: '500',\n                      }}\n                    >{`Registration period (between ${MIN_LEASE_DURATION}-${MAX_LEASE_DURATION} years)`}</span>\n                  }\n                />\n              ) : registrationType === TRANSACTION_TYPES.BUY ? (\n                <div\n                  className=\"flex flex-column flex-center\"\n                  style={{ gap: '1em' }}\n                >\n                  <span className=\"text-medium grey center\">\n                    Registration Period\n                  </span>\n                  <span className=\"text-medium white center\">Permanent</span>\n                </div>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-column\" style={{ gap: '1em' }}>\n            <Accordion\n              title={<span className=\"text-medium\">Advanced Options</span>}\n              key=\"1\"\n            >\n              <div className=\"flex flex-column\" style={{ gap: '1em' }}>\n                <div\n                  className=\"name-token-input-wrapper\"\n                  style={{\n                    border:\n                      targetIdFocused || newTargetId\n                        ? 'solid 1px var(--text-white)'\n                        : 'solid 1px var(--text-faded)',\n                    position: 'relative',\n                  }}\n                >\n                  <ValidationInput\n                    inputId={'target-id-input'}\n                    value={newTargetId ?? ''}\n                    setValue={(v: string) => {\n                      setNewTargetId(v.trim());\n                      if (isArweaveTransactionID(v.trim())) {\n                        dispatchRegisterState({\n                          type: 'setTargetId',\n                          payload: new ArweaveTransactionID(v.trim()),\n                        });\n                      }\n                      if (v.trim().length === 0) {\n                        setHasValidationErrors(false);\n                      }\n                    }}\n                    wrapperCustomStyle={{\n                      width: '100%',\n                      hieght: '45px',\n                      borderRadius: '0px',\n                      backgroundColor: 'var(--card-bg)',\n                      boxSizing: 'border-box',\n                    }}\n                    inputClassName={`white name-token-input`}\n                    inputCustomStyle={{\n                      paddingLeft: '10px',\n                      background: 'transparent',\n                    }}\n                    maxCharLength={43}\n                    placeholder={'Arweave Transaction ID (Target ID)'}\n                    validationPredicates={{\n                      [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                        fn: (id: string) =>\n                          arweaveDataProvider.validateArweaveId(id),\n                      },\n                    }}\n                    showValidationChecklist={false}\n                    showValidationIcon={true}\n                    validityCallback={(validity: boolean) => {\n                      setHasValidationErrors(!validity);\n                    }}\n                  />\n\n                  <span\n                    className=\"flex flex-row text grey flex-center\"\n                    style={{\n                      width: 'fit-content',\n                      height: 'fit-content',\n                      wordBreak: 'keep-all',\n                      // padding: '1px',\n                    }}\n                  >\n                    <Tooltip message=\"The Target ID is the Arweave Transaction ID that will be resolved at the root of this ArNS name\" />\n                  </span>\n                </div>\n                <NameTokenSelector\n                  selectedTokenCallback={(id) => handleANTId(id)}\n                />\n              </div>\n            </Accordion>\n\n            <TransactionCost\n              ioRequired={true}\n              fee={fee}\n              feeWrapperStyle={{\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: '100%',\n              }}\n            />\n            <div style={{ marginTop: '0px' }}>\n              <WorkflowButtons\n                nextText=\"Next\"\n                backText=\"Back\"\n                onNext={validatingNext ? undefined : handleNext}\n                onBack={() => navigate('/', { state: `/register/${domain}` })}\n                customNextStyle={{ width: '100px' }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RegisterNameForm;\n"],"names":["useIsFocused","id","isFocused","setIsFocused","reactExports","element","onFocus","onBlur","defaultReserved","useRegistrationStatus","domain","arweaveDataProvider","useGlobalState","isAvailable","setIsAvailable","isReserved","setIsReserved","validated","setValidated","loading","setLoading","reset","updateRegistrationStatus","domain2","availablePromise","reservedPromise","isAvailable2","isReserved2","ArweaveTransactionID","error","NameTokenSelector","selectedTokenCallback","antAoClient","walletAddress","useWalletState","searchText","setSearchText","tokens","setTokens","filteredTokens","setFilteredTokens","selectedToken","setSelectedToken","searching","setSearching","searchActive","setSearchActive","validImport","setValidImport","listRef","listPage","setListPage","listItemCount","handleClickOutside","e","getTokenList","address","imports","fetchedprocessIds","validImports","contract","ANT","AOProcess","info","eventEmitter","ids","processIds","associatedRecords","contracts","processId","names","acc","owner","controllers","ticker","name","contracts2","newTokens","result","details","handleTokenSearch","query","filteredResults","term","n","handleSetToken","customPreviousAndNextButtons","page","type","originalElement","jsxRuntimeExports","updatePage","ValidationInput","v","ARWEAVE_TX_LENGTH","_a","VALIDATION_INPUT_TYPES","validity","Loader","isArweaveTransactionID","SvgClose","Tooltip","token","index","SvgHamburgerOutline","name2","Pagination","RegisterNameForm","fee","leaseDuration","registrationType","antID","targetId","dispatchRegisterState","useRegistrationState","arioTicker","arioContract","arioProcessId","balances","dispatchTransactionState","useTransactionState","useParams","isValidatingRegistration","newTargetId","setNewTargetId","targetIdFocused","navigate","useNavigate","searchParams","setSearchParams","useSearchParams","hasValidationErrors","setHasValidationErrors","validatingNext","setValidatingNext","ioFee","feeError","handleNext","cost","c","mARIOToken","handleANTId","redirectParams","ioBalance","balance","balanceErrors","userHasSufficientBalance","InsufficientFundsError","ValidationError","buyRecordPayload","emojiRegex","encodeDomainToASCII","TRANSACTION_TYPES","ARNS_INTERACTION_TYPES","PageLoader","StepProgressBar","CheckCircleFilled","Counter","MIN_LEASE_DURATION","MAX_LEASE_DURATION","formatDate","Accordion","TransactionCost","WorkflowButtons"],"mappings":"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"}
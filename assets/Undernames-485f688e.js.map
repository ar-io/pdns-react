{"version":3,"file":"Undernames-485f688e.js","sources":["../../src/components/icons/CircleXFilled.svg","../../src/components/icons/Plus.svg","../../src/components/icons/Trash.svg","../../src/components/modals/ant-management/AddUndernameModal/AddUndernameModal.tsx","../../src/hooks/useUndernames/useUndernames.tsx","../../src/components/pages/Undernames/Undernames.tsx"],"sourcesContent":["export default \"__VITE_ASSET__1e5db3e2__\"","export default \"__VITE_ASSET__4982667c__\"","export default \"__VITE_ASSET__f0987060__\"","import { AoArNSNameData } from '@ar.io/sdk/web';\nimport { Tooltip } from 'antd';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useIsMobile } from '../../../../hooks';\nimport { ArweaveTransactionID } from '../../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../../state/contexts/GlobalState';\nimport { SetRecordPayload, VALIDATION_INPUT_TYPES } from '../../../../types';\nimport {\n  isArweaveTransactionID,\n  isUndernameValid,\n  validateNoLeadingOrTrailingDashes,\n  validateNoSpecialCharacters,\n  validateTTLSeconds,\n} from '../../../../utils';\nimport {\n  ARNS_TX_ID_ENTRY_REGEX,\n  LANDING_PAGE_TXID,\n  MAX_TTL_SECONDS,\n  MAX_UNDERNAME_LENGTH,\n  MIN_TTL_SECONDS,\n  UNDERNAME_REGEX,\n} from '../../../../utils/constants';\nimport eventEmitter from '../../../../utils/events';\nimport WarningCard from '../../../cards/WarningCard/WarningCard';\nimport ValidationInput from '../../../inputs/text/ValidationInput/ValidationInput';\nimport DialogModal from '../../DialogModal/DialogModal';\n\nfunction AddUndernameModal({\n  antId,\n  closeModal,\n  payloadCallback,\n}: {\n  antId: ArweaveTransactionID; // process ID if asset type is a contract interaction\n  closeModal: () => void;\n  payloadCallback: (payload: SetRecordPayload) => void;\n}) {\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const isMobile = useIsMobile();\n\n  const targetIdRef = useRef<HTMLInputElement>(null);\n  const ttlRef = useRef<HTMLInputElement>(null);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [undername, setUndername] = useState<string>('');\n  const [targetId, setTargetId] = useState<string>(\n    LANDING_PAGE_TXID.toString(),\n  );\n  const [ttlSeconds, setTtlSeconds] = useState<number>(MIN_TTL_SECONDS);\n  const [associatedRecords, setAssociatedRecords] = useState<\n    Record<string, AoArNSNameData>\n  >({});\n  const [maxUndernameLength, setMaxUndernameLength] =\n    useState<number>(MAX_UNDERNAME_LENGTH);\n\n  useEffect(() => {\n    loadDetails();\n    nameRef.current?.focus();\n  }, [antId.toString()]);\n\n  async function loadDetails() {\n    try {\n      const arnsRecords = await arweaveDataProvider.getRecords({\n        filters: { processId: [antId] },\n      });\n      setAssociatedRecords(arnsRecords);\n      const shortestAssociatedName = Object.keys(arnsRecords).length\n        ? Math.min(...Object.keys(arnsRecords).map((name) => name.length))\n        : 0;\n      setMaxUndernameLength(MAX_UNDERNAME_LENGTH - shortestAssociatedName);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    }\n  }\n\n  function handlePayloadCallback() {\n    payloadCallback({\n      subDomain: undername,\n      transactionId: targetId,\n      ttlSeconds,\n    });\n  }\n\n  function getIncompatibleNames(\n    undername: string,\n    records: Record<string, AoArNSNameData>,\n  ): string[] {\n    return Object.keys(records).filter(\n      (name: string) => undername.length + name.length > MAX_UNDERNAME_LENGTH,\n    );\n  }\n\n  return (\n    <div\n      className=\"modal-container\"\n      style={isMobile ? { padding: 'none' } : {}}\n    >\n      {/**modal header */}\n      <DialogModal\n        title={<h2 className=\"white text-xl\">Add Undername</h2>}\n        body={\n          <form>\n            <div\n              className=\"flex flex-column\"\n              style={{ fontSize: '14px', width: '500px' }}\n            >\n              <div\n                className=\"flex flex-column\"\n                style={{ paddingBottom: '30px' }}\n              >\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">Undername Title:</span>\n                  <span\n                    className=\"flex flex-row\"\n                    style={{ position: 'relative' }}\n                  >\n                    <ValidationInput\n                      key={'undername'}\n                      ref={nameRef}\n                      inputClassName=\"name-token-input white\"\n                      inputCustomStyle={{\n                        paddingLeft: '10px',\n                        fontSize: '14px',\n                        paddingRight: '80px',\n                      }}\n                      wrapperCustomStyle={{\n                        width: '100%',\n                        border: '1px solid var(--text-faded)',\n                        borderRadius: 'var(--corner-radius)',\n                      }}\n                      showValidationIcon={true}\n                      showValidationOutline={true}\n                      showValidationChecklist={true}\n                      validationListStyle={{ display: 'none' }}\n                      value={undername}\n                      setValue={(v: string) => setUndername(v)}\n                      catchInvalidInput={false}\n                      maxCharLength={maxUndernameLength}\n                      customPattern={UNDERNAME_REGEX}\n                      validationPredicates={{\n                        [VALIDATION_INPUT_TYPES.UNDERNAME]: {\n                          fn: (name: string) =>\n                            validateNoSpecialCharacters(name),\n                        },\n                        'Dashes and Underscores cannot be leading or trailing':\n                          {\n                            fn: (name) =>\n                              validateNoLeadingOrTrailingDashes(name),\n                          },\n                      }}\n                    />\n                    <span\n                      className=\"flex flex-row grey\"\n                      style={{\n                        position: 'absolute',\n                        top: '0px',\n                        bottom: '0px',\n                        right: undername.length ? '35px' : '10px',\n                        width: 'fit-content',\n                      }}\n                    >\n                      {undername.length} / {maxUndernameLength}\n                    </span>\n                  </span>\n                  {getIncompatibleNames(undername, associatedRecords).length ? (\n                    <WarningCard\n                      text={\n                        <span>\n                          This ANT has{' '}\n                          <Tooltip\n                            title={\n                              <div\n                                className=\"flex flex-column\"\n                                style={{\n                                  padding: '5px',\n                                  gap: '5px',\n                                  boxSizing: 'border-box',\n                                }}\n                              >\n                                {getIncompatibleNames(\n                                  undername,\n                                  associatedRecords,\n                                ).map((name) => (\n                                  <span key={name}>{name}</span>\n                                ))}\n                              </div>\n                            }\n                            color=\"var(--card-bg)\"\n                            placement=\"top\"\n                            showArrow={true}\n                          >\n                            <span className=\"underline bold\">\n                              {\n                                getIncompatibleNames(\n                                  undername,\n                                  associatedRecords,\n                                ).length\n                              }{' '}\n                              name\n                              {getIncompatibleNames(\n                                undername,\n                                associatedRecords,\n                              ).length > 1\n                                ? 's'\n                                : ''}\n                            </span>\n                          </Tooltip>{' '}\n                          that will not support this undername as it is over\n                          their supported length.\n                        </span>\n                      }\n                    />\n                  ) : (\n                    <></>\n                  )}\n                </div>\n\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">Target ID:</span>\n                  <ValidationInput\n                    key={'targetId'}\n                    ref={targetIdRef}\n                    inputClassName=\"name-token-input white\"\n                    inputCustomStyle={{\n                      paddingLeft: '10px',\n                      fontSize: '14px',\n                      paddingRight: '40px',\n                    }}\n                    wrapperCustomStyle={{\n                      position: 'relative',\n                      border: '1px solid var(--text-faded)',\n                      borderRadius: 'var(--corner-radius)',\n                    }}\n                    showValidationIcon={true}\n                    showValidationOutline={true}\n                    showValidationChecklist={true}\n                    validationListStyle={{ display: 'none' }}\n                    maxCharLength={43}\n                    value={targetId}\n                    setValue={setTargetId}\n                    catchInvalidInput={true}\n                    customPattern={ARNS_TX_ID_ENTRY_REGEX}\n                    validationPredicates={{\n                      [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                        fn: (id: string) =>\n                          arweaveDataProvider.validateArweaveId(id),\n                      },\n                    }}\n                  />\n                </div>\n\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">TTL:</span>\n                  <ValidationInput\n                    key={'ttlSeconds'}\n                    ref={ttlRef}\n                    inputClassName=\"name-token-input white\"\n                    inputCustomStyle={{ paddingLeft: '10px', fontSize: '14px' }}\n                    wrapperCustomStyle={{\n                      position: 'relative',\n                      border: '1px solid var(--text-faded)',\n                      borderRadius: 'var(--corner-radius)',\n                      maxWidth: '130px',\n                    }}\n                    showValidationIcon={true}\n                    showValidationOutline={true}\n                    showValidationChecklist={true}\n                    type=\"number\"\n                    minNumber={MIN_TTL_SECONDS}\n                    maxNumber={MAX_TTL_SECONDS}\n                    validationListStyle={{ display: 'none' }}\n                    maxCharLength={MAX_TTL_SECONDS.toString().length}\n                    value={ttlSeconds}\n                    setValue={(v: string) => setTtlSeconds(+v)}\n                    catchInvalidInput={true}\n                    customPattern={\n                      new RegExp(\n                        `^[0-9]{1,${MAX_TTL_SECONDS.toString().length}}$`,\n                      )\n                    }\n                    validationPredicates={{\n                      [VALIDATION_INPUT_TYPES.VALID_TTL]: {\n                        fn: (ttl: string) => validateTTLSeconds(+ttl),\n                      },\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        }\n        onCancel={closeModal}\n        onClose={closeModal}\n        onNext={\n          isArweaveTransactionID(targetId) &&\n          isUndernameValid(undername) &&\n          ttlSeconds >= MIN_TTL_SECONDS &&\n          ttlSeconds <= MAX_TTL_SECONDS\n            ? () => handlePayloadCallback()\n            : undefined\n        }\n        footer={\n          <div className=\"flex\">\n            {/* <TransactionCost\n              fee={{}}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n              showBorder={false}\n            /> */}\n          </div>\n        }\n        nextText=\"Next\"\n        cancelText=\"Cancel\"\n      />\n    </div>\n  );\n}\n\nexport default AddUndernameModal;\n","import { ANT } from '@ar.io/sdk/web';\nimport { useArNSState } from '@src/state/contexts/ArNSState';\nimport { useWalletState } from '@src/state/contexts/WalletState';\nimport { Tooltip } from 'antd';\nimport { ColumnType } from 'antd/es/table';\nimport { useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport {\n  ChevronUpIcon,\n  CircleXFilled,\n  PencilIcon,\n  SearchIcon,\n  TrashIcon,\n} from '../../components/icons/index';\nimport ValidationInput from '../../components/inputs/text/ValidationInput/ValidationInput';\nimport ArweaveID, {\n  ArweaveIdTypes,\n} from '../../components/layout/ArweaveID/ArweaveID';\nimport { ArweaveTransactionID } from '../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../state/contexts/GlobalState';\nimport {\n  UNDERNAME_TABLE_ACTIONS,\n  UndernameMetadata,\n  UndernameTableInteractionTypes,\n} from '../../types';\nimport { isArweaveTransactionID } from '../../utils';\nimport { ARNS_NAME_REGEX_PARTIAL } from '../../utils/constants';\n\nexport function useUndernames(id?: ArweaveTransactionID, name?: string) {\n  const [{ gateway }] = useGlobalState();\n  const [{ domains }] = useArNSState();\n  const [{ walletAddress }] = useWalletState();\n  const [sortAscending, setSortOrder] = useState(true);\n  const [sortField, setSortField] = useState<keyof UndernameMetadata>('name');\n  const [selectedRow, setSelectedRow] = useState<UndernameMetadata>();\n  const [rows, setRows] = useState<UndernameMetadata[]>([]);\n  const [columns, setColumns] = useState<ColumnType<UndernameMetadata>[]>([]);\n  const [filteredResults, setFilteredResults] = useState<UndernameMetadata[]>(\n    [],\n  );\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [action, setAction] = useState<\n    UndernameTableInteractionTypes | undefined\n  >();\n  const searchRef = useRef<HTMLInputElement>(null);\n  const [searchText, setSearchText] = useState<string>('');\n  const [searchOpen, setSearchOpen] = useState<boolean>(false);\n  const [isAuthorized, setIsAuthorized] = useState(false);\n\n  useEffect(() => {\n    if (!id && !name) {\n      return;\n    }\n    fetchUndernameRows(id, name);\n  }, [id, name, walletAddress]);\n  useEffect(() => {\n    setColumns(generateTableColumns());\n  }, [isAuthorized]);\n\n  useEffect(() => {\n    if (searchText) {\n      const filtered = rows.filter((row) =>\n        row.name.toLowerCase().startsWith(searchText.toLowerCase()),\n      );\n      setFilteredResults(filtered);\n    } else {\n      setFilteredResults([]);\n    }\n  }, [searchText, walletAddress, name]);\n\n  function generateTableColumns(): ColumnType<UndernameMetadata>[] {\n    const newColumns: ColumnType<UndernameMetadata>[] = [\n      {\n        title: (\n          <button\n            className=\"flex-row pointer grey\"\n            style={{ gap: '0.5em' }}\n            onClick={() => setSortField('name')}\n          >\n            <span>Undername</span>\n            {sortField === 'name' ? (\n              <ChevronUpIcon\n                width={10}\n                height={10}\n                fill={'var(--text-grey)'}\n                style={!sortAscending ? { transform: 'rotate(180deg)' } : {}}\n              />\n            ) : (\n              <></>\n            )}\n          </button>\n        ),\n        dataIndex: 'name',\n        key: 'name',\n        align: 'left',\n        width: '18%',\n        className: 'grey manage-assets-table-header',\n        ellipsis: true,\n        onHeaderCell: () => {\n          return {\n            onClick: () => {\n              rows.sort((a: UndernameMetadata, b: UndernameMetadata) =>\n                // by default we sort by name\n                !sortAscending\n                  ? a.name.localeCompare(b.name)\n                  : b.name.localeCompare(a.name),\n              );\n              // forces update of rows\n              setRows([...rows]);\n              setSortOrder(!sortAscending);\n            },\n          };\n        },\n        render: (val: string, row: UndernameMetadata) => (\n          <Link\n            to={`https://${val}_${row.domain}.${gateway}`}\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"link\"\n            aria-disabled={row.domain == undefined}\n          >\n            {val}\n          </Link>\n        ),\n      },\n      {\n        title: (\n          <button\n            className=\"flex-row pointer grey\"\n            style={{ gap: '0.5em' }}\n            onClick={() => setSortField('targetID')}\n          >\n            <span>Target ID</span>\n            {sortField === 'targetID' ? (\n              <ChevronUpIcon\n                width={10}\n                height={10}\n                fill={'var(--text-grey)'}\n                style={!sortAscending ? { transform: 'rotate(180deg)' } : {}}\n              />\n            ) : (\n              <></>\n            )}\n          </button>\n        ),\n        dataIndex: 'targetID',\n        key: 'targetID',\n        align: 'left',\n        width: '18%',\n        className: 'grey manage-assets-table-header',\n        render: (val: string) =>\n          val === 'N/A' || !isArweaveTransactionID(val) ? (\n            val\n          ) : (\n            <ArweaveID\n              id={new ArweaveTransactionID(val)}\n              characterCount={12}\n              shouldLink\n              type={ArweaveIdTypes.TRANSACTION}\n            />\n          ),\n        onHeaderCell: () => {\n          return {\n            onClick: () => {\n              rows.sort((a: any, b: any) =>\n                sortAscending\n                  ? a.targetID.localeCompare(b.targetID)\n                  : b.targetID.localeCompare(a.targetID),\n              );\n              // forces update of rows\n              setRows([...rows]);\n              setSortOrder(!sortAscending);\n            },\n          };\n        },\n      },\n      {\n        title: (\n          <button\n            className=\"flex-row pointer grey\"\n            style={{ gap: '0.5em' }}\n            onClick={() => setSortField('ttlSeconds')}\n          >\n            <span>TTL</span>\n            {sortField === 'ttlSeconds' ? (\n              <ChevronUpIcon\n                width={10}\n                height={10}\n                fill={'var(--text-grey)'}\n                style={!sortAscending ? { transform: 'rotate(180deg)' } : {}}\n              />\n            ) : (\n              <></>\n            )}\n          </button>\n        ),\n        dataIndex: 'ttlSeconds',\n        key: 'ttlSeconds',\n        align: 'left',\n        width: '18%',\n        className: 'grey manage-assets-table-header',\n        render: (val: string) => val,\n        onHeaderCell: () => {\n          return {\n            onClick: () => {\n              rows.sort((a: any, b: any) =>\n                sortAscending\n                  ? a.ttlSeconds - b.ttlSeconds\n                  : b.ttlSeconds - a.ttlSeconds,\n              );\n              // forces update of rows\n              setRows([...rows]);\n              setSortOrder(!sortAscending);\n            },\n          };\n        },\n      },\n      {\n        title: (\n          <div\n            className=\"flex flex-row center undername-search-wrapper\"\n            style={{\n              gap: '1px',\n              justifyContent: 'flex-end',\n              boxSizing: 'border-box',\n            }}\n          >\n            <button\n              className=\"flex button center pointer\"\n              style={{ zIndex: 10 }}\n              onClick={() => setSearchOpen(!searchOpen)}\n            >\n              <SearchIcon\n                width={'16px'}\n                height={'16px'}\n                fill={searchOpen ? 'var(--text-white)' : 'var(--text-grey)'}\n              />\n            </button>\n            {searchOpen ? (\n              <span\n                className=\"flex flex-row center\"\n                style={{\n                  gap: '1px',\n                  justifyContent: 'flex-end',\n                  width: 'fit-content',\n                  boxSizing: 'border-box',\n                }}\n              >\n                <ValidationInput\n                  ref={searchRef}\n                  value={searchText}\n                  setValue={(e) => setSearchText(e)}\n                  catchInvalidInput={true}\n                  showValidationIcon={false}\n                  placeholder={'Search for a name'}\n                  maxCharLength={61}\n                  wrapperCustomStyle={{\n                    position: 'relative',\n                    boxSizing: 'border-box',\n                  }}\n                  inputCustomStyle={{\n                    width: '100%',\n                    minWidth: '100px',\n                    overflow: 'hidden',\n                    fontSize: '13px',\n                    outline: 'none',\n                    color: 'white',\n                    alignContent: 'center',\n                    borderBottom: 'none',\n                    boxSizing: 'border-box',\n                    background: 'transparent',\n                    borderRadius: 'var(--corner-radius)',\n                    border: 'none',\n                    paddingRight: '10px',\n                  }}\n                  customPattern={ARNS_NAME_REGEX_PARTIAL}\n                  validationPredicates={{}}\n                />\n                <button\n                  className=\"flex button center pointer\"\n                  onClick={() => {\n                    setSearchText('');\n                    setSearchOpen(false);\n                  }}\n                >\n                  <CircleXFilled\n                    width={'18px'}\n                    height={'18px'}\n                    fill={'var(--text-grey)'}\n                  />\n                </button>\n              </span>\n            ) : (\n              <></>\n            )}\n          </div>\n        ),\n        className: 'manage-assets-table-header',\n        render: (value, row) => (\n          <div\n            className=\"flex flex-row action-buttons fade-in\"\n            style={{ gap: '10px', justifyContent: 'flex-end' }}\n          >\n            {isAuthorized && (\n              <>\n                <Tooltip\n                  trigger={['hover']}\n                  title={'Edit'}\n                  color=\"var(--card-bg)\"\n                  placement=\"top\"\n                  rootClassName=\"notification-tooltip\"\n                >\n                  <button\n                    className=\"button pointer\"\n                    onClick={() => {\n                      setSelectedRow(row);\n                      setAction(UNDERNAME_TABLE_ACTIONS.EDIT);\n                    }}\n                  >\n                    <PencilIcon\n                      width={18}\n                      height={18}\n                      fill={'var(--text-grey)'}\n                    />\n                  </button>\n                </Tooltip>\n\n                <Tooltip\n                  trigger={['hover']}\n                  title={'Delete'}\n                  color=\"#222224\"\n                  placement=\"top\"\n                  rootClassName=\"notification-tooltip\"\n                >\n                  <button\n                    className=\"button pointer\"\n                    onClick={() => {\n                      setSelectedRow(row);\n                      setAction(UNDERNAME_TABLE_ACTIONS.REMOVE);\n                    }}\n                  >\n                    <TrashIcon\n                      width={18}\n                      height={18}\n                      fill={'var(--text-grey)'}\n                    />\n                  </button>\n                </Tooltip>\n              </>\n            )}\n          </div>\n        ),\n        align: 'right',\n        width: '10%',\n        key: 'action',\n        dataIndex: 'action',\n      },\n    ];\n    return newColumns;\n  }\n\n  async function fetchUndernameRows(\n    id?: ArweaveTransactionID,\n    name?: string,\n  ): Promise<void> {\n    let processId: ArweaveTransactionID | undefined = undefined;\n    if (id) {\n      processId = id;\n    } else if (name) {\n      const arnsRecord = domains[name];\n      if (arnsRecord)\n        processId = new ArweaveTransactionID(arnsRecord.processId);\n    }\n\n    if (!processId) {\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    const domain = Object.keys(domains).find(\n      (d) => domains[d].processId === processId?.toString(),\n    );\n    const state = await ANT.init({\n      processId: processId.toString(),\n    }).getState();\n\n    const rows = Object.entries(state.Records)\n      .map(([name, record]) =>\n        name === '@'\n          ? undefined\n          : {\n              domain,\n              name,\n              targetID: record.transactionId,\n              ttlSeconds: record.ttlSeconds,\n              status: 0,\n              key: name,\n            },\n      )\n      .filter((row) => row !== undefined)\n      .sort((a, b) => a!.status - b!.status);\n    setRows(rows as UndernameMetadata[]);\n    const authorized = walletAddress\n      ? state.Controllers.includes(walletAddress.toString()) ||\n        state.Owner === walletAddress.toString()\n      : false;\n    setIsAuthorized(authorized);\n    setIsLoading(false);\n  }\n\n  return {\n    isLoading,\n    columns,\n    rows: filteredResults.length ? filteredResults : rows,\n    sortField,\n    sortAscending,\n    selectedRow,\n    action,\n    setAction: (action: UNDERNAME_TABLE_ACTIONS | undefined) =>\n      setAction(action),\n    refresh: () => fetchUndernameRows(id, name),\n  };\n}\n","import ConfirmTransactionModal from '@src/components/modals/ConfirmTransactionModal/ConfirmTransactionModal';\nimport useDomainInfo from '@src/hooks/useDomainInfo';\nimport dispatchANTInteraction from '@src/state/actions/dispatchANTInteraction';\nimport { useTransactionState } from '@src/state/contexts/TransactionState';\nimport { Table } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport { useUndernames } from '../../../hooks/useUndernames/useUndernames';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport {\n  ANT_INTERACTION_TYPES,\n  SetRecordPayload,\n  TransactionDataPayload,\n  UNDERNAME_TABLE_ACTIONS,\n  UndernameMetadata,\n} from '../../../types';\nimport {\n  getCustomPaginationButtons,\n  isArweaveTransactionID,\n} from '../../../utils';\nimport eventEmitter from '../../../utils/events';\nimport TransactionSuccessCard from '../../cards/TransactionSuccessCard/TransactionSuccessCard';\nimport { PlusIcon } from '../../icons';\nimport { Loader } from '../../layout';\nimport { AddUndernameModal, EditUndernameModal } from '../../modals';\nimport './styles.css';\n\nfunction Undernames() {\n  const navigate = useNavigate();\n  const { id, name } = useParams();\n  const { data } = useDomainInfo({\n    domain: name,\n    antId: id ? new ArweaveTransactionID(id) : undefined,\n  });\n  const [{ walletAddress, wallet }] = useWalletState();\n  const [antId, setANTId] = useState<ArweaveTransactionID>();\n  const [selectedRow, setSelectedRow] = useState<\n    UndernameMetadata | undefined\n  >();\n  const {\n    isLoading: undernameTableLoading,\n    columns: undernameColumns,\n    rows: undernameRows,\n    selectedRow: selectedUndernameRow,\n    sortAscending: undernameSortAscending,\n    sortField: undernameSortField,\n    action,\n    setAction,\n    refresh,\n  } = useUndernames(antId, name);\n  const [tableLoading, setTableLoading] = useState(true);\n  const [tablePage, setTablePage] = useState<number>(1);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [ownershipStatus, setOwnershipStatus] = useState<\n    'controller' | 'owner' | undefined\n  >();\n\n  // modal state\n  const [transactionData, setTransactionData] = useState<\n    TransactionDataPayload | undefined\n  >();\n  const [interactionType, setInteractionType] =\n    useState<ANT_INTERACTION_TYPES>();\n  const [{ interactionResult, workflowName }, dispatchTransactionState] =\n    useTransactionState();\n\n  useEffect(() => {\n    if (!id && !name) {\n      eventEmitter.emit('error', new Error('Missing ANT transaction ID.'));\n      navigate('/manage/ants');\n      return;\n    }\n\n    setTableLoading(undernameTableLoading);\n    setSelectedRow(selectedUndernameRow);\n\n    if (tableLoading) load();\n\n    setAction(action);\n\n    if (data.owner && data.controllers) {\n      getOwnershipStatus(\n        data.owner,\n        data.controllers,\n        walletAddress?.toString(),\n      ).then((status) => setOwnershipStatus(status));\n    }\n\n    if (\n      action === UNDERNAME_TABLE_ACTIONS.REMOVE &&\n      antId &&\n      selectedUndernameRow?.name\n    ) {\n      setTransactionData({\n        subDomain: selectedUndernameRow?.name,\n      });\n      setInteractionType(ANT_INTERACTION_TYPES.REMOVE_RECORD);\n    }\n  }, [\n    id,\n    name,\n    undernameSortAscending,\n    undernameSortField,\n    selectedUndernameRow,\n    action,\n    undernameRows,\n    walletAddress,\n  ]);\n\n  async function getOwnershipStatus(\n    owner: string,\n    controllers: string[],\n    walletAddress?: string,\n  ): Promise<'controller' | 'owner' | undefined> {\n    if (owner === walletAddress) {\n      return 'owner';\n    }\n\n    if (walletAddress && controllers.includes(walletAddress)) {\n      return 'controller';\n    }\n    return undefined;\n  }\n\n  async function load() {\n    try {\n      let processId: ArweaveTransactionID | undefined = undefined;\n      if (isArweaveTransactionID(id)) {\n        processId = new ArweaveTransactionID(id);\n      } else if (name) {\n        const record = data.arnsRecord;\n        processId = new ArweaveTransactionID(record?.processId);\n      }\n\n      if (!processId) {\n        throw new Error('Unable to load undernames, cannot resolve ANT ID.');\n      }\n      setANTId(processId);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n      navigate('/manage/ants');\n    }\n  }\n\n  async function handleInteraction({\n    payload,\n    workflowName,\n    processId,\n  }: {\n    payload: TransactionDataPayload;\n    workflowName: ANT_INTERACTION_TYPES;\n    processId?: ArweaveTransactionID;\n  }) {\n    try {\n      if (!processId) {\n        throw new Error('Unable to interact with ANT contract - missing ID.');\n      }\n\n      if (!wallet?.arconnectSigner || !walletAddress) {\n        throw new Error(\n          'Unable to interact with ANT contract - missing signer.',\n        );\n      }\n\n      await dispatchANTInteraction({\n        processId,\n        payload,\n        workflowName,\n        signer: wallet?.arconnectSigner,\n        owner: walletAddress?.toString(),\n        dispatch: dispatchTransactionState,\n      });\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    } finally {\n      setTransactionData(undefined);\n      setInteractionType(undefined);\n      refresh();\n    }\n  }\n\n  return (\n    <>\n      <div className=\"page\">\n        <div className=\"flex-column\">\n          {interactionResult ? (\n            <TransactionSuccessCard\n              txId={new ArweaveTransactionID(interactionResult.id)}\n              close={() => {\n                dispatchTransactionState({\n                  type: 'reset',\n                });\n              }}\n              title={`${workflowName} completed`}\n            />\n          ) : (\n            <></>\n          )}\n          <div className=\"flex flex-justify-between\">\n            <div\n              className=\"flex flex-row\"\n              style={{ justifyContent: 'space-between' }}\n            >\n              <h2 className=\"white text-[2rem]\">Manage Undernames</h2>\n              {ownershipStatus ? (\n                <button\n                  disabled={ownershipStatus === undefined}\n                  className={'button-secondary center'}\n                  style={{\n                    gap: '10px',\n                    padding: '9px 12px',\n                    fontSize: '14px',\n                    textAlign: 'center',\n                  }}\n                  onClick={() =>\n                    setSearchParams({ modal: UNDERNAME_TABLE_ACTIONS.CREATE })\n                  }\n                >\n                  <PlusIcon\n                    width={'16px'}\n                    height={'16px'}\n                    fill={'var(--accent)'}\n                  />\n                  Add Undername\n                </button>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n          {tableLoading ? (\n            <div\n              className=\"flex center\"\n              style={{ paddingTop: '10%', justifyContent: 'center' }}\n            >\n              <Loader message={`Loading undernames...`} />\n            </div>\n          ) : (\n            <Table\n              onRow={() => ({ className: 'hovered-row' })}\n              prefixCls=\"manage-undernames-table\"\n              bordered={false}\n              scroll={{ x: true }}\n              columns={undernameColumns}\n              dataSource={undernameRows}\n              pagination={{\n                position: ['bottomCenter'],\n                rootClassName: 'table-pagination',\n                itemRender: (page, type, originalElement) =>\n                  getCustomPaginationButtons({\n                    page,\n                    type,\n                    originalElement,\n                    currentPage: tablePage,\n                  }),\n                onChange: (page: number) => setTablePage(page),\n                showPrevNextJumpers: true,\n                showSizeChanger: false,\n                current: tablePage,\n              }}\n              locale={{\n                emptyText: (\n                  <div\n                    className=\"flex flex-column center\"\n                    style={{\n                      padding: '100px',\n                      boxSizing: 'border-box',\n                      width: '100%',\n                    }}\n                  >\n                    <span className=\"white bold\" style={{ fontSize: '16px' }}>\n                      No Undernames Found\n                    </span>\n                    <span\n                      className={'grey'}\n                      style={{ fontSize: '13px', maxWidth: '400px' }}\n                    >\n                      Arweave Name Tokens (ANTs) provide ownership and control\n                      of ArNS names. With ANTs you can easily manage, transfer,\n                      and adjust your domains, as well as create undernames.\n                    </span>\n\n                    <div\n                      className=\"flex flex-row center\"\n                      style={{ gap: '16px' }}\n                    >\n                      {ownershipStatus ? (\n                        <button\n                          className={'button-secondary center'}\n                          style={{\n                            gap: '10px',\n                            padding: '9px 12px',\n                            fontSize: '14px',\n                            textAlign: 'center',\n                          }}\n                          onClick={() =>\n                            setSearchParams({\n                              modal: UNDERNAME_TABLE_ACTIONS.CREATE,\n                            })\n                          }\n                        >\n                          <PlusIcon\n                            width={'16px'}\n                            height={'16px'}\n                            fill={'var(--accent)'}\n                          />\n                          Add Undername\n                        </button>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                  </div>\n                ),\n              }}\n            />\n          )}\n        </div>\n      </div>\n      {searchParams.has('modal') && antId && ownershipStatus ? (\n        <AddUndernameModal\n          closeModal={() => {\n            setSearchParams({});\n            setSelectedRow(undefined);\n            setSearchParams({});\n          }}\n          payloadCallback={(payload: SetRecordPayload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.SET_RECORD);\n            setAction(undefined);\n            setSelectedRow(undefined);\n            setSearchParams({});\n          }}\n          antId={antId}\n        />\n      ) : (\n        <> </>\n      )}\n\n      {action === UNDERNAME_TABLE_ACTIONS.EDIT &&\n      antId &&\n      selectedRow?.name &&\n      ownershipStatus ? (\n        <EditUndernameModal\n          closeModal={() => {\n            setAction(undefined);\n            setSelectedRow(undefined);\n          }}\n          payloadCallback={(payload: SetRecordPayload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.EDIT_RECORD);\n            setAction(undefined);\n            setSelectedRow(undefined);\n          }}\n          antId={antId}\n          undername={selectedRow.name}\n        />\n      ) : (\n        <> </>\n      )}\n\n      {antId && transactionData && interactionType && ownershipStatus ? (\n        <ConfirmTransactionModal\n          interactionType={interactionType}\n          confirm={() =>\n            handleInteraction({\n              payload: transactionData,\n              workflowName: interactionType,\n              processId: antId,\n            })\n          }\n          cancel={() => {\n            setTransactionData(undefined);\n            setInteractionType(undefined);\n            setSelectedRow(undefined);\n            setAction(undefined);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n\nexport default Undernames;\n"],"names":["SvgCircleXFilled","props","reactExports","SvgPlus","SvgTrash","AddUndernameModal","antId","closeModal","payloadCallback","arweaveDataProvider","useGlobalState","isMobile","useIsMobile","targetIdRef","ttlRef","nameRef","undername","setUndername","targetId","setTargetId","LANDING_PAGE_TXID","ttlSeconds","setTtlSeconds","MIN_TTL_SECONDS","associatedRecords","setAssociatedRecords","maxUndernameLength","setMaxUndernameLength","MAX_UNDERNAME_LENGTH","loadDetails","_a","arnsRecords","shortestAssociatedName","name","error","eventEmitter","handlePayloadCallback","getIncompatibleNames","undername2","records","jsxRuntimeExports","DialogModal","ValidationInput","v","UNDERNAME_REGEX","VALIDATION_INPUT_TYPES","validateNoSpecialCharacters","validateNoLeadingOrTrailingDashes","WarningCard","Tooltip","ARNS_TX_ID_ENTRY_REGEX","id","MAX_TTL_SECONDS","ttl","validateTTLSeconds","isArweaveTransactionID","isUndernameValid","useUndernames","gateway","domains","useArNSState","walletAddress","useWalletState","sortAscending","setSortOrder","sortField","setSortField","selectedRow","setSelectedRow","rows","setRows","columns","setColumns","filteredResults","setFilteredResults","isLoading","setIsLoading","action","setAction","searchRef","searchText","setSearchText","searchOpen","setSearchOpen","isAuthorized","setIsAuthorized","fetchUndernameRows","generateTableColumns","filtered","row","SvgChevronUp","a","b","val","Link","ArweaveID","ArweaveTransactionID","ArweaveIdTypes","SvgSearch","e","ARNS_NAME_REGEX_PARTIAL","value","UNDERNAME_TABLE_ACTIONS","SvgPencil","id2","name2","processId","arnsRecord","domain","d","state","ANT","rows2","name3","record","authorized","action2","Undernames","navigate","useNavigate","useParams","data","useDomainInfo","wallet","setANTId","undernameTableLoading","undernameColumns","undernameRows","selectedUndernameRow","undernameSortAscending","undernameSortField","refresh","tableLoading","setTableLoading","tablePage","setTablePage","searchParams","setSearchParams","useSearchParams","ownershipStatus","setOwnershipStatus","transactionData","setTransactionData","interactionType","setInteractionType","interactionResult","workflowName","dispatchTransactionState","useTransactionState","load","getOwnershipStatus","status","ANT_INTERACTION_TYPES","owner","controllers","walletAddress2","handleInteraction","payload","workflowName2","dispatchANTInteraction","TransactionSuccessCard","Loader","Table","page","type","originalElement","getCustomPaginationButtons","EditUndernameModal","ConfirmTransactionModal"],"mappings":"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"}
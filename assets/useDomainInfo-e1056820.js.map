{"version":3,"file":"useDomainInfo-e1056820.js","sources":["../../src/hooks/useDomainInfo.tsx"],"sourcesContent":["import {\n  ANT,\n  AoANTRead,\n  AoANTRecord,\n  AoANTWrite,\n  AoArNSNameData,\n} from '@ar.io/sdk/web';\nimport { useGlobalState } from '@src/state/contexts/GlobalState';\nimport { useWalletState } from '@src/state/contexts/WalletState';\nimport { lowerCaseDomain } from '@src/utils';\nimport { buildArNSRecordsQuery, queryClient } from '@src/utils/network';\nimport { RefetchOptions, useQuery } from '@tanstack/react-query';\n\nexport default function useDomainInfo({\n  domain,\n  antId,\n}: {\n  domain?: string;\n  antId?: string;\n}): {\n  data: {\n    arnsRecord?: AoArNSNameData;\n    associatedNames?: string[];\n    processId: string;\n    antProcess: AoANTWrite | AoANTRead;\n    name: string;\n    ticker: string;\n    owner: string;\n    controllers: string[];\n    undernameCount?: number;\n    apexRecord: {\n      transactionId: string;\n      ttlSeconds: number;\n    };\n    records: Record<string, AoANTRecord>;\n  };\n  isLoading: boolean;\n  error: Error | null;\n  refetch: (options?: RefetchOptions) => void;\n} {\n  const [{ arioContract: arioProvider, ioProcessId, aoNetwork }] =\n    useGlobalState();\n  const [{ wallet }] = useWalletState();\n\n  // TODO: this should be modified or removed\n  const { data, isLoading, isRefetching, error, refetch } = useQuery({\n    queryKey: ['domainInfo', { domain, antId, ioProcessId, aoNetwork }],\n    queryFn: () => getDomainInfo({ domain, antId }).catch((error) => error),\n  });\n\n  async function getDomainInfo({\n    domain,\n    antId,\n  }: {\n    domain?: string;\n    antId?: string;\n  }): Promise<{\n    arnsRecord?: AoArNSNameData;\n    associatedNames?: string[];\n    processId: string;\n    antProcess: AoANTWrite | AoANTRead;\n    name: string;\n    ticker: string;\n    owner: string;\n    controllers: string[];\n    undernameCount: number;\n    apexRecord: {\n      transactionId: string;\n      ttlSeconds: number;\n    };\n    records: Record<string, AoANTRecord>;\n  }> {\n    if (!domain && !antId) {\n      throw new Error('No domain or antId provided');\n    }\n\n    const record = domain\n      ? await arioProvider.getArNSRecord({\n          name: lowerCaseDomain(domain),\n        })\n      : undefined;\n\n    if (!antId && !record?.processId) {\n      throw new Error('No ANT id or record found');\n    }\n    const processId = antId || record?.processId;\n    const signer = wallet?.arconnectSigner;\n\n    if (!processId) {\n      throw new Error('No processId found');\n    }\n\n    const antProcess = ANT.init({\n      processId: processId,\n      ...(signer !== undefined ? { signer: signer as any } : {}),\n    });\n\n    const state = await antProcess.getState();\n    if (!state) throw new Error('State not found for ANT contract');\n\n    const arnsRecords = await queryClient.fetchQuery(\n      buildArNSRecordsQuery({\n        arioContract: arioProvider,\n        meta: [ioProcessId, aoNetwork.CU_URL],\n      }),\n    );\n    const associatedNames = Object.entries(arnsRecords)\n      .filter(([, r]) => r.processId == processId.toString())\n      .map(([d]) => d);\n\n    const {\n      Name: name,\n      Ticker: ticker,\n      Owner: owner,\n      Controllers: controllers,\n      Records: records,\n    } = state;\n    const apexRecord = records['@'];\n    const undernameCount = Object.keys(records).filter((k) => k !== '@').length;\n\n    if (!apexRecord) {\n      throw new Error('No apexRecord found');\n    }\n    return {\n      arnsRecord: record,\n      associatedNames,\n      processId,\n      antProcess,\n      name,\n      ticker,\n      owner,\n      controllers,\n      undernameCount,\n      apexRecord,\n      records: state.Records,\n    };\n  }\n\n  return {\n    data,\n    isLoading: isLoading || isRefetching,\n    error,\n    refetch: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['domainInfo', { domain, antId }],\n        refetchType: 'all',\n      });\n      refetch();\n    },\n  };\n}\n"],"names":["useDomainInfo","domain","antId","arioProvider","ioProcessId","aoNetwork","useGlobalState","wallet","useWalletState","data","isLoading","isRefetching","error","refetch","useQuery","getDomainInfo","error2","domain2","antId2","record","lowerCaseDomain","processId","signer","antProcess","ANT","state","arnsRecords","queryClient","buildArNSRecordsQuery","associatedNames","r","d","name","ticker","owner","controllers","records","apexRecord","undernameCount","k"],"mappings":"+YAaA,SAAAA,EAAA,CAAA,OAAAC,EACA,MAAAC,CAEA,EAAA,CAwBA,KAAA,CAAA,CAAA,aAAAC,EAAA,YAAAC,EAAA,UAAAC,CAAA,CAAA,EAAAC,EAAA,EAEA,CAAA,CAAA,OAAAC,CAAA,CAAA,EAAAC,EAAA,EAGA,CAAA,KAAAC,EAAA,UAAAC,EAAA,aAAAC,EAAA,MAAAC,EAAA,QAAAC,CAAA,EAAAC,EAAA,CAAA,SAAA,CAAA,aAAA,CAAA,OAAAb,EAAA,MAAAC,EAAA,YAAAE,EAAA,UAAAC,CAAA,CAAA,EACA,QAAA,IAAAU,EAAA,CAAA,OAAAd,EAAA,MAAAC,CAAA,CAAA,EAAA,MAAAc,GAAAA,CAAA,CACA,CAAA,EAGA,eAAAD,EAAA,CAAA,OAAAE,EACA,MAAAC,CACA,EAAA,CAoBA,GAAA,CAAAD,GAAA,CAAAC,EACA,MAAA,IAAA,MAAA,6BAAA,EAGA,MAAAC,EAAAF,EAAA,MAAAd,EAAA,cAAA,CACA,KAAAiB,EAAAH,CAAA,CACA,CAAA,EAAA,OAIA,GAAA,CAAAC,GAAA,EAAAC,GAAA,MAAAA,EAAA,WACA,MAAA,IAAA,MAAA,2BAAA,EAEA,MAAAE,EAAAH,IAAAC,GAAA,YAAAA,EAAA,WACAG,EAAAf,GAAA,YAAAA,EAAA,gBAEA,GAAA,CAAAc,EACA,MAAA,IAAA,MAAA,oBAAA,EAGA,MAAAE,EAAAC,EAAA,KAAA,CAAA,UAAAH,EACA,GAAAC,IAAA,OAAA,CAAA,OAAAA,CAAA,EAAA,CAAA,CACA,CAAA,EAGAG,EAAA,MAAAF,EAAA,SAAA,EACA,GAAA,CAAAE,EAAA,MAAA,IAAA,MAAA,kCAAA,EAEA,MAAAC,EAAA,MAAAC,EAAA,WAAAC,EAAA,CACA,aAAAzB,EACA,KAAA,CAAAC,EAAAC,EAAA,MAAA,CACA,CAAA,CACA,EAEAwB,EAAA,OAAA,QAAAH,CAAA,EAAA,OAAA,CAAA,CAAA,CAAAI,CAAA,IAAAA,EAAA,WAAAT,EAAA,SAAA,CAAA,EAAA,IAAA,CAAA,CAAAU,CAAA,IAAAA,CAAA,EAIA,CAAA,KAAAC,EACA,OAAAC,EACA,MAAAC,EACA,YAAAC,EACA,QAAAC,CACA,EAAAX,EAEAY,EAAAD,EAAA,GAAA,EACAE,EAAA,OAAA,KAAAF,CAAA,EAAA,OAAAG,GAAAA,IAAA,GAAA,EAAA,OAEA,GAAA,CAAAF,EACA,MAAA,IAAA,MAAA,qBAAA,EAEA,MAAA,CAAA,WAAAlB,EACA,gBAAAU,EACA,UAAAR,EACA,WAAAE,EACA,KAAAS,EACA,OAAAC,EACA,MAAAC,EACA,YAAAC,EACA,eAAAG,EACA,WAAAD,EACA,QAAAZ,EAAA,OACA,CACA,CAGA,MAAA,CAAA,KAAAhB,EACA,UAAAC,GAAAC,EACA,MAAAC,EACA,QAAA,IAAA,CAEAe,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,CAAA,OAAA1B,EAAA,MAAAC,CAAA,CAAA,EACA,YAAA,KACA,CAAA,EAEAW,EAAA,CAAA,CACA,CAEA"}
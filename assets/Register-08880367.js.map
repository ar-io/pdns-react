{"version":3,"file":"Register-08880367.js","sources":["../../src/components/icons/Lock.svg","../../src/components/inputs/text/NameTokenSelector/NameTokenSelector.tsx","../../src/components/pages/Register/Register.tsx"],"sourcesContent":["export default \"__VITE_ASSET__4929e499__\"","import { Pagination, PaginationProps, Tooltip } from 'antd';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useIsFocused } from '../../../../hooks';\nimport { ANTContract } from '../../../../services/arweave/ANTContract';\nimport { ArweaveTransactionID } from '../../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../../state/contexts/GlobalState';\nimport { useWalletState } from '../../../../state/contexts/WalletState';\nimport {\n  ANTContractJSON,\n  ARNSRecordEntry,\n  VALIDATION_INPUT_TYPES,\n} from '../../../../types';\nimport { isArweaveTransactionID } from '../../../../utils';\nimport { SMARTWEAVE_MAX_INPUT_SIZE } from '../../../../utils/constants';\nimport eventEmitter from '../../../../utils/events';\nimport { CloseIcon, HamburgerOutlineIcon } from '../../../icons';\nimport { Loader } from '../../../layout';\nimport ValidationInput from '../ValidationInput/ValidationInput';\nimport './styles.css';\n\ntype NameTokenDetails = {\n  [x: string]: Pick<\n    ANTContractJSON,\n    'name' | 'ticker' | 'owner' | 'controller'\n  > & { names?: string[] };\n};\n\nfunction NameTokenSelector({\n  selectedTokenCallback,\n}: {\n  selectedTokenCallback: (id: ArweaveTransactionID | undefined) => void;\n}) {\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const [{ walletAddress }] = useWalletState();\n\n  const [searchText, setSearchText] = useState<string>();\n  const [tokens, setTokens] = useState<NameTokenDetails>();\n  const [loading, setLoading] = useState(false);\n  const [filteredTokens, setFilteredTokens] =\n    useState<\n      Array<\n        | { id: string; name?: string; ticker?: string; names?: string[] }\n        | undefined\n      >\n    >();\n  const [selectedToken, setSelectedToken] = useState<\n    { id: string; name: string; ticker: string; names: string[] } | undefined\n  >(undefined);\n  const [searching, setSearching] = useState<boolean>(false);\n  const [searchActive, setSearchActive] = useState(false);\n  const [validImport, setValidImport] = useState<boolean | undefined>(\n    undefined,\n  );\n  const isFocused = useIsFocused('name-token-input');\n\n  const listRef = useRef<HTMLDivElement>(null);\n  const [listPage, setListPage] = useState<number>(1);\n  const listItemCount = 3;\n\n  useEffect(() => {\n    selectedTokenCallback(\n      selectedToken ? new ArweaveTransactionID(selectedToken.id) : undefined,\n    );\n    setListPage(1);\n  }, [selectedToken]);\n\n  useEffect(() => {\n    if (!walletAddress) {\n      return;\n    }\n    getTokenList(walletAddress);\n  }, [walletAddress]);\n\n  useEffect(() => {\n    if (!listRef.current) {\n      return;\n    }\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [listRef]);\n\n  function handleClickOutside(e: any) {\n    if (\n      listRef.current &&\n      e.target !== listRef.current &&\n      !listRef.current.contains(e.target)\n    ) {\n      setSearchText('');\n      setSearchActive(false);\n      setFilteredTokens(undefined);\n      setListPage(1);\n    }\n  }\n\n  async function getTokenList(\n    address: ArweaveTransactionID | undefined,\n    imports: ArweaveTransactionID[] = [],\n  ) {\n    try {\n      setLoading(true);\n      if (!address) {\n        throw new Error('No address provided');\n      }\n      const { contractTxIds: fetchedContractTxIds } = await arweaveDataProvider\n        .getContractsForWallet(address, 'ant')\n        .catch((e) => {\n          console.debug(e);\n          throw new Error('Unable to get contracts for wallet');\n        });\n\n      const validImports = imports.length\n        ? await Promise.all(\n            imports.map(async (id: ArweaveTransactionID) => {\n              try {\n                await arweaveDataProvider\n                  .validateTransactionTags({\n                    id: id.toString(),\n                    requiredTags: {\n                      'App-Name': ['SmartWeaveContract'],\n                    },\n                  })\n                  .catch(() => {\n                    throw new Error(`Import is not a SmartWeave Contract`);\n                  });\n                const state =\n                  await arweaveDataProvider.getContractState<ANTContractJSON>(\n                    id,\n                  );\n                if (!Object.keys(state).length) {\n                  throw new Error(`Unable to get Contract State`);\n                }\n\n                if (!new ANTContract(state).isValid()) {\n                  throw new Error('Invalid ANT Contract.');\n                }\n\n                setValidImport(true);\n                return id;\n              } catch (error) {\n                eventEmitter.emit('error', error);\n              }\n            }),\n          ).then(\n            (ids: Array<ArweaveTransactionID | undefined>) =>\n              ids.filter((id) => !!id) as ArweaveTransactionID[],\n          )\n        : [];\n\n      if (!fetchedContractTxIds.length && !validImports.length) {\n        return;\n      }\n\n      const contractTxIds = fetchedContractTxIds.concat(validImports);\n      const associatedRecords =\n        await arweaveDataProvider.getRecords<ARNSRecordEntry>({\n          filters: {\n            contractTxId: contractTxIds,\n          },\n        });\n      const contracts: Array<\n        | [\n            ArweaveTransactionID,\n            ANTContractJSON,\n            Record<string, ARNSRecordEntry>,\n          ]\n        | undefined\n      > = await Promise.all(\n        contractTxIds.map(async (contractTxId) => {\n          const contract = await arweaveDataProvider\n            .buildANTContract(contractTxId)\n            .catch(() => {\n              throw new Error(`Unable to get Contract State`);\n            });\n\n          if (!contract.isValid()) {\n            throw new Error('Invalid ANT Contract.');\n          }\n          const names = Object.keys(associatedRecords).reduce(\n            (acc: Record<string, ARNSRecordEntry>, id: string) => {\n              if (\n                associatedRecords[id].contractTxId === contractTxId.toString()\n              ) {\n                acc[id] = associatedRecords[id];\n              }\n              return acc;\n            },\n            {},\n          );\n\n          return [contractTxId, contract.state, names];\n        }),\n      );\n      if (!contracts.length) {\n        throw new Error('Unable to get details for Name Tokens');\n      }\n\n      const newTokens: NameTokenDetails = contracts.reduce(\n        (result, contract) => {\n          if (!contract) {\n            return { ...result };\n          }\n          const [id, state, names] = contract;\n          const { owner, controller, name, ticker } = state;\n\n          return {\n            ...result,\n            [id.toString()]: {\n              owner,\n              controller,\n              name,\n              ticker,\n              names: Object.keys(names),\n            },\n          };\n        },\n        {},\n      );\n      setTokens(newTokens);\n      if (validImports.length) {\n        const details = newTokens[validImports[0].toString()];\n        setSelectedToken({\n          name: details?.name,\n          ticker: details?.ticker,\n          id: validImports[0].toString(),\n          names: details?.names ?? [],\n        });\n      }\n    } catch (error: any) {\n      eventEmitter.emit('error', error);\n    } finally {\n      setLoading(false);\n      setListPage(1);\n    }\n  }\n\n  function handleTokenSearch(query: string) {\n    try {\n      setSearching(true);\n      setValidImport(undefined);\n      if (!query) {\n        setSearchText('');\n        return;\n      }\n      setSearchText(query);\n\n      if (!tokens) {\n        throw new Error('No Name Tokens Found');\n      }\n      const filteredResults = Object.keys(tokens)\n        .filter((id) => {\n          const { owner, controller, name, ticker } = tokens[id];\n          const queryResult = [owner, controller, name, ticker, id].some(\n            (term) =>\n              term &&\n              term.toString().toLowerCase().includes(query.toLowerCase()),\n          );\n          return queryResult;\n        })\n        .map((id) => {\n          const { name, ticker, names } = tokens[id];\n          return { id, name: name ?? '', ticker: ticker ?? '', names };\n        })\n        .filter((n) => !!n);\n      if (!filteredResults.length) {\n        throw new Error('No ANT tokens found for that search');\n      }\n\n      setFilteredTokens(filteredResults);\n    } catch (error) {\n      setFilteredTokens(undefined);\n    } finally {\n      setSearching(false);\n      setListPage(1);\n    }\n  }\n\n  function handleSetToken({\n    id,\n    name,\n    ticker,\n    names,\n  }: {\n    id?: string;\n    name?: string;\n    ticker?: string;\n    names: string[];\n  }) {\n    try {\n      setSearchText('');\n      setFilteredTokens(undefined);\n\n      if (id === undefined) {\n        throw new Error(`No ID provided for ${name ?? ticker ?? ''}`);\n      }\n      setSelectedToken({ id, name: name ?? '', ticker: ticker ?? '', names });\n      selectedTokenCallback(new ArweaveTransactionID(id));\n      setListPage(1);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    } finally {\n      setSearchActive(false);\n    }\n  }\n\n  const customPreviousAndNextButtons: PaginationProps['itemRender'] = (\n    page,\n    type,\n    originalElement,\n  ) => {\n    if (!tokens) {\n      return;\n    }\n    if (type === 'next' || type === 'prev') {\n      return;\n    }\n    if (type === 'page') {\n      return (\n        <span\n          className=\"flex flex-row hover center\"\n          style={{\n            color: listPage == page ? 'white' : 'var(--text-grey)',\n            width: '32px',\n          }}\n        >\n          {page}\n        </span>\n      );\n    }\n    return originalElement;\n  };\n\n  function updatePage(page: number) {\n    setListPage(page);\n  }\n\n  return (\n    <div\n      ref={listRef}\n      className=\"flex flex-column radius\"\n      style={{\n        position: 'relative',\n        height: 'fit-content',\n        maxHeight: '400px',\n        border:\n          isFocused || searchActive\n            ? `1px solid var(--text-white)`\n            : `1px solid var(--text-faded)`,\n        gap: 0,\n      }}\n    >\n      {/* input wrapper */}\n      <div\n        className=\"name-token-input-wrapper\"\n        style={{ borderBottom: '1px solid var(--text-faded)' }}\n      >\n        <ValidationInput\n          inputId=\"name-token-input\"\n          onClick={() => setSearchActive(true)}\n          showValidationIcon={validImport !== undefined}\n          setValue={(v) =>\n            handleTokenSearch(\n              v.length === SMARTWEAVE_MAX_INPUT_SIZE ? v.trim() : v,\n            )\n          }\n          value={searchText ?? ''}\n          maxCharLength={SMARTWEAVE_MAX_INPUT_SIZE}\n          placeholder={\n            selectedToken\n              ? selectedToken.name?.length\n                ? selectedToken.name\n                : selectedToken.id\n              : 'Add an Arweave Name Token (ANT)'\n          }\n          validationPredicates={{\n            [VALIDATION_INPUT_TYPES.SMARTWEAVE_CONTRACT]: {\n              fn: (id: string) =>\n                arweaveDataProvider.validateTransactionTags({\n                  id,\n                  requiredTags: {\n                    'App-Name': ['SmartWeaveContract'],\n                  },\n                }),\n            },\n            [VALIDATION_INPUT_TYPES.TRANSACTION_CONFIRMATIONS]: {\n              fn: (id: string) => arweaveDataProvider.validateConfirmations(id),\n            },\n          }}\n          validityCallback={(validity) => validity}\n          wrapperCustomStyle={{\n            width: '100%',\n            hieght: '45px',\n            borderRadius: '0px',\n            backgroundColor: 'var(--card-bg)',\n            boxSizing: 'border-box',\n            paddingLeft: '10px',\n          }}\n          inputClassName={`white ${\n            selectedToken ? 'name-token-input-selected' : 'name-token-input'\n          }`}\n        />\n        <span\n          className={`flex flex-row text grey flex-center ${\n            selectedToken ? 'bold' : ''\n          } hover`}\n          style={{\n            width: 'fit-content',\n            height: 'fit-content',\n            wordBreak: 'keep-all',\n          }}\n        >\n          {loading || searching ? (\n            <Loader size={20} color=\"var(--text-white)\" />\n          ) : searchText && validImport === false ? (\n            <></>\n          ) : searchText &&\n            isArweaveTransactionID(searchText) &&\n            !Object.keys(tokens ?? []).includes(searchText) ? (\n            <button\n              className=\"outline-button flex flex-row center pointer\"\n              style={{\n                borderRadius: '50px',\n                width: 'fit-content',\n                padding: '3px 6px',\n                fontSize: '12px',\n                minWidth: 'fit-content',\n                border: '1px solid var(--text-grey)',\n              }}\n              onClick={() => {\n                getTokenList(walletAddress, [\n                  new ArweaveTransactionID(searchText),\n                ]);\n              }}\n            >\n              Import\n            </button>\n          ) : selectedToken ? (\n            <button\n              className=\"outline-button flex flex-row center pointer\"\n              style={{\n                gap: '3px',\n                borderRadius: '50px',\n                width: 'fit-content',\n                padding: '3px 7px',\n                fontSize: '12px',\n                minWidth: 'fit-content',\n                border: '1px solid var(--text-grey)',\n              }}\n              onClick={() => {\n                setSelectedToken(undefined);\n                selectedTokenCallback(undefined);\n              }}\n            >\n              <CloseIcon width={'13px'} height={'13px'} />\n              Remove\n            </button>\n          ) : (\n            <Tooltip\n              placement={'right'}\n              autoAdjustOverflow={true}\n              arrow={false}\n              overlayInnerStyle={{\n                width: '190px',\n                color: 'var(--text-black)',\n                textAlign: 'center',\n                fontFamily: 'Rubik-Bold',\n                fontSize: '14px',\n                backgroundColor: 'var(--text-white)',\n                padding: '15px',\n              }}\n              title={\n                'You can import an ANT by entering its contract ID, or search for one of your own by name, ticker, owner, or controller status, as well is its own contract ID'\n              }\n            >\n              Optional\n            </Tooltip>\n          )}\n        </span>\n      </div>\n      {/* selector dropdown */}\n      {tokens && searchActive ? (\n        <div\n          className=\"flex flex-column\"\n          style={{\n            alignItems: 'flex-start',\n            justifyContent: 'flex-start',\n            gap: 0,\n            height: 'fit-content',\n            width: '100%',\n            backgroundColor: 'var(--card-bg)',\n            boxSizing: 'border-box',\n            zIndex: 10,\n          }}\n        >\n          {searchText && !filteredTokens?.length ? (\n            <span\n              className=\"text-large center\"\n              style={{\n                color: '#444547',\n                margin: 'auto',\n                height: '50px',\n              }}\n            >\n              No Results\n            </span>\n          ) : filteredTokens ? (\n            filteredTokens\n              .slice(\n                Math.max((listPage - 1) * listItemCount, 0),\n                listPage * listItemCount,\n              )\n              .map((token, index) => {\n                if (!token) {\n                  return;\n                }\n\n                return (\n                  <button\n                    key={index}\n                    className=\"name-token-item pointer\"\n                    onClick={() => {\n                      handleSetToken({\n                        id: token.id,\n                        name: token.name ?? '',\n                        ticker: token.ticker ?? '',\n                        names: token.names ?? [],\n                      });\n                    }}\n                  >\n                    {token.name && token.ticker\n                      ? `${token.name.slice(0, 20)} (${token.ticker}) - ${\n                          token.id\n                        }`\n                      : token.id}\n                    {token.names?.length ? (\n                      <Tooltip\n                        key={index}\n                        title={\n                          <div\n                            className=\"flex flex-column\"\n                            style={{\n                              padding: '5px',\n                              gap: '5px',\n                              boxSizing: 'border-box',\n                            }}\n                          >\n                            {token.names.map((name) => (\n                              <span key={name}>{name}</span>\n                            ))}\n                          </div>\n                        }\n                        color=\"var(--card-bg)\"\n                        placement=\"top\"\n                        showArrow={true}\n                      >\n                        <HamburgerOutlineIcon\n                          width={20}\n                          height={20}\n                          fill=\"var(--text-grey)\"\n                        />{' '}\n                      </Tooltip>\n                    ) : (\n                      <></>\n                    )}\n                  </button>\n                );\n              })\n          ) : (\n            Object.entries(tokens)\n              .slice(\n                Math.max((listPage - 1) * listItemCount, 0),\n                listPage * listItemCount,\n              )\n              .map((token, index) => {\n                if (!token) {\n                  return;\n                }\n                const [id, details] = token;\n                const { name, ticker, names } = details;\n\n                return (\n                  <button\n                    key={index}\n                    className=\"name-token-item pointer\"\n                    onClick={() => {\n                      handleSetToken({\n                        id,\n                        name: name ?? '',\n                        ticker: ticker ?? '',\n                        names: names ?? [],\n                      });\n                    }}\n                  >\n                    {name && ticker\n                      ? `${name.slice(0, 20)} ${\n                          name.length > 20 ? '...' : ''\n                        } (${ticker}) - ${id}`\n                      : id}\n                    {names?.length ? (\n                      <Tooltip\n                        title={\n                          <div\n                            className=\"flex flex-column\"\n                            style={{\n                              padding: '5px',\n                              boxSizing: 'border-box',\n                            }}\n                          >\n                            {names.map((name) => (\n                              <span key={name}>{name}</span>\n                            ))}\n                          </div>\n                        }\n                        color=\"var(--card-bg)\"\n                        placement=\"top\"\n                        showArrow={true}\n                      >\n                        <HamburgerOutlineIcon\n                          width={20}\n                          height={20}\n                          fill=\"var(--text-grey)\"\n                        />{' '}\n                      </Tooltip>\n                    ) : (\n                      <></>\n                    )}\n                  </button>\n                );\n              })\n          )}\n          <div\n            className=\"custom-next-pagination flex flex-column\"\n            style={{\n              padding: '10px 25px',\n              boxSizing: 'border-box',\n              width: '100%',\n              justifyContent: 'flex-start',\n            }}\n          >\n            {tokens.length || filteredTokens?.length || !searchText ? (\n              <Pagination\n                total={\n                  Object.keys(tokens).length && !filteredTokens\n                    ? Object.keys(tokens).length\n                    : filteredTokens\n                    ? filteredTokens.length\n                    : 0\n                }\n                itemRender={customPreviousAndNextButtons}\n                showPrevNextJumpers={true}\n                showSizeChanger={false}\n                showQuickJumper={false}\n                onChange={updatePage}\n                current={listPage}\n                defaultPageSize={listItemCount}\n              />\n            ) : (\n              <></>\n            )}{' '}\n          </div>\n        </div>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n\nexport default NameTokenSelector;\n","import { CheckCircleFilled } from '@ant-design/icons';\nimport { InsufficientFundsError, ValidationError } from '@src/utils/errors';\nimport { Tooltip } from 'antd';\nimport emojiRegex from 'emoji-regex';\nimport { useEffect, useState } from 'react';\nimport {\n  Link,\n  useNavigate,\n  useParams,\n  useSearchParams,\n} from 'react-router-dom';\n\nimport {\n  useAuctionInfo,\n  useIsFocused,\n  useRegistrationStatus,\n} from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport { useRegistrationState } from '../../../state/contexts/RegistrationState';\nimport { useTransactionState } from '../../../state/contexts/TransactionState';\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport {\n  BuyRecordPayload,\n  INTERACTION_NAMES,\n  INTERACTION_TYPES,\n  TRANSACTION_TYPES,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport {\n  encodeDomainToASCII,\n  formatDate,\n  isArweaveTransactionID,\n  lowerCaseDomain,\n  userHasSufficientBalance,\n} from '../../../utils';\nimport {\n  ARNS_REGISTRY_ADDRESS,\n  ATOMIC_FLAG,\n  MAX_LEASE_DURATION,\n  MIN_LEASE_DURATION,\n  SMARTWEAVE_TAG_SIZE,\n} from '../../../utils/constants';\nimport eventEmitter from '../../../utils/events';\nimport { LockIcon } from '../../icons';\nimport Counter from '../../inputs/Counter/Counter';\nimport WorkflowButtons from '../../inputs/buttons/WorkflowButtons/WorkflowButtons';\nimport NameTokenSelector from '../../inputs/text/NameTokenSelector/NameTokenSelector';\nimport ValidationInput from '../../inputs/text/ValidationInput/ValidationInput';\nimport Loader from '../../layout/Loader/Loader';\nimport TransactionCost from '../../layout/TransactionCost/TransactionCost';\nimport { StepProgressBar } from '../../layout/progress';\nimport PageLoader from '../../layout/progress/PageLoader/PageLoader';\nimport './styles.css';\n\nfunction RegisterNameForm() {\n  const [\n    { domain, fee, leaseDuration, registrationType, antID, targetId },\n    dispatchRegisterState,\n  ] = useRegistrationState();\n  const [{ blockHeight, arweaveDataProvider, ioTicker }, dispatchGlobalState] =\n    useGlobalState();\n  const [{ walletAddress, balances }] = useWalletState();\n  const [, dispatchTransactionState] = useTransactionState();\n  const { name } = useParams();\n  const { auction, loadingAuctionInfo } = useAuctionInfo(\n    lowerCaseDomain(name ?? domain),\n    registrationType,\n  );\n  const { loading: isValidatingRegistration } = useRegistrationStatus(\n    name ?? domain,\n  );\n  const [newTargetId, setNewTargetId] = useState<string>();\n  const targetIdFocused = useIsFocused('target-id-input');\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [hasValidationErrors, setHasValidationErrors] =\n    useState<boolean>(false);\n  const ioFee = fee?.[ioTicker];\n  const feeError = ioFee && ioFee < 0;\n\n  useEffect(() => {\n    const redirect = searchParams.get('redirect');\n    if (redirect && name) {\n      if (!balances[ioTicker]) return;\n      setSearchParams();\n      handleNext();\n      return;\n    }\n  }, [balances, fee]);\n\n  useEffect(() => {\n    if (!blockHeight) {\n      arweaveDataProvider.getCurrentBlockHeight().then((height) => {\n        dispatchGlobalState({\n          type: 'setBlockHeight',\n          payload: height,\n        });\n      });\n    }\n    if (!loadingAuctionInfo && auction) {\n      dispatchRegisterState({\n        type: 'setRegistrationType',\n        payload: auction.type,\n      });\n    }\n  }, [loadingAuctionInfo, domain]);\n\n  useEffect(() => {\n    if (name && domain !== name) {\n      dispatchRegisterState({\n        type: 'setDomainName',\n        payload: name,\n      });\n    }\n    if (\n      auction &&\n      (auction.isRequiredToBeAuctioned || auction.isActive) &&\n      domain &&\n      blockHeight\n    ) {\n      dispatchRegisterState({\n        type: 'setFee',\n        payload: { ar: fee.ar, [ioTicker]: auction.currentPrice },\n      });\n    } else {\n      if (!auction) {\n        return;\n      }\n      const update = async () => {\n        if (domain) {\n          try {\n            dispatchRegisterState({\n              type: 'setFee',\n              payload: { ar: fee.ar, [ioTicker]: undefined },\n            });\n            const gas = await arweaveDataProvider.getArPrice(\n              SMARTWEAVE_TAG_SIZE,\n            );\n            const price = await arweaveDataProvider\n              .getPriceForInteraction({\n                interactionName: INTERACTION_NAMES.BUY_RECORD,\n                payload: {\n                  name: domain,\n                  years: leaseDuration,\n                  type: auction.type,\n                  contractTxId: ATOMIC_FLAG,\n                },\n              })\n              .catch(() => {\n                throw new Error('Unable to get purchase price for domain');\n              });\n            dispatchRegisterState({\n              type: 'setFee',\n              payload: { ar: gas, [ioTicker]: price },\n            });\n          } catch (e) {\n            eventEmitter.emit('error', e);\n          }\n        }\n      };\n      update();\n    }\n  }, [leaseDuration, domain, auction]);\n\n  async function handleANTId(id: string) {\n    try {\n      const txId = new ArweaveTransactionID(id.toString());\n      dispatchRegisterState({\n        type: 'setANTID',\n        payload: txId,\n      });\n\n      const contract = await arweaveDataProvider.buildANTContract(txId);\n\n      if (!contract.isValid()) {\n        throw Error('ANT contract state does not match required schema.');\n      }\n    } catch (error: any) {\n      console.error(error);\n    }\n  }\n\n  if (!registrationType) {\n    return <Loader size={80} />;\n  }\n\n  async function handleNext() {\n    try {\n      // validate transaction cost, return if insufficient balance and emit validation message\n      if (!walletAddress) {\n        const redirectParams = new URLSearchParams({ redirect: 'true' });\n        navigate('/connect', {\n          state: {\n            to: `/register/${domain}?${redirectParams.toString()}`,\n            from: `/register/${domain}`,\n          },\n        });\n        return;\n      }\n\n      const balanceErrors = userHasSufficientBalance<{\n        [x: string]: number;\n        AR: number;\n      }>({\n        balances: { AR: balances.ar, [ioTicker]: balances[ioTicker] },\n        costs: { AR: fee.ar, [ioTicker]: fee[ioTicker] } as {\n          [x: string]: number;\n          AR: number;\n        },\n      });\n\n      if (balanceErrors.length) {\n        balanceErrors.forEach((error: any) => {\n          eventEmitter.emit('error', new InsufficientFundsError(error.message));\n        });\n        return;\n      }\n\n      if (feeError) throw new Error('Issue calculating transaction cost.');\n      if (hasValidationErrors) {\n        throw new ValidationError(\n          'Please fix the errors above before continuing.',\n        );\n      }\n    } catch (error: any) {\n      eventEmitter.emit('error', error);\n      return;\n    }\n\n    const leaseDurationType = auction?.isRequiredToBeAuctioned\n      ? 1\n      : leaseDuration;\n    const buyRecordPayload: BuyRecordPayload = {\n      name:\n        domain && emojiRegex().test(domain)\n          ? encodeDomainToASCII(domain)\n          : domain,\n      contractTxId: antID ? antID.toString() : ATOMIC_FLAG,\n      // TODO: move this to a helper function\n      years:\n        registrationType === TRANSACTION_TYPES.LEASE\n          ? leaseDurationType\n          : undefined,\n      type: registrationType,\n      auction: (auction?.isRequiredToBeAuctioned || auction?.isActive) ?? false,\n      isBid: auction?.isActive ?? false,\n      targetId,\n    };\n\n    dispatchTransactionState({\n      type: 'setTransactionData',\n      payload: {\n        assetId: ARNS_REGISTRY_ADDRESS.toString(),\n        functionName: 'buyRecord',\n        ...buyRecordPayload,\n        interactionPrice: fee?.[ioTicker],\n      },\n    });\n    dispatchTransactionState({\n      type: 'setInteractionType',\n      payload: INTERACTION_TYPES.BUY_RECORD,\n    });\n    dispatchRegisterState({\n      type: 'reset',\n    });\n    // navigate to the transaction page, which will load the updated state of the transaction context\n    navigate('/transaction', {\n      state: `/register/${domain}`,\n    });\n  }\n\n  return (\n    <div className=\"page center\">\n      <PageLoader\n        message={'Loading Domain info, please wait.'}\n        loading={loadingAuctionInfo || isValidatingRegistration}\n      />\n      <div\n        className=\"flex flex-column flex-center\"\n        style={{\n          maxWidth: '900px',\n          width: '100%',\n          padding: '0px',\n          margin: '50px',\n          gap: '80px',\n          boxSizing: 'border-box',\n        }}\n      >\n        <div\n          className=\"flex flex-row flex-center\"\n          style={{\n            paddingBottom: '40px',\n            borderBottom: 'solid 1px var(--text-faded)',\n          }}\n        >\n          <StepProgressBar\n            stages={[\n              { title: 'Choose', description: 'Pick a name', status: 'finish' },\n              {\n                title: 'Configure',\n                description: 'Registration Period',\n                status: 'process',\n              },\n              {\n                title: 'Confirm',\n                description: 'Review transaction',\n                status: 'wait',\n              },\n            ]}\n            stage={1}\n          />\n        </div>\n\n        <span\n          className=\"text-medium white center\"\n          style={{ fontWeight: '500px', fontSize: '23px', gap: '15px' }}\n        >\n          <span style={{ color: 'var(--success-green)' }}>\n            {domain} <span className={'white'}>is available!</span>\n          </span>{' '}\n          <CheckCircleFilled\n            style={{ fontSize: '20px', color: 'var(--success-green)' }}\n          />\n        </span>\n        <div className=\"flex flex-column flex-center\">\n          <div\n            className=\"flex flex-column flex-center\"\n            style={{\n              width: '100%',\n              height: 'fit-content',\n              gap: '25px',\n            }}\n          >\n            <div\n              className=\"flex flex-row flex-space-between\"\n              style={{ gap: '25px' }}\n            >\n              <button\n                className=\"flex flex-row center text-medium bold pointer\"\n                // TODO: add a tool tip explaining why when it is an active auction you cannot change the type\n                disabled={\n                  auction?.isActive &&\n                  registrationType === TRANSACTION_TYPES.BUY\n                }\n                onClick={() =>\n                  dispatchRegisterState({\n                    type: 'setRegistrationType',\n                    payload: TRANSACTION_TYPES.LEASE,\n                  })\n                }\n                style={{\n                  position: 'relative',\n                  background:\n                    registrationType === TRANSACTION_TYPES.LEASE\n                      ? 'var(--text-white)'\n                      : '',\n                  color:\n                    registrationType === TRANSACTION_TYPES.LEASE\n                      ? 'var(--text-black)'\n                      : 'var(--text-white)',\n                  border: 'solid 2px var(--text-faded)',\n                  borderRadius: 'var(--corner-radius)',\n                  height: '56px',\n                  borderBottomWidth: '0.5px',\n                }}\n              >\n                Lease{' '}\n                {(registrationType === TRANSACTION_TYPES.LEASE ||\n                  auction?.type === TRANSACTION_TYPES.LEASE) &&\n                auction?.isActive ? (\n                  <LockIcon\n                    width={'20px'}\n                    height={'20px'}\n                    fill={'var(--text-black)'}\n                    style={{ position: 'absolute', right: '20px' }}\n                  />\n                ) : (\n                  <></>\n                )}\n                {registrationType === TRANSACTION_TYPES.LEASE ? (\n                  <div\n                    style={{\n                      position: 'absolute',\n                      bottom: '-6px',\n                      left: '50%',\n                      transform: 'rotate(45deg)',\n                      width: '11px',\n                      height: '11px',\n                      background: 'var(--text-white)',\n                    }}\n                  ></div>\n                ) : (\n                  <></>\n                )}\n              </button>\n              <button\n                className=\"flex flex-row center text-medium bold pointer\"\n                // TODO: add a tool tip explaining why when it is an active auction you cannot change the type\n                disabled={\n                  auction?.isActive &&\n                  registrationType === TRANSACTION_TYPES.LEASE\n                }\n                style={{\n                  position: 'relative',\n                  background:\n                    registrationType === TRANSACTION_TYPES.BUY\n                      ? 'var(--text-white)'\n                      : '',\n                  color:\n                    registrationType === TRANSACTION_TYPES.BUY\n                      ? 'var(--text-black)'\n                      : 'var(--text-white)',\n                  border: 'solid 2px var(--text-faded)',\n                  borderRadius: 'var(--corner-radius)',\n                  height: '56px',\n                  borderBottomWidth: '0.5px',\n                }}\n                onClick={() =>\n                  dispatchRegisterState({\n                    type: 'setRegistrationType',\n                    payload: TRANSACTION_TYPES.BUY,\n                  })\n                }\n              >\n                Buy{' '}\n                {(registrationType === TRANSACTION_TYPES.BUY ||\n                  auction?.type === TRANSACTION_TYPES.BUY) &&\n                auction?.isActive ? (\n                  <LockIcon\n                    width={'20px'}\n                    height={'20px'}\n                    fill={'var(--text-black)'}\n                    style={{ position: 'absolute', right: '20px' }}\n                  />\n                ) : (\n                  <></>\n                )}\n                {registrationType === TRANSACTION_TYPES.BUY ? (\n                  <div\n                    style={{\n                      position: 'absolute',\n                      bottom: -6,\n                      left: '50%',\n                      transform: 'rotate(45deg)',\n                      width: '11px',\n                      height: '11px',\n                      background: 'var(--text-white)',\n                    }}\n                  ></div>\n                ) : (\n                  <></>\n                )}\n              </button>\n            </div>\n\n            <div\n              className=\"flex flex-column flex-center card\"\n              style={{\n                width: '100%',\n                minHeight: '0px',\n                height: 'fit-content',\n                maxWidth: 'unset',\n                padding: '35px',\n                boxSizing: 'border-box',\n                borderTopWidth: '0.2px',\n                borderRadius: 'var(--corner-radius)',\n                justifyContent: 'flex-start',\n              }}\n            >\n              {registrationType === TRANSACTION_TYPES.LEASE ? (\n                <Counter\n                  value={leaseDuration}\n                  setValue={(v: number) => {\n                    dispatchRegisterState({\n                      type: 'setLeaseDuration',\n                      payload: v,\n                    });\n                  }}\n                  // TODO: move this to a helper function\n                  minValue={\n                    auction?.isActive || auction?.isRequiredToBeAuctioned\n                      ? 1\n                      : MIN_LEASE_DURATION\n                  }\n                  maxValue={\n                    auction?.isActive || auction?.isRequiredToBeAuctioned\n                      ? 1\n                      : MAX_LEASE_DURATION\n                  }\n                  valueStyle={{ padding: '20px 120px' }}\n                  valueName={leaseDuration > 1 ? 'years' : 'year'}\n                  detail={`Until ${formatDate(\n                    Date.now() + leaseDuration * 365 * 24 * 60 * 60 * 1000,\n                  )}`}\n                  title={\n                    <span\n                      className=\"white\"\n                      style={{\n                        padding: '0px 10px 10px 10px',\n                        fontWeight: '500',\n                      }}\n                    >{`Registration period (between ${MIN_LEASE_DURATION}-${MAX_LEASE_DURATION} years)`}</span>\n                  }\n                />\n              ) : registrationType === TRANSACTION_TYPES.BUY ? (\n                <div\n                  className=\"flex flex-column flex-center\"\n                  style={{ gap: '1em' }}\n                >\n                  <span className=\"text-medium grey center\">\n                    Registration Period\n                  </span>\n                  <span className=\"text-medium white center\">Permanent</span>\n                </div>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-column\" style={{ gap: '1em' }}>\n            <NameTokenSelector\n              selectedTokenCallback={(id) =>\n                id\n                  ? handleANTId(id.toString())\n                  : dispatchRegisterState({\n                      type: 'setANTID',\n                      payload: undefined,\n                    })\n              }\n            />\n            <div\n              className=\"name-token-input-wrapper\"\n              style={{\n                border:\n                  targetIdFocused || newTargetId\n                    ? 'solid 1px var(--text-white)'\n                    : 'solid 1px var(--text-faded)',\n                position: 'relative',\n              }}\n            >\n              <ValidationInput\n                inputId={'target-id-input'}\n                value={newTargetId ?? ''}\n                setValue={(v: string) => {\n                  setNewTargetId(v.trim());\n                  if (isArweaveTransactionID(v.trim())) {\n                    dispatchRegisterState({\n                      type: 'setTargetId',\n                      payload: new ArweaveTransactionID(v.trim()),\n                    });\n                  }\n                  if (v.trim().length === 0) {\n                    setHasValidationErrors(false);\n                  }\n                }}\n                wrapperCustomStyle={{\n                  width: '100%',\n                  hieght: '45px',\n                  borderRadius: '0px',\n                  backgroundColor: 'var(--card-bg)',\n                  boxSizing: 'border-box',\n                }}\n                inputClassName={`white name-token-input`}\n                inputCustomStyle={{\n                  paddingLeft: '10px',\n                  background: 'transparent',\n                }}\n                maxCharLength={43}\n                placeholder={'Arweave Transaction ID (Target ID)'}\n                validationPredicates={{\n                  [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                    fn: (id: string) =>\n                      arweaveDataProvider.validateArweaveId(id),\n                  },\n                }}\n                showValidationChecklist={false}\n                showValidationIcon={true}\n                validityCallback={(validity: boolean) => {\n                  setHasValidationErrors(!validity);\n                }}\n              />\n              <span className=\"grey pointer hover\" style={{ fontSize: '12px' }}>\n                <Tooltip\n                  placement={'right'}\n                  autoAdjustOverflow={true}\n                  arrow={false}\n                  overlayInnerStyle={{\n                    width: '190px',\n                    color: 'var(--text-black)',\n                    textAlign: 'center',\n                    fontFamily: 'Rubik-Bold',\n                    fontSize: '14px',\n                    backgroundColor: 'var(--text-white)',\n                    padding: '15px',\n                  }}\n                  title={\n                    'The Target ID is the arweave ID that will be resolved by the ArNS name.'\n                  }\n                >\n                  Optional\n                </Tooltip>\n              </span>\n            </div>\n            <TransactionCost\n              ioRequired={true}\n              fee={fee}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n            />\n            {domain &&\n            auction &&\n            auction.isRequiredToBeAuctioned &&\n            fee?.[ioTicker] ? (\n              <div\n                className=\"flex flex-row warning-container\"\n                style={{\n                  gap: '1em',\n                  justifyContent: 'flex-start',\n                  alignItems: 'flex-start',\n                  boxSizing: 'border-box',\n                  position: 'relative',\n                }}\n              >\n                <span\n                  className=\"flex flex-column\"\n                  style={{ textAlign: 'left', fontSize: '13px', gap: '1em' }}\n                >\n                  Buying this name involves a Dutch auction. You start by\n                  bidding at the floor price of{' '}\n                  {fee?.[ioTicker]?.toLocaleString()} {ioTicker}. The\n                  name&apos;s price begins at 10 times your bid and decreases\n                  over 2 weeks until it matches your bid, securing your win. You\n                  can also buy instantly at the ongoing price throughout the\n                  auction; if someone else does, you will lose the auction and\n                  have your initial bid returned.\n                  <Link\n                    to=\"https://docs.ar.io/arns/#bid-initiated-dutch-auctions-bida\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                    className=\"link\"\n                    style={{ textDecoration: 'underline', color: 'inherit' }}\n                  >\n                    Learn more.\n                  </Link>\n                </span>\n              </div>\n            ) : (\n              <></>\n            )}{' '}\n            <div style={{ marginTop: '30px' }}>\n              <WorkflowButtons\n                nextText=\"Next\"\n                backText=\"Back\"\n                onNext={handleNext}\n                onBack={() => navigate('/', { state: `/register/${domain}` })}\n                customNextStyle={{ width: '100px' }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RegisterNameForm;\n"],"names":["SvgLock","props","reactExports","NameTokenSelector","selectedTokenCallback","arweaveDataProvider","useGlobalState","walletAddress","useWalletState","searchText","setSearchText","tokens","setTokens","loading","setLoading","filteredTokens","setFilteredTokens","selectedToken","setSelectedToken","searching","setSearching","searchActive","setSearchActive","validImport","setValidImport","isFocused","useIsFocused","listRef","listPage","setListPage","listItemCount","ArweaveTransactionID","getTokenList","handleClickOutside","e","address","imports","fetchedContractTxIds","validImports","id","state","ANTContract","error","eventEmitter","ids","contractTxIds","associatedRecords","contracts","contractTxId","contract","names","acc","newTokens","result","owner","controller","name","ticker","details","handleTokenSearch","query","filteredResults","term","n","handleSetToken","customPreviousAndNextButtons","page","type","originalElement","jsxRuntimeExports","updatePage","ValidationInput","v","SMARTWEAVE_MAX_INPUT_SIZE","_a","VALIDATION_INPUT_TYPES","validity","Loader","isArweaveTransactionID","SvgClose","Tooltip","token","index","SvgHamburgerOutline","name2","Pagination","RegisterNameForm","domain","fee","leaseDuration","registrationType","antID","targetId","dispatchRegisterState","useRegistrationState","blockHeight","ioTicker","dispatchGlobalState","balances","dispatchTransactionState","useTransactionState","useParams","auction","loadingAuctionInfo","useAuctionInfo","lowerCaseDomain","isValidatingRegistration","useRegistrationStatus","newTargetId","setNewTargetId","targetIdFocused","navigate","useNavigate","searchParams","setSearchParams","useSearchParams","hasValidationErrors","setHasValidationErrors","ioFee","feeError","handleNext","height","gas","SMARTWEAVE_TAG_SIZE","price","INTERACTION_NAMES","ATOMIC_FLAG","handleANTId","txId","redirectParams","balanceErrors","userHasSufficientBalance","InsufficientFundsError","ValidationError","leaseDurationType","buyRecordPayload","emojiRegex","encodeDomainToASCII","TRANSACTION_TYPES","ARNS_REGISTRY_ADDRESS","INTERACTION_TYPES","PageLoader","StepProgressBar","CheckCircleFilled","Counter","MIN_LEASE_DURATION","MAX_LEASE_DURATION","formatDate","TransactionCost","Link","WorkflowButtons"],"mappings":"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"}
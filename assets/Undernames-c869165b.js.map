{"version":3,"file":"Undernames-c869165b.js","sources":["../../src/components/icons/Trash.svg","../../node_modules/lucide-react/dist/esm/icons/plus.js","../../src/components/modals/ant-management/AddUndernameModal/AddUndernameModal.tsx","../../src/components/data-display/tables/UndernamesTable.tsx","../../src/components/pages/Undernames/Undernames.tsx"],"sourcesContent":["export default \"__VITE_ASSET__f0987060__\"","/**\n * @license lucide-react v0.438.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Plus = createLucideIcon(\"Plus\", [\n  [\"path\", { d: \"M5 12h14\", key: \"1ays0h\" }],\n  [\"path\", { d: \"M12 5v14\", key: \"s699le\" }]\n]);\n\nexport { Plus as default };\n//# sourceMappingURL=plus.js.map\n","import { AoArNSNameData } from '@ar.io/sdk/web';\nimport { useArNSRegistryDomains } from '@src/hooks/useArNSRegistryDomains';\nimport { Tooltip } from 'antd';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useIsMobile } from '../../../../hooks';\nimport { SetRecordPayload, VALIDATION_INPUT_TYPES } from '../../../../types';\nimport {\n  isArweaveTransactionID,\n  isUndernameValid,\n  validateNoLeadingOrTrailingDashes,\n  validateNoSpecialCharacters,\n  validateTTLSeconds,\n} from '../../../../utils';\nimport {\n  ARNS_TX_ID_ENTRY_REGEX,\n  LANDING_PAGE_TXID,\n  MAX_TTL_SECONDS,\n  MAX_UNDERNAME_LENGTH,\n  MIN_TTL_SECONDS,\n  UNDERNAME_REGEX,\n} from '../../../../utils/constants';\nimport eventEmitter from '../../../../utils/events';\nimport WarningCard from '../../../cards/WarningCard/WarningCard';\nimport ValidationInput from '../../../inputs/text/ValidationInput/ValidationInput';\nimport DialogModal from '../../DialogModal/DialogModal';\n\nfunction AddUndernameModal({\n  antId,\n  closeModal,\n  payloadCallback,\n}: {\n  antId: string; // process ID if asset type is a contract interaction\n  closeModal: () => void;\n  payloadCallback: (payload: SetRecordPayload) => void;\n}) {\n  const { data: registeredDomains } = useArNSRegistryDomains();\n  const isMobile = useIsMobile();\n\n  const targetIdRef = useRef<HTMLInputElement>(null);\n  const ttlRef = useRef<HTMLInputElement>(null);\n  const nameRef = useRef<HTMLInputElement>(null);\n  const [undername, setUndername] = useState<string>('');\n  const [targetId, setTargetId] = useState<string>(\n    LANDING_PAGE_TXID.toString(),\n  );\n  const [ttlSeconds, setTtlSeconds] = useState<number>(MIN_TTL_SECONDS);\n  const [associatedRecords, setAssociatedRecords] = useState<\n    Record<string, AoArNSNameData>\n  >({});\n  const [maxUndernameLength, setMaxUndernameLength] =\n    useState<number>(MAX_UNDERNAME_LENGTH);\n\n  useEffect(() => {\n    if (registeredDomains) {\n      const arnsRecords = registeredDomains?.items?.reduce(\n        (acc: Record<string, AoArNSNameData>, record) => {\n          if (record.processId == antId.toString()) {\n            acc[record.name] = record;\n          }\n          return acc;\n        },\n        {},\n      );\n      loadDetails({ arnsRecords });\n    }\n    nameRef.current?.focus();\n  }, [antId.toString(), registeredDomains]);\n\n  async function loadDetails({\n    arnsRecords,\n  }: {\n    arnsRecords: Record<string, AoArNSNameData>;\n  }) {\n    try {\n      setAssociatedRecords(arnsRecords);\n      const shortestAssociatedName = Object.keys(arnsRecords).length\n        ? Math.min(...Object.keys(arnsRecords).map((name) => name.length))\n        : 0;\n      setMaxUndernameLength(MAX_UNDERNAME_LENGTH - shortestAssociatedName);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    }\n  }\n\n  function handlePayloadCallback() {\n    payloadCallback({\n      subDomain: undername,\n      transactionId: targetId,\n      ttlSeconds,\n    });\n  }\n\n  function getIncompatibleNames(\n    undername: string,\n    records: Record<string, AoArNSNameData>,\n  ): string[] {\n    return Object.keys(records).filter(\n      (name: string) => undername.length + name.length > MAX_UNDERNAME_LENGTH,\n    );\n  }\n\n  return (\n    <div\n      className=\"modal-container\"\n      style={isMobile ? { padding: 'none' } : {}}\n    >\n      {/**modal header */}\n      <DialogModal\n        title={<h2 className=\"white text-xl\">Add Undername</h2>}\n        body={\n          <form>\n            <div\n              className=\"flex flex-column\"\n              style={{ fontSize: '14px', width: '500px' }}\n            >\n              <div\n                className=\"flex flex-column\"\n                style={{ paddingBottom: '30px' }}\n              >\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">Undername:</span>\n                  <span\n                    className=\"flex flex-row\"\n                    style={{ position: 'relative' }}\n                  >\n                    <ValidationInput\n                      key={'undername'}\n                      ref={nameRef}\n                      inputClassName=\"name-token-input white\"\n                      inputCustomStyle={{\n                        paddingLeft: '10px',\n                        fontSize: '14px',\n                        paddingRight: '80px',\n                      }}\n                      wrapperCustomStyle={{\n                        width: '100%',\n                        border: '1px solid var(--text-faded)',\n                        borderRadius: 'var(--corner-radius)',\n                      }}\n                      showValidationIcon={true}\n                      showValidationOutline={true}\n                      showValidationChecklist={true}\n                      validationListStyle={{ display: 'none' }}\n                      value={undername}\n                      setValue={(v: string) => setUndername(v)}\n                      catchInvalidInput={false}\n                      maxCharLength={maxUndernameLength}\n                      customPattern={UNDERNAME_REGEX}\n                      validationPredicates={{\n                        [VALIDATION_INPUT_TYPES.UNDERNAME]: {\n                          fn: (name: string) =>\n                            validateNoSpecialCharacters(name),\n                        },\n                        'Dashes and Underscores cannot be leading or trailing':\n                          {\n                            fn: (name) =>\n                              validateNoLeadingOrTrailingDashes(name),\n                          },\n                      }}\n                    />\n                    <span\n                      className=\"flex flex-row grey\"\n                      style={{\n                        position: 'absolute',\n                        top: '0px',\n                        bottom: '0px',\n                        right: undername.length ? '35px' : '10px',\n                        width: 'fit-content',\n                      }}\n                    >\n                      {undername.length} / {maxUndernameLength}\n                    </span>\n                  </span>\n                  {getIncompatibleNames(undername, associatedRecords).length ? (\n                    <WarningCard\n                      text={\n                        <span>\n                          This ANT has{' '}\n                          <Tooltip\n                            title={\n                              <div\n                                className=\"flex flex-column\"\n                                style={{\n                                  padding: '5px',\n                                  gap: '5px',\n                                  boxSizing: 'border-box',\n                                }}\n                              >\n                                {getIncompatibleNames(\n                                  undername,\n                                  associatedRecords,\n                                ).map((name) => (\n                                  <span key={name}>{name}</span>\n                                ))}\n                              </div>\n                            }\n                            color=\"var(--card-bg)\"\n                            placement=\"top\"\n                            showArrow={true}\n                          >\n                            <span className=\"underline bold\">\n                              {\n                                getIncompatibleNames(\n                                  undername,\n                                  associatedRecords,\n                                ).length\n                              }{' '}\n                              name\n                              {getIncompatibleNames(\n                                undername,\n                                associatedRecords,\n                              ).length > 1\n                                ? 's'\n                                : ''}\n                            </span>\n                          </Tooltip>{' '}\n                          that will not support this undername as it is over\n                          their supported length.\n                        </span>\n                      }\n                    />\n                  ) : (\n                    <></>\n                  )}\n                </div>\n\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">Target ID:</span>\n                  <ValidationInput\n                    key={'targetId'}\n                    ref={targetIdRef}\n                    inputClassName=\"name-token-input white\"\n                    inputCustomStyle={{\n                      paddingLeft: '10px',\n                      fontSize: '14px',\n                      paddingRight: '40px',\n                    }}\n                    wrapperCustomStyle={{\n                      position: 'relative',\n                      border: '1px solid var(--text-faded)',\n                      borderRadius: 'var(--corner-radius)',\n                    }}\n                    showValidationIcon={true}\n                    showValidationOutline={true}\n                    showValidationChecklist={true}\n                    validationListStyle={{ display: 'none' }}\n                    maxCharLength={43}\n                    value={targetId}\n                    setValue={setTargetId}\n                    catchInvalidInput={true}\n                    customPattern={ARNS_TX_ID_ENTRY_REGEX}\n                    validationPredicates={{\n                      [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                        fn: async (id: string) => {\n                          if (!isArweaveTransactionID(id)) {\n                            throw new Error('Invalid Arweave ID');\n                          }\n                          return true;\n                        },\n                      },\n                    }}\n                  />\n                </div>\n\n                <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                  <span className=\"grey\">TTL:</span>\n                  <ValidationInput\n                    key={'ttlSeconds'}\n                    ref={ttlRef}\n                    inputClassName=\"name-token-input white\"\n                    inputCustomStyle={{ paddingLeft: '10px', fontSize: '14px' }}\n                    wrapperCustomStyle={{\n                      position: 'relative',\n                      border: '1px solid var(--text-faded)',\n                      borderRadius: 'var(--corner-radius)',\n                      maxWidth: '130px',\n                    }}\n                    showValidationIcon={true}\n                    showValidationOutline={true}\n                    showValidationChecklist={true}\n                    type=\"number\"\n                    minNumber={MIN_TTL_SECONDS}\n                    maxNumber={MAX_TTL_SECONDS}\n                    validationListStyle={{ display: 'none' }}\n                    maxCharLength={MAX_TTL_SECONDS.toString().length}\n                    value={ttlSeconds}\n                    setValue={(v: string) => setTtlSeconds(+v)}\n                    catchInvalidInput={true}\n                    customPattern={\n                      new RegExp(\n                        `^[0-9]{1,${MAX_TTL_SECONDS.toString().length}}$`,\n                      )\n                    }\n                    validationPredicates={{\n                      [VALIDATION_INPUT_TYPES.VALID_TTL]: {\n                        fn: (ttl: string) => validateTTLSeconds(+ttl),\n                      },\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        }\n        onCancel={closeModal}\n        onClose={closeModal}\n        onNext={\n          isArweaveTransactionID(targetId) &&\n          isUndernameValid(undername) &&\n          ttlSeconds >= MIN_TTL_SECONDS &&\n          ttlSeconds <= MAX_TTL_SECONDS\n            ? () => handlePayloadCallback()\n            : undefined\n        }\n        footer={\n          <div className=\"flex\">\n            {/* <TransactionCost\n              fee={{}}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n              showBorder={false}\n            /> */}\n          </div>\n        }\n        nextText=\"Next\"\n        cancelText=\"Cancel\"\n      />\n    </div>\n  );\n}\n\nexport default AddUndernameModal;\n","import { AoANTRecord } from '@ar.io/sdk';\nimport { ExternalLinkIcon, PencilIcon, TrashIcon } from '@src/components/icons';\nimport ArweaveID, {\n  ArweaveIdTypes,\n} from '@src/components/layout/ArweaveID/ArweaveID';\nimport { AddUndernameModal, EditUndernameModal } from '@src/components/modals';\nimport ConfirmTransactionModal from '@src/components/modals/ConfirmTransactionModal/ConfirmTransactionModal';\nimport { ArweaveTransactionID } from '@src/services/arweave/ArweaveTransactionID';\nimport {\n  useGlobalState,\n  useTransactionState,\n  useWalletState,\n} from '@src/state';\nimport dispatchANTInteraction from '@src/state/actions/dispatchANTInteraction';\nimport {\n  ANT_INTERACTION_TYPES,\n  SetRecordPayload,\n  TransactionDataPayload,\n  UNDERNAME_TABLE_ACTIONS,\n  UndernameTableInteractionTypes,\n} from '@src/types';\nimport { camelToReadable, formatForMaxCharCount } from '@src/utils';\nimport eventEmitter from '@src/utils/events';\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table';\nimport Lottie from 'lottie-react';\nimport { Plus } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { ReactNode } from 'react-markdown';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nimport { Tooltip } from '..';\nimport arioLoading from '../../icons/ario-spinner.json';\nimport TableView from './TableView';\n\ninterface TableData {\n  undername: string;\n  targetId: string;\n  ttlSeconds: number;\n  action: ReactNode;\n}\n\nconst columnHelper = createColumnHelper<TableData>();\n\nfunction filterTableData(filter: string, data: TableData[]): TableData[] {\n  const results: TableData[] = [];\n\n  data.forEach((d) => {\n    let matchFound = false;\n\n    Object.entries(d).forEach(([, v]) => {\n      if (typeof v === 'object' && v !== null) {\n        // Recurse into nested objects\n        const nestedResults = filterTableData(filter, [v]);\n        if (nestedResults.length > 0) {\n          matchFound = true;\n        }\n      } else if (v?.toString()?.toLowerCase()?.includes(filter.toLowerCase())) {\n        matchFound = true;\n      }\n    });\n\n    if (matchFound) {\n      results.push(d);\n    }\n  });\n\n  return results;\n}\n\nconst UndernamesTable = ({\n  undernames,\n  arnsDomain,\n  antId,\n  ownershipStatus,\n  filter,\n  refresh,\n  isLoading,\n}: {\n  undernames: Record<string, AoANTRecord>;\n  isLoading?: boolean;\n  arnsDomain?: string;\n  antId?: string;\n  ownershipStatus?: 'owner' | 'controller';\n  filter?: string;\n  refresh?: () => void;\n}) => {\n  const [{ gateway }] = useGlobalState();\n  const [{ wallet, walletAddress }] = useWalletState();\n  const [, dispatchTransactionState] = useTransactionState();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [tableData, setTableData] = useState<Array<TableData>>([]);\n  const [filteredTableData, setFilteredTableData] = useState<Array<TableData>>(\n    [],\n  );\n  // modal state\n  const [action, setAction] = useState<\n    UndernameTableInteractionTypes | undefined\n  >();\n  const [transactionData, setTransactionData] = useState<\n    TransactionDataPayload | undefined\n  >();\n  const [interactionType, setInteractionType] =\n    useState<ANT_INTERACTION_TYPES>();\n  const [selectedUndername, setSelectedUndername] = useState<string>();\n\n  async function handleInteraction({\n    payload,\n    workflowName,\n    processId,\n  }: {\n    payload: TransactionDataPayload;\n    workflowName: ANT_INTERACTION_TYPES;\n    processId?: string;\n  }) {\n    try {\n      if (!processId) {\n        throw new Error('Unable to interact with ANT contract - missing ID.');\n      }\n\n      if (!wallet?.arconnectSigner || !walletAddress) {\n        throw new Error(\n          'Unable to interact with ANT contract - missing signer.',\n        );\n      }\n\n      const { id } = await dispatchANTInteraction({\n        processId,\n        payload,\n        workflowName,\n        signer: wallet?.arconnectSigner,\n        owner: walletAddress?.toString(),\n        dispatch: dispatchTransactionState,\n      });\n      eventEmitter.emit('success', {\n        name: 'Manage Undernames',\n        message: (\n          <span\n            className=\"flex flex-row whitespace-nowrap\"\n            style={{ gap: '10px' }}\n          >\n            {workflowName} complete.{' '}\n            <ArweaveID\n              id={new ArweaveTransactionID(id)}\n              type={ArweaveIdTypes.INTERACTION}\n              shouldLink\n              characterCount={8}\n            />\n          </span>\n        ),\n      });\n      refresh && refresh();\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    } finally {\n      setTransactionData(undefined);\n      setInteractionType(undefined);\n    }\n  }\n\n  useEffect(() => {\n    if (undernames) {\n      const newTableData: TableData[] = [];\n\n      Object.entries(undernames)\n        .filter(([u]) => u !== '@')\n        .map(([undername, record]: any) => {\n          const data = {\n            undername,\n            targetId: record.transactionId,\n            ttlSeconds: record.ttlSeconds,\n            action: (\n              <span\n                className=\"flex flex-row justify-end pr-3\"\n                style={{ gap: '15px' }}\n              >\n                <button\n                  className=\"fill-grey hover:fill-white\"\n                  onClick={() => {\n                    setSelectedUndername(undername);\n                    setAction(UNDERNAME_TABLE_ACTIONS.EDIT);\n                  }}\n                >\n                  <PencilIcon width={'16px'} height={'16px'} fill=\"inherit\" />\n                </button>\n                <button\n                  className=\"fill-grey hover:fill-white\"\n                  onClick={() => {\n                    setSelectedUndername(undername);\n                    setAction(UNDERNAME_TABLE_ACTIONS.REMOVE);\n                    setTransactionData({\n                      subDomain: undername,\n                    });\n                    setInteractionType(ANT_INTERACTION_TYPES.REMOVE_RECORD);\n                    dispatchTransactionState({\n                      type: 'setWorkflowName',\n                      payload: ANT_INTERACTION_TYPES.REMOVE_RECORD,\n                    });\n                  }}\n                >\n                  <TrashIcon width={'16px'} height={'16px'} fill=\"inherit\" />\n                </button>\n              </span>\n            ),\n          };\n          newTableData.push(data as TableData);\n        });\n\n      setTableData(newTableData as TableData[]);\n    }\n\n    if (!undernames || !Object.keys(undernames).length) {\n      setTableData([]);\n    }\n  }, [undernames]);\n\n  useEffect(() => {\n    if (filter) {\n      setFilteredTableData(filterTableData(filter, tableData));\n    } else {\n      setFilteredTableData([]);\n    }\n  }, [filter, tableData]);\n\n  // Define columns for the table\n  const columns: ColumnDef<TableData, any>[] = [\n    'undername',\n    'targetId',\n    'ttlSeconds',\n    'action',\n  ].map((key) =>\n    columnHelper.accessor(key as keyof TableData, {\n      id: key,\n      header:\n        key == 'action'\n          ? ''\n          : key == 'targetId'\n          ? 'Target ID'\n          : key == 'ttlSeconds'\n          ? 'TTL Seconds'\n          : camelToReadable(key),\n      sortDescFirst: true,\n      cell: ({ row }) => {\n        const rowValue = row.getValue(key) as any;\n        if (!rowValue) {\n          return '';\n        }\n        switch (key) {\n          case 'undername': {\n            return (\n              <Tooltip\n                tooltipOverrides={{\n                  overlayClassName: 'w-fit',\n                  overlayInnerStyle: { width: 'fit-content' },\n                }}\n                message={\n                  <span className=\"w-fit whitespace-nowrap text-white\">\n                    {rowValue}\n                  </span>\n                }\n                icon={\n                  <Link\n                    className=\"link gap-2 items-center w-fit\"\n                    to={`https://${rowValue}_${arnsDomain}.${gateway}`}\n                    target=\"_blank\"\n                  >\n                    {formatForMaxCharCount(rowValue, 30)}{' '}\n                    <ExternalLinkIcon\n                      width={'12px'}\n                      height={'12px'}\n                      fill={'var(--text-white)'}\n                    />\n                  </Link>\n                }\n              />\n            );\n          }\n\n          case 'targetId': {\n            return (\n              <ArweaveID\n                id={rowValue}\n                shouldLink={true}\n                characterCount={8}\n                type={ArweaveIdTypes.TRANSACTION}\n              />\n            );\n          }\n          default: {\n            return rowValue;\n          }\n        }\n      },\n    }),\n  );\n\n  return (\n    <div>\n      <TableView\n        columns={columns}\n        data={\n          isLoading\n            ? []\n            : filteredTableData.length\n            ? filteredTableData\n            : tableData.length\n            ? tableData\n            : []\n        }\n        isLoading={false}\n        noDataFoundText={\n          isLoading ? (\n            <span className=\"h-fit flex flex-col text-white w-full items-center p-5 justify-center\">\n              <Lottie\n                animationData={arioLoading}\n                loop={true}\n                className=\"h-[100px]\"\n              />\n              <span>Loading Undernames...</span>\n            </span>\n          ) : (\n            <span className=\"h-20 flex w-full items-center justify-center\">\n              No Undernames Found\n            </span>\n          )\n        }\n        defaultSortingState={{ id: 'undername', desc: true }}\n        tableClass=\"bg-background border-[1px] border-dark-grey rounded border-collapse\"\n        rowClass={(props) => {\n          const pad = '*:pl-4';\n          if (props?.row !== undefined) {\n            return (\n              'hover:bg-primary-thin border-b-[1px] border-dark-grey ' + pad\n            );\n          }\n\n          if (props?.headerGroup !== undefined) {\n            return pad + ' border-b-[1px] border-dark-grey';\n          }\n\n          return 'border-t-[1px] border-dark-grey ' + pad;\n        }}\n        addOnAfterTable={\n          ownershipStatus === undefined ? (\n            <></>\n          ) : (\n            <div className=\"w-full flex flex-row text-primary font-semibold rounded-b-md border-b-[1px] border-x-[1px] border-dark-grey\">\n              <button\n                className=\"flex flex-row w-full justify-start items-center p-3 rounded-b-md bg-background hover:bg-primary-gradient text-primary hover:text-primary fill-primary hover:fill-black transition-all\"\n                style={{ gap: '10px' }}\n                onClick={() => setAction(UNDERNAME_TABLE_ACTIONS.CREATE)}\n              >\n                <Plus\n                  width={'20px'}\n                  height={'20px'}\n                  className=\"text-primary fill-black\"\n                />\n                Add Undername\n              </button>\n            </div>\n          )\n        }\n        paginationConfig={{\n          pageSize: 8,\n        }}\n      />\n      {action == UNDERNAME_TABLE_ACTIONS.CREATE && antId && ownershipStatus ? (\n        <AddUndernameModal\n          closeModal={() => {\n            setSearchParams({ ...searchParams, modal: undefined });\n            setAction(undefined);\n          }}\n          payloadCallback={(payload: SetRecordPayload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.SET_RECORD);\n            dispatchTransactionState({\n              type: 'setWorkflowName',\n              payload: ANT_INTERACTION_TYPES.SET_RECORD,\n            });\n            setAction(undefined);\n          }}\n          antId={antId}\n        />\n      ) : (\n        <> </>\n      )}\n      {action === UNDERNAME_TABLE_ACTIONS.EDIT &&\n        selectedUndername &&\n        ownershipStatus && (\n          <EditUndernameModal\n            antId={new ArweaveTransactionID(antId)}\n            undername={selectedUndername}\n            closeModal={() => {\n              setSelectedUndername(undefined);\n              setAction(undefined);\n            }}\n            payloadCallback={(p) => {\n              setTransactionData(p);\n              setInteractionType(ANT_INTERACTION_TYPES.EDIT_RECORD);\n              dispatchTransactionState({\n                type: 'setWorkflowName',\n                payload: ANT_INTERACTION_TYPES.EDIT_RECORD,\n              });\n              setSelectedUndername(undefined);\n              setAction(undefined);\n            }}\n          />\n        )}\n      {antId && transactionData && interactionType && ownershipStatus ? (\n        <ConfirmTransactionModal\n          interactionType={interactionType}\n          confirm={() =>\n            handleInteraction({\n              payload: transactionData,\n              workflowName: interactionType,\n              processId: antId!,\n            })\n          }\n          cancel={() => {\n            setTransactionData(undefined);\n            setInteractionType(undefined);\n            setSelectedUndername(undefined);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default UndernamesTable;\n","import { Tooltip } from '@src/components/data-display';\nimport UndernamesTable from '@src/components/data-display/tables/UndernamesTable';\nimport { SearchIcon } from '@src/components/icons';\nimport useDomainInfo from '@src/hooks/useDomainInfo';\nimport { MAX_UNDERNAME_COUNT } from '@src/utils/constants';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport {\n  formatForMaxCharCount,\n  getOwnershipStatus,\n  isArweaveTransactionID,\n  lowerCaseDomain,\n} from '../../../utils';\nimport eventEmitter from '../../../utils/events';\nimport './styles.css';\n\nfunction Undernames() {\n  const navigate = useNavigate();\n  const { id, name } = useParams();\n  const {\n    data,\n    isLoading: isLoadingDomainInfo,\n    refetch,\n  } = useDomainInfo({\n    domain: name,\n    antId: isArweaveTransactionID(id) ? id : undefined,\n  });\n  const [{ walletAddress }] = useWalletState();\n  const [isMaxUndernameCount, setIsMaxUndernameCount] =\n    useState<boolean>(false);\n  const [ownershipStatus, setOwnershipStatus] = useState<\n    'controller' | 'owner' | undefined\n  >(undefined);\n  const [search, setSearch] = useState<string>('');\n\n  useEffect(() => {\n    if (!id && !name) {\n      eventEmitter.emit('error', new Error('Missing ANT transaction ID.'));\n      navigate('/manage/ants');\n      return;\n    }\n    if (data?.owner && data?.controllers) {\n      setOwnershipStatus(\n        getOwnershipStatus(\n          data?.owner,\n          data?.controllers,\n          walletAddress?.toString(),\n        ),\n      );\n    }\n\n    setIsMaxUndernameCount(\n      !!data?.arnsRecord?.undernameLimit &&\n        data?.arnsRecord?.undernameLimit >= MAX_UNDERNAME_COUNT,\n    );\n  }, [\n    id,\n    name,\n    data?.owner,\n    data?.controllers,\n    walletAddress,\n    isLoadingDomainInfo,\n  ]);\n\n  return (\n    <>\n      <div className=\"px-[100px]\">\n        <div className=\"flex flex-col gap-4\">\n          <div className=\"flex flex-justify-between\">\n            <div\n              className=\"flex flex-row\"\n              style={{ justifyContent: 'space-between' }}\n            >\n              <h2 className=\"white text-[2rem] whitespace-nowrap\">\n                Manage Undernames\n              </h2>\n              <Tooltip\n                message={\n                  isMaxUndernameCount\n                    ? 'Max undername support reached'\n                    : 'Increase undername support'\n                }\n                icon={\n                  <button\n                    disabled={isLoadingDomainInfo || isMaxUndernameCount}\n                    className={`button-secondary ${\n                      isLoadingDomainInfo || isMaxUndernameCount\n                        ? 'disabled-button'\n                        : 'hover'\n                    }`}\n                    style={{\n                      padding: '9px',\n                      gap: '8px',\n                      fontSize: '14px',\n                      color: 'var(--accent)',\n                      fontFamily: 'Rubik',\n                    }}\n                    onClick={() =>\n                      navigate(\n                        `/manage/names/${lowerCaseDomain(\n                          name!,\n                        )}/upgrade-undernames`,\n                      )\n                    }\n                  >\n                    Increase Undernames\n                  </button>\n                }\n              />\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex w-full p-3 border-x-[1px] border-t-[1px] border-dark-grey rounded-t-[5px] relative\">\n              <SearchIcon\n                width={'18px'}\n                height={'18px'}\n                className=\"fill-white absolute top-[13.5px] left-[11px]\"\n              />\n              <input\n                className=\"pl-7 flex bg-background w-full focus:outline-none text-white placeholder:text-dark-grey\"\n                onChange={(e) => setSearch(e.target.value)}\n                value={search}\n                placeholder={`Search undernames on '${\n                  name ?? formatForMaxCharCount(id ?? '', 10)\n                }'`}\n              />\n            </div>\n            <UndernamesTable\n              undernames={data?.records ?? {}}\n              arnsDomain={name}\n              antId={data?.arnsRecord?.processId}\n              ownershipStatus={ownershipStatus}\n              isLoading={isLoadingDomainInfo}\n              filter={search}\n              refresh={() => {\n                if (isLoadingDomainInfo) return;\n                refetch();\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Undernames;\n"],"names":["SvgTrash","props","reactExports","Plus","createLucideIcon","AddUndernameModal","antId","closeModal","payloadCallback","registeredDomains","useArNSRegistryDomains","isMobile","useIsMobile","targetIdRef","ttlRef","nameRef","undername","setUndername","targetId","setTargetId","LANDING_PAGE_TXID","ttlSeconds","setTtlSeconds","MIN_TTL_SECONDS","associatedRecords","setAssociatedRecords","maxUndernameLength","setMaxUndernameLength","MAX_UNDERNAME_LENGTH","arnsRecords","_a","acc","record","loadDetails","_b","shortestAssociatedName","name","error","eventEmitter","handlePayloadCallback","getIncompatibleNames","undername2","records","jsxRuntimeExports","DialogModal","ValidationInput","v","UNDERNAME_REGEX","VALIDATION_INPUT_TYPES","validateNoSpecialCharacters","validateNoLeadingOrTrailingDashes","WarningCard","Tooltip","ARNS_TX_ID_ENTRY_REGEX","id","isArweaveTransactionID","MAX_TTL_SECONDS","ttl","validateTTLSeconds","isUndernameValid","columnHelper","createColumnHelper","filterTableData","filter","data","results","d","matchFound","UndernamesTable","undernames","arnsDomain","ownershipStatus","refresh","isLoading","gateway","useGlobalState","wallet","walletAddress","useWalletState","dispatchTransactionState","useTransactionState","searchParams","setSearchParams","useSearchParams","tableData","setTableData","filteredTableData","setFilteredTableData","action","setAction","transactionData","setTransactionData","interactionType","setInteractionType","selectedUndername","setSelectedUndername","handleInteraction","payload","workflowName","processId","dispatchANTInteraction","ArweaveID","ArweaveTransactionID","ArweaveIdTypes","newTableData","u","UNDERNAME_TABLE_ACTIONS","SvgPencil","ANT_INTERACTION_TYPES","columns","key","camelToReadable","row","rowValue","Tooltip$1","Link","formatForMaxCharCount","SvgExternalLink","TableView","Lottie","arioLoading","pad","EditUndernameModal","p","ConfirmTransactionModal","Undernames","navigate","useNavigate","useParams","isLoadingDomainInfo","refetch","useDomainInfo","isMaxUndernameCount","setIsMaxUndernameCount","setOwnershipStatus","search","setSearch","getOwnershipStatus","MAX_UNDERNAME_COUNT","lowerCaseDomain","SvgSearch","e"],"mappings":"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","x_google_ignoreList":[1]}
{"version":3,"file":"Transaction-c7594751.js","sources":["../../src/hooks/useTransactionData/useTransactionData.tsx","../../src/components/pages/Transaction/Transaction.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { createSearchParams, useSearchParams } from 'react-router-dom';\n\nimport { useTransactionState } from '../../state/contexts/TransactionState';\nimport { useWalletState } from '../../state/contexts/WalletState';\nimport {\n  BuyRecordPayload,\n  INTERACTION_TYPES,\n  TransactionData,\n} from '../../types';\nimport {\n  TRANSACTION_DATA_KEYS,\n  generateAtomicState,\n  isObjectOfTransactionPayloadType,\n} from '../../utils';\nimport { ATOMIC_FLAG } from '../../utils/constants';\n\nexport function useTransactionData() {\n  const [, setSearchParams] = useSearchParams();\n  const [{ walletAddress }] = useWalletState();\n  const [{ transactionData, interactionType, workflowStage }] =\n    useTransactionState();\n\n  const [data, setData] = useState<TransactionData>();\n\n  /**\n   * TODO: parse search params that are provided on initial page load and update the\n   * transaction state with those values. That will allow users to dynamically link\n   * transaction interactions.\n   */\n\n  useEffect(() => {\n    if (!transactionData) {\n      return;\n    }\n\n    const updatedSearchParams = createSearchParams({\n      // TODO: sanitize these values\n      ...(transactionData as any),\n      interactionType,\n      workflowStage,\n    });\n\n    setSearchParams(updatedSearchParams, { replace: true });\n\n    // if atomic registration detected, generate the state for it.\n    if (\n      walletAddress &&\n      isObjectOfTransactionPayloadType<BuyRecordPayload>(\n        transactionData,\n        TRANSACTION_DATA_KEYS[INTERACTION_TYPES.BUY_RECORD].keys,\n      ) &&\n      transactionData.contractTxId === ATOMIC_FLAG\n    ) {\n      setData({\n        ...transactionData,\n        state: generateAtomicState(transactionData.name, walletAddress),\n      });\n      return;\n    }\n    setData(transactionData);\n  }, [transactionData, interactionType, workflowStage, walletAddress]);\n\n  return {\n    transactionData: data,\n    interactionType,\n    workflowStage,\n  };\n}\n\nexport default useTransactionData;\n","import { useEffect } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\n\nimport { useTransactionData } from '../../../hooks';\nimport { useTransactionState } from '../../../state/contexts/TransactionState';\nimport TransactionWorkflow, {\n  TRANSACTION_WORKFLOW_STATUS,\n} from '../../layout/TransactionWorkflow/TransactionWorkflow';\nimport PageLoader from '../../layout/progress/PageLoader/PageLoader';\n\nfunction Transaction() {\n  const { transactionData, interactionType, workflowStage } =\n    useTransactionData();\n  const from = useLocation().state;\n  const [, dispatchTransactionState] = useTransactionState();\n\n  useEffect(() => {\n    if (from) {\n      dispatchTransactionState({\n        type: 'setWorkflowStage',\n        payload: TRANSACTION_WORKFLOW_STATUS.PENDING,\n      });\n    }\n  }, [from, transactionData]);\n\n  if (!transactionData && !interactionType) {\n    return <Navigate to={from ?? '/'} />;\n  }\n  if (!transactionData || !interactionType) {\n    return (\n      <PageLoader\n        loading={!transactionData || !interactionType}\n        message={'Waiting for transaction data.'}\n      />\n    );\n  }\n  return (\n    <div\n      id=\"transaction-page\"\n      className=\"page flex flex-column center\"\n      style={{\n        width: '100%',\n        boxSizing: 'border-box',\n      }}\n    >\n      <TransactionWorkflow\n        interactionType={interactionType}\n        transactionData={transactionData}\n        workflowStage={workflowStage}\n      />\n    </div>\n  );\n}\n\nexport default Transaction;\n"],"names":["useTransactionData","setSearchParams","useSearchParams","walletAddress","useWalletState","transactionData","interactionType","workflowStage","useTransactionState","data","setData","reactExports","updatedSearchParams","createSearchParams","isObjectOfTransactionPayloadType","TRANSACTION_DATA_KEYS","INTERACTION_TYPES","ATOMIC_FLAG","generateAtomicState","Transaction","from","useLocation","dispatchTransactionState","TRANSACTION_WORKFLOW_STATUS","jsxRuntimeExports","Navigate","PageLoader","TransactionWorkflow"],"mappings":"kdAiBA,SAAAA,GAAA,CACA,KAAA,CAAA,CAAAC,CAAA,EAAAC,EAAA,EACA,CAAA,CAAA,cAAAC,CAAA,CAAA,EAAAC,EAAA,EACA,CAAA,CAAA,gBAAAC,EAAA,gBAAAC,EAAA,cAAAC,CAAA,CAAA,EAAAC,EAAA,EAGA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAQA,OAAAA,EAAA,UAAA,IAAA,CACA,GAAA,CAAAN,EACA,OAGA,MAAAO,EAAAC,EAAA,CAAA,GAAAR,EAEA,gBAAAC,EACA,cAAAC,CACA,CAAA,EAMA,GAHAN,EAAAW,EAAA,CAAA,QAAA,EAAA,CAAA,EAGAT,GAAAW,EAEAT,EACAU,EAAAC,EAAA,UAAA,EAAA,IACA,GAAAX,EAAA,eAAAY,EAAA,CAIAP,EAAA,CAAA,GAAAL,EACA,MAAAa,EAAAb,EAAA,KAAAF,CAAA,CACA,CAAA,EAEA,MAAA,CAEAO,EAAAL,CAAA,CAAA,EAAA,CAAAA,EAAAC,EAAAC,EAAAJ,CAAA,CAAA,EAGA,CAAA,gBAAAM,EACA,gBAAAH,EACA,cAAAC,CACA,CAEA,CC1DA,SAAAY,GAAA,CACA,KAAA,CAAA,gBAAAd,EAAA,gBAAAC,EAAA,cAAAC,CAAA,EAAAP,EAAA,EAEAoB,EAAAC,EAAA,EAAA,MACA,CAAA,CAAAC,CAAA,EAAAd,EAAA,EAWA,OATAG,EAAA,UAAA,IAAA,CACAS,GACAE,EAAA,CAAA,KAAA,mBACA,QAAAC,EAAA,OACA,CAAA,CAEA,EAAA,CAAAH,EAAAf,CAAA,CAAA,EAGA,CAAAA,GAAA,CAAAC,EACAkB,EAAA,IAAAC,EAAA,CAAA,GAAAL,GAAA,GAAA,CAAA,EAEA,CAAAf,GAAA,CAAAC,EACAkB,EAAA,IACAE,EAAA,CAAA,QAAA,CAAArB,GAAA,CAAAC,EACA,QAAA,+BACA,CAAA,EAIAkB,EAAA,IACA,MAAA,CAAA,GAAA,mBACA,UAAA,+BACA,MAAA,CACA,MAAA,OACA,UAAA,YACA,EACA,SAAAA,EAAA,IAEAG,EAAA,CAAA,gBAAArB,EACA,gBAAAD,EACA,cAAAE,CACA,CAAA,CACA,CAAA,CAGA"}
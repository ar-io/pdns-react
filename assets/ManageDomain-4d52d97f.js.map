{"version":3,"file":"ManageDomain-4d52d97f.js","sources":["../../src/components/pages/ManageDomain/ManageDomain.tsx"],"sourcesContent":["import TransactionSuccessCard from '@src/components/cards/TransactionSuccessCard/TransactionSuccessCard';\nimport DomainSettings from '@src/components/forms/DomainSettings/DomainSettings';\nimport { useTransactionState } from '@src/state/contexts/TransactionState';\nimport { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { decodeDomainToASCII } from '../../../utils';\nimport { HamburgerOutlineIcon } from '../../icons';\nimport './styles.css';\n\nfunction ManageDomain() {\n  const { name } = useParams();\n  const navigate = useNavigate();\n\n  const [{ workflowName, interactionResult }, dispatchTransactionState] =\n    useTransactionState();\n\n  useEffect(() => {\n    // Reset transaction state on unmount - clears transaction success banner\n    return () => {\n      dispatchTransactionState({ type: 'reset' });\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!name) {\n      navigate('/manage/names');\n      return;\n    }\n  }, [name]);\n\n  return (\n    <>\n      <div\n        className=\"page\"\n        style={{ gap: '0px', paddingTop: '10px', paddingBottom: '10px' }}\n      >\n        {interactionResult ? (\n          <TransactionSuccessCard\n            txId={interactionResult.id}\n            title={`${workflowName} completed`}\n            close={() => {\n              dispatchTransactionState({\n                type: 'reset',\n              });\n            }}\n          />\n        ) : (\n          <></>\n        )}\n        <div\n          className=\"flex flex-row\"\n          style={{\n            justifyContent: 'space-between',\n            width: '100%',\n          }}\n        >\n          <h2 className=\"flex white center\" style={{ gap: '16px' }}>\n            <HamburgerOutlineIcon\n              width={'20px'}\n              height={'20px'}\n              fill=\"var(--text-white)\"\n            />\n            {decodeDomainToASCII(name!)}\n          </h2>\n        </div>\n        <DomainSettings domain={name} />\n      </div>\n    </>\n  );\n}\n\nexport default ManageDomain;\n"],"names":["ManageDomain","name","useParams","navigate","useNavigate","workflowName","interactionResult","dispatchTransactionState","useTransactionState","reactExports","jsxRuntimeExports","TransactionSuccessCard","SvgHamburgerOutline","decodeDomainToASCII","DomainSettings"],"mappings":"4nBAUA,SAAAA,GAAA,CACA,KAAA,CAAA,KAAAC,CAAA,EAAAC,EAAA,EACAC,EAAAC,EAAA,EAEA,CAAA,CAAA,aAAAC,EAAA,kBAAAC,CAAA,EAAAC,CAAA,EAAAC,EAAA,EAGA,OAAAC,EAAA,UAAA,IAEA,IAAA,CACAF,EAAA,CAAA,KAAA,OAAA,CAAA,CAAA,EACA,CAAA,CAAA,EAGAE,EAAA,UAAA,IAAA,CACA,GAAA,CAAAR,EAAA,CACAE,EAAA,eAAA,EACA,MAAA,CACA,EAAA,CAAAF,CAAA,CAAA,EAGAS,EAAA,IAAAA,EAAA,SAAA,CAAA,SAAAA,EAAA,KAEA,MAAA,CAAA,UAAA,OACA,MAAA,CAAA,IAAA,MAAA,WAAA,OAAA,cAAA,MAAA,EACA,SAAA,CAEAJ,EAAAI,EAAA,IACAC,EAAA,CAAA,KAAAL,EAAA,GACA,MAAA,GAAAD,CAAA,aACA,MAAA,IAAA,CAEAE,EAAA,CAAA,KAAA,OACA,CAAA,CACA,CACA,CAAA,EAAAG,EAAA,IAAAA,EAAA,SAAA,CAAA,CAAA,EAGAA,EAAA,IAEA,MAAA,CAAA,UAAA,gBACA,MAAA,CACA,eAAA,gBACA,MAAA,MACA,EACA,SAAAA,EAAA,KAAA,KAAA,CAAA,UAAA,oBAAA,MAAA,CAAA,IAAA,MAAA,EAAA,SAAA,CAGAA,EAAA,IAAAE,EAAA,CAAA,MAAA,OACA,OAAA,OACA,KAAA,mBACA,CAAA,EACAC,EAAAZ,CAAA,CACA,CAAA,CAAA,CACA,CAAA,EACAS,EAAA,IAAAI,EAAA,CAAA,OAAAb,CAAA,CAAA,CACA,CAAA,CAAA,CAAA,CAAA,CAIA"}
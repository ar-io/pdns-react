{"version":3,"file":"ManageDomain-1254acb6.js","sources":["../../src/components/pages/ManageDomain/ManageDomain.tsx"],"sourcesContent":["import { Tooltip } from 'antd';\nimport { Table } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom';\n\nimport { useIsMobile } from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport { DomainDetails, ManageDomainRow } from '../../../types';\nimport {\n  getInteractionTypeFromField,\n  getLeaseDurationFromEndTimestamp,\n  getPendingInteractionsRowsForContract,\n  getUndernameCount,\n  isArweaveTransactionID,\n  lowerCaseDomain,\n} from '../../../utils';\nimport {\n  DEFAULT_MAX_UNDERNAMES,\n  DEFAULT_TTL_SECONDS,\n  MAX_LEASE_DURATION,\n  MAX_UNDERNAME_COUNT,\n  SECONDS_IN_GRACE_PERIOD,\n} from '../../../utils/constants';\nimport eventEmitter from '../../../utils/events';\nimport { AntDetailKey, mapKeyToAttribute } from '../../cards/ANTCard/ANTCard';\nimport {\n  CirclePending,\n  ExternalLinkIcon,\n  HamburgerOutlineIcon,\n} from '../../icons';\nimport { Loader } from '../../layout';\nimport ArweaveID, { ArweaveIdTypes } from '../../layout/ArweaveID/ArweaveID';\nimport TransactionStatus from '../../layout/TransactionStatus/TransactionStatus';\nimport './styles.css';\n\nfunction ManageDomain() {\n  const { name } = useParams();\n  const isMobile = useIsMobile();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const [{ walletAddress }] = useWalletState();\n  const [rows, setRows] = useState<ManageDomainRow[]>([]);\n  const [isMaxLeaseDuration, setIsMaxLeaseDuration] = useState<boolean>(false);\n  const [isMaxUndernameCount, setIsMaxUndernameCount] =\n    useState<boolean>(false);\n  const [undernameCount, setUndernameCount] = useState<number>();\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (!name || !walletAddress) {\n      navigate('/manage/ants');\n      return;\n    }\n\n    fetchDomainDetails(walletAddress, name);\n  }, [name]);\n\n  // TODO: [PE-4630] tech debt, refactor this into smaller pure functions\n  async function fetchDomainDetails(\n    address: ArweaveTransactionID,\n    domainName: string,\n  ) {\n    try {\n      setLoading(true);\n\n      const recordEntry = await arweaveDataProvider.getRecord({\n        domain: lowerCaseDomain(domainName),\n      });\n      const txId = recordEntry?.contractTxId;\n      if (!txId) {\n        throw Error('This name is not registered');\n      }\n      const contractTxId = new ArweaveTransactionID(txId);\n\n      const [contract, confirmations, pendingContractInteractions] =\n        await Promise.all([\n          arweaveDataProvider.buildANTContract(contractTxId),\n          arweaveDataProvider\n            .getTransactionStatus(contractTxId)\n            .then((status) => status[contractTxId.toString()].confirmations),\n          arweaveDataProvider.getPendingContractInteractions(contractTxId),\n        ]);\n\n      // simple check that it is ANT shaped contract\n      // TODO: add more checks, eg AST tree and function IO's\n      if (!contract.isValid()) {\n        throw Error('Invalid ANT contract');\n      }\n\n      const record = name\n        ? await arweaveDataProvider\n            .getRecord({\n              domain: lowerCaseDomain(name),\n            })\n            .catch(() => undefined)\n        : undefined;\n      if (!record) {\n        throw Error('This name is not registered');\n      }\n\n      const duration = record?.endTimestamp\n        ? getLeaseDurationFromEndTimestamp(\n            record.startTimestamp * 1000,\n            record.endTimestamp * 1000,\n          )\n        : 'Indefinite';\n\n      const getLeaseDurationString = () => {\n        if (record?.endTimestamp) {\n          const duration = Math.max(\n            1,\n            getLeaseDurationFromEndTimestamp(\n              record.startTimestamp * 1000,\n              record.endTimestamp * 1000,\n            ),\n          );\n          const y = duration > 1 ? 'years' : 'year';\n          return `${duration} ${y}`;\n        }\n        return 'Indefinite';\n      };\n\n      setIsMaxLeaseDuration(\n        (duration &&\n          typeof duration === 'number' &&\n          duration >= MAX_LEASE_DURATION) ||\n          duration === 'Indefinite',\n      );\n\n      setUndernameCount(record.undernames);\n      setIsMaxUndernameCount(\n        !!undernameCount && record.undernames >= MAX_UNDERNAME_COUNT,\n      );\n\n      const consolidatedDetails: DomainDetails = {\n        expiryDate: record?.endTimestamp\n          ? // assume permabuy if missing timestamp\n            +record.endTimestamp\n          : 'Indefinite',\n        status: <TransactionStatus confirmations={confirmations} />,\n        name: contract.name ?? 'N/A',\n        contractTxId: contractTxId.toString(),\n        targetID:\n          contract.getRecord('@') &&\n          isArweaveTransactionID(contract.getRecord('@')!.transactionId)\n            ? contract.getRecord('@')!.transactionId\n            : 'N/A',\n        ticker: contract.ticker ?? 'N/A',\n        controllers: contract.controllers.join(', ') ?? 'N/A',\n        owner: contract.owner ?? 'N/A',\n        ttlSeconds: contract.getRecord('@')?.ttlSeconds ?? DEFAULT_TTL_SECONDS,\n        leaseDuration: `${getLeaseDurationString()}`,\n        // -1 because @ record is not counted\n        undernames: `${getUndernameCount(contract.records)}/${(\n          record?.undernames ?? DEFAULT_MAX_UNDERNAMES\n        ).toLocaleString()}`,\n      };\n\n      // get pending tx details\n      const pendingTxs = getPendingInteractionsRowsForContract(\n        pendingContractInteractions,\n        consolidatedDetails,\n      );\n\n      const rows = Object.keys(consolidatedDetails).reduce(\n        (details: ManageDomainRow[], attribute: string, index: number) => {\n          const existingValue =\n            consolidatedDetails[attribute as keyof DomainDetails];\n          const pendingInteraction = pendingTxs.find(\n            (i) => i.attribute === attribute,\n          );\n          const value = pendingInteraction\n            ? pendingInteraction.value\n            : existingValue;\n          const detail = {\n            attribute,\n            value,\n            key: index,\n            interactionType: getInteractionTypeFromField(attribute),\n            pendingInteraction,\n          };\n          details.push(detail);\n          return details;\n        },\n        [],\n      );\n\n      setRows(rows);\n      setLoading(false);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n      navigate('/manage/names', { state: location.pathname });\n    }\n  }\n\n  return (\n    <>\n      <div className=\"page\" style={{ gap: '30px' }}>\n        <div\n          className=\"flex flex-row\"\n          style={{ justifyContent: 'space-between', width: '100%' }}\n        >\n          <h2 className=\"flex white center\" style={{ gap: '16px' }}>\n            <HamburgerOutlineIcon\n              width={'20px'}\n              height={'20px'}\n              fill=\"var(--text-white)\"\n            />\n            {name}\n          </h2>\n          <div\n            className=\"flex flex-row\"\n            style={{ gap: '20px', width: 'fit-content' }}\n          >\n            <Tooltip\n              trigger={['hover']}\n              title={\n                isMaxUndernameCount\n                  ? 'Max undername support reached'\n                  : 'Increase undername support'\n              }\n              color=\"#222224\"\n              placement=\"top\"\n              rootClassName=\"notification-tooltip\"\n            >\n              <button\n                disabled={loading || isMaxUndernameCount}\n                className={`button-secondary ${\n                  loading || isMaxUndernameCount ? 'disabled-button' : 'hover'\n                }`}\n                style={{\n                  padding: loading || isMaxUndernameCount ? '0px' : '9px',\n                  gap: '8px',\n                  fontSize: '14px',\n                  color: 'var(--accent)',\n                  fontFamily: 'Rubik',\n                }}\n                onClick={() => navigate(`/manage/names/${name}/undernames`)}\n              >\n                Increase Undernames\n              </button>\n            </Tooltip>\n            <Tooltip\n              trigger={['hover']}\n              title={\n                isMaxLeaseDuration\n                  ? 'Max lease duration reached'\n                  : 'Extend lease'\n              }\n              color=\"#222224\"\n              placement=\"top\"\n              rootClassName=\"notification-tooltip\"\n            >\n              <button\n                disabled={loading || isMaxLeaseDuration}\n                className={`button-primary ${\n                  loading || isMaxLeaseDuration ? 'disabled-button' : 'hover'\n                }`}\n                style={{\n                  padding: loading || isMaxLeaseDuration ? '0px' : '9px',\n                  gap: '8px',\n                  fontSize: '14px',\n                  color: 'var(--text-black)',\n                  fontFamily: 'Rubik',\n                }}\n                onClick={() => navigate(`/manage/names/${name}/extend`)}\n              >\n                Extend Lease\n              </button>\n            </Tooltip>\n          </div>\n        </div>\n        <div className=\"flex-row center\">\n          {loading ? (\n            <div className=\"flex\" style={{ padding: '10%' }}>\n              <Loader size={80} />\n            </div>\n          ) : (\n            <Table\n              showHeader={false}\n              style={{ width: '100%' }}\n              scroll={{ x: true }}\n              pagination={false}\n              prefixCls=\"manage-domain-table\"\n              columns={[\n                {\n                  title: '',\n                  dataIndex: 'attribute',\n                  key: 'attribute',\n                  align: 'left',\n                  width: isMobile ? '0px' : '15%',\n                  className: 'grey',\n                  render: (value: string) => {\n                    return `${mapKeyToAttribute(value as AntDetailKey)}:`;\n                  },\n                },\n                {\n                  title: '',\n                  dataIndex: 'value',\n                  key: 'value',\n                  align: 'left',\n                  width: '70%',\n                  className: 'white',\n                  render: (value: any, row: ManageDomainRow) =>\n                    isArweaveTransactionID(value) ? (\n                      <ArweaveID\n                        id={new ArweaveTransactionID(value)}\n                        shouldLink\n                        copyButtonStyle={{ display: 'none' }}\n                        type={\n                          row.attribute === 'targetID'\n                            ? ArweaveIdTypes.TRANSACTION\n                            : row.attribute === 'contractTxId'\n                            ? ArweaveIdTypes.CONTRACT\n                            : ArweaveIdTypes.ADDRESS\n                        }\n                      />\n                    ) : row.attribute === 'expiryDate' &&\n                      typeof value === 'number' ? (\n                      <span\n                        style={{\n                          color:\n                            value * 1000 > Date.now()\n                              ? 'var(--success-green)'\n                              : value * 1000 + SECONDS_IN_GRACE_PERIOD * 1000 <\n                                Date.now()\n                              ? 'var(--accent)'\n                              : 'var(--error-red)',\n                        }}\n                      >\n                        {Intl.DateTimeFormat('en-US').format(value * 1000)}\n                      </span>\n                    ) : (\n                      value\n                    ),\n                },\n                {\n                  title: '',\n                  dataIndex: 'pendingInteraction',\n                  key: 'pendingInteraction',\n                  align: 'left',\n                  width: '2%',\n                  className: 'white',\n                  render: (interaction: {\n                    value: string;\n                    valid: boolean;\n                    id: string;\n                  }) => {\n                    if (interaction) {\n                      return (\n                        <Tooltip\n                          placement=\"right\"\n                          title={\n                            <Link\n                              className=\"link white text underline\"\n                              to={`https://viewblock.io/arweave/tx/${interaction.id}`}\n                              target=\"_blank\"\n                            >\n                              There is a pending transaction modifying this\n                              field.\n                              <ExternalLinkIcon\n                                height={12}\n                                width={12}\n                                fill={'var(--text-white)'}\n                              />\n                            </Link>\n                          }\n                          showArrow={true}\n                          overlayStyle={{\n                            maxWidth: 'fit-content',\n                          }}\n                        >\n                          <CirclePending\n                            height={20}\n                            width={20}\n                            fill={'var(--accent)'}\n                          />\n                        </Tooltip>\n                      );\n                    }\n                    return <></>;\n                  },\n                },\n              ]}\n              dataSource={rows}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ManageDomain;\n"],"names":["ManageDomain","name","useParams","isMobile","useIsMobile","navigate","useNavigate","location","useLocation","arweaveDataProvider","useGlobalState","walletAddress","useWalletState","rows","setRows","reactExports","isMaxLeaseDuration","setIsMaxLeaseDuration","isMaxUndernameCount","setIsMaxUndernameCount","undernameCount","setUndernameCount","loading","setLoading","fetchDomainDetails","address","domainName","recordEntry","lowerCaseDomain","txId","contractTxId","ArweaveTransactionID","contract","confirmations","pendingContractInteractions","status","record","duration","getLeaseDurationFromEndTimestamp","getLeaseDurationString","duration2","y","MAX_LEASE_DURATION","MAX_UNDERNAME_COUNT","consolidatedDetails","jsxRuntimeExports","TransactionStatus","isArweaveTransactionID","_a","DEFAULT_TTL_SECONDS","getUndernameCount","DEFAULT_MAX_UNDERNAMES","pendingTxs","getPendingInteractionsRowsForContract","rows2","details","attribute","index","existingValue","pendingInteraction","i","value","detail","getInteractionTypeFromField","error","eventEmitter","SvgHamburgerOutline","Tooltip","Loader","Table","mapKeyToAttribute","row","ArweaveID","ArweaveIdTypes","SECONDS_IN_GRACE_PERIOD","interaction","Link","SvgExternalLink","SvgCirclePending"],"mappings":"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"}
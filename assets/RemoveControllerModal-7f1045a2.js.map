{"version":3,"file":"RemoveControllerModal-7f1045a2.js","sources":["../../src/components/icons/DotsThreeOutlineVertical.svg","../../src/components/icons/Newspaper.svg","../../src/components/modals/TransferANTModal/TransferANTModal.tsx","../../src/components/modals/AddControllerModal/AddControllerModal.tsx","../../src/components/modals/RemoveControllerModal/RemoveControllerModal.tsx"],"sourcesContent":["export default \"__VITE_ASSET__ce3b0eb3__\"","export default \"__VITE_ASSET__288fe8c0__\"","import { Checkbox } from 'antd';\nimport { useEffect, useState } from 'react';\n\nimport { useIsMobile } from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport {\n  ANTContractJSON,\n  TransferANTPayload,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport { formatForMaxCharCount, isArweaveTransactionID } from '../../../utils';\nimport eventEmitter from '../../../utils/events';\nimport { InfoIcon } from '../../icons';\nimport ValidationInput from '../../inputs/text/ValidationInput/ValidationInput';\nimport { Loader } from '../../layout';\nimport TransactionCost from '../../layout/TransactionCost/TransactionCost';\nimport DialogModal from '../DialogModal/DialogModal';\nimport './styles.css';\n\nfunction TransferANTModal({\n  antId,\n  closeModal,\n  payloadCallback,\n}: {\n  antId: ArweaveTransactionID; // contract ID if asset type is a contract interaction\n  closeModal: () => void;\n  payloadCallback: (payload: TransferANTPayload) => void;\n}) {\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const isMobile = useIsMobile();\n  const [accepted, setAccepted] = useState<boolean>(false);\n  const [toAddress, setToAddress] = useState<string>('');\n  const [isValidAddress, setIsValidAddress] = useState<boolean>();\n  const [state, setState] = useState<ANTContractJSON>();\n  const [associatedNames, setAssociatedNames] = useState<string[]>([]);\n\n  // TODO: add \"transfer to another account\" dropdown\n\n  useEffect(() => {\n    fetchANTData(antId);\n  }, [antId]);\n\n  async function fetchANTData(id: ArweaveTransactionID) {\n    try {\n      const contract = await arweaveDataProvider.buildANTContract(id);\n      if (!contract.isValid()) {\n        throw new Error('Invalid ANT contract');\n      }\n      setState(contract.state);\n      const associatedRecords = await arweaveDataProvider.getRecords({\n        filters: { contractTxId: [antId] },\n      });\n      setAssociatedNames(Object.keys(associatedRecords));\n    } catch (error) {\n      eventEmitter.emit('error', error);\n      closeModal();\n    }\n  }\n\n  useEffect(() => {\n    if (!isArweaveTransactionID(toAddress)) {\n      setAccepted(false);\n    }\n    if (!toAddress.length) {\n      setIsValidAddress(undefined);\n      return;\n    }\n  }, [toAddress]);\n\n  if (!state) {\n    return (\n      <div className=\"modal-container\">\n        <Loader size={80} />\n      </div>\n    );\n  }\n\n  function handlePayloadCallback() {\n    payloadCallback({\n      target: toAddress,\n      associatedNames,\n    });\n  }\n\n  return (\n    <div\n      className=\"modal-container\"\n      style={isMobile ? { padding: 'none' } : {}}\n    >\n      {/**modal header */}\n      <DialogModal\n        title={<h2 className=\"white\">Transfer ANT</h2>}\n        body={\n          <div\n            className=\"flex flex-column\"\n            style={{ fontSize: '14px', maxWidth: '575px' }}\n          >\n            <div className=\"flex flex-column\" style={{ gap: '10px' }}>\n              <span className=\"grey\">Contract ID:</span>\n              <span className=\"white\">{antId.toString()}</span>\n            </div>\n            <div className=\"flex flex-column\" style={{ gap: '10px' }}>\n              <span className=\"grey\">Nickname:</span>\n              <span className=\"white\">\n                {formatForMaxCharCount(state.name, 40)}\n              </span>\n            </div>\n            <div className=\"flex flex-column\" style={{ paddingBottom: '30px' }}>\n              <div className=\"flex flex-column\" style={{ gap: '15px' }}>\n                <span className=\"grey\">Recipient wallet address:</span>\n                <ValidationInput\n                  inputClassName=\"name-token-input white\"\n                  inputCustomStyle={{ paddingLeft: '10px', fontSize: '16px' }}\n                  wrapperCustomStyle={{\n                    position: 'relative',\n                    border: '1px solid var(--text-faded)',\n                    borderRadius: 'var(--corner-radius)',\n                  }}\n                  showValidationIcon={true}\n                  showValidationOutline={true}\n                  showValidationChecklist={true}\n                  validationListStyle={{ display: 'none' }}\n                  maxCharLength={43}\n                  value={toAddress}\n                  setValue={setToAddress}\n                  validityCallback={(validity: boolean) =>\n                    setIsValidAddress(validity)\n                  }\n                  validationPredicates={{\n                    [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                      fn: (id: string) =>\n                        arweaveDataProvider.validateArweaveId(id),\n                    },\n                    [VALIDATION_INPUT_TYPES.ARWEAVE_ADDRESS]: {\n                      fn: (id: string) =>\n                        arweaveDataProvider.validateArweaveAddress(id),\n                      required: false,\n                    },\n                  }}\n                />\n                {isValidAddress === false ? (\n                  <span\n                    className=\"text-color-error\"\n                    style={{ marginBottom: '10px' }}\n                  >\n                    invalid address\n                  </span>\n                ) : (\n                  <></>\n                )}\n\n                {associatedNames.length ? (\n                  <span\n                    className=\"warning-container flex flex-row\"\n                    style={{\n                      boxSizing: 'border-box',\n                      fontSize: 'inherit',\n                      gap: '10px',\n                    }}\n                  >\n                    <InfoIcon\n                      width={'24px'}\n                      height={'24px'}\n                      fill={'var(--accent)'}\n                      style={{\n                        height: 'fit-content',\n                        width: '40px',\n                        justifyContent: 'flex-start',\n                        display: 'flex',\n                        lineHeight: '150%',\n                      }}\n                    />\n                    <span style={{}}>\n                      {`This ANT has ${associatedNames.length} name${\n                        associatedNames.length > 1 ? 's' : ''\n                      } that ${\n                        associatedNames.length > 1 ? 'are' : 'is'\n                      } associated with it. By transferring this ANT, you\n                  will also be transferring control of those names to the new\n                  ANT holder.`}\n                    </span>\n                  </span>\n                ) : (\n                  <></>\n                )}\n\n                <span\n                  className={`flex flex-row text ${\n                    accepted ? 'white' : 'grey'\n                  }`}\n                  style={{\n                    gap: 10,\n                    alignItems: 'center',\n                  }}\n                >\n                  <Checkbox\n                    rootClassName=\"accept-checkbox\"\n                    onChange={(e) => setAccepted(e.target.checked)}\n                    checked={accepted && isArweaveTransactionID(toAddress)}\n                    style={{ color: 'white' }}\n                    disabled={!isArweaveTransactionID(toAddress)}\n                  />\n                  I understand that this action cannot be undone.\n                </span>\n              </div>\n            </div>\n          </div>\n        }\n        onCancel={closeModal}\n        onClose={closeModal}\n        onNext={\n          accepted && isArweaveTransactionID(toAddress)\n            ? () => handlePayloadCallback()\n            : undefined\n        }\n        footer={\n          <div className=\"flex\">\n            <TransactionCost\n              fee={{}}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n              showBorder={false}\n            />\n          </div>\n        }\n        nextText=\"Next\"\n        cancelText=\"Cancel\"\n      />\n    </div>\n  );\n}\n\nexport default TransferANTModal;\n","import { useEffect, useState } from 'react';\n\nimport { useIsMobile } from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport {\n  ANTContractJSON,\n  SetControllerPayload,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport { formatForMaxCharCount, isArweaveTransactionID } from '../../../utils';\nimport eventEmitter from '../../../utils/events';\nimport ValidationInput from '../../inputs/text/ValidationInput/ValidationInput';\nimport { Loader } from '../../layout';\nimport TransactionCost from '../../layout/TransactionCost/TransactionCost';\nimport DialogModal from '../DialogModal/DialogModal';\n\nfunction AddControllerModal({\n  antId,\n  closeModal,\n  payloadCallback,\n}: {\n  antId: ArweaveTransactionID; // contract ID if asset type is a contract interaction\n  closeModal: () => void;\n  payloadCallback: (payload: SetControllerPayload) => void;\n}) {\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const isMobile = useIsMobile();\n  const [toAddress, setToAddress] = useState<string>('');\n  const [isValidAddress, setIsValidAddress] = useState<boolean>();\n  const [state, setState] = useState<ANTContractJSON>();\n\n  // TODO: add \"transfer to another account\" dropdown\n\n  useEffect(() => {\n    load(antId);\n  }, [antId]);\n\n  async function load(id: ArweaveTransactionID) {\n    try {\n      const contract = await arweaveDataProvider.buildANTContract(id);\n      setState(contract.state);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    }\n  }\n\n  useEffect(() => {\n    if (!toAddress.length) {\n      setIsValidAddress(undefined);\n      return;\n    }\n  }, [toAddress]);\n\n  if (!state) {\n    return (\n      <div className=\"modal-container\">\n        <Loader size={80} />\n      </div>\n    );\n  }\n\n  function handlePayloadCallback() {\n    payloadCallback({\n      target: toAddress,\n    });\n  }\n\n  return (\n    <div\n      className=\"modal-container\"\n      style={isMobile ? { padding: 'none' } : {}}\n    >\n      {/**modal header */}\n      <DialogModal\n        title={<h2 className=\"white\">Add Controller</h2>}\n        body={\n          <div\n            className=\"flex flex-column\"\n            style={{ fontSize: '14px', maxWidth: '575px', minWidth: '475px' }}\n          >\n            <div className=\"flex flex-column\" style={{ gap: '10px' }}>\n              <span className=\"grey\">Contract ID:</span>\n              <span className=\"white\">{antId.toString()}</span>\n            </div>\n            <div className=\"flex flex-column\" style={{ gap: '10px' }}>\n              <span className=\"grey\">Nickname:</span>\n              <span className=\"white\">\n                {formatForMaxCharCount(state.name, 40)}\n              </span>\n            </div>\n            <div className=\"flex flex-column\" style={{ paddingBottom: '30px' }}>\n              <div className=\"flex flex-column\" style={{ gap: '10px' }}>\n                <span className=\"grey\">Controller wallet address:</span>\n                <ValidationInput\n                  inputClassName=\"name-token-input white\"\n                  inputCustomStyle={{ paddingLeft: '10px', fontSize: '16px' }}\n                  wrapperCustomStyle={{\n                    position: 'relative',\n                    border: '1px solid var(--text-faded)',\n                    borderRadius: 'var(--corner-radius)',\n                  }}\n                  showValidationIcon={true}\n                  showValidationOutline={true}\n                  showValidationChecklist={true}\n                  validationListStyle={{ display: 'none' }}\n                  catchInvalidInput={true}\n                  maxCharLength={43}\n                  value={toAddress}\n                  setValue={setToAddress}\n                  validityCallback={(validity: boolean) =>\n                    setIsValidAddress(validity)\n                  }\n                  validationPredicates={{\n                    [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n                      fn: (id: string) =>\n                        arweaveDataProvider.validateArweaveId(id),\n                    },\n                  }}\n                />\n                <span className=\"text-color-error\">\n                  {isValidAddress === false ? 'invalid address' : ''}\n                </span>\n              </div>\n            </div>\n          </div>\n        }\n        onCancel={closeModal}\n        onClose={closeModal}\n        onNext={\n          isArweaveTransactionID(toAddress)\n            ? () => handlePayloadCallback()\n            : undefined\n        }\n        footer={\n          <div className=\"flex\">\n            <TransactionCost\n              fee={{}}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n              showBorder={false}\n            />\n          </div>\n        }\n        nextText=\"Add\"\n        cancelText=\"Cancel\"\n      />\n    </div>\n  );\n}\n\nexport default AddControllerModal;\n","import { Checkbox, Table } from 'antd';\nimport { useEffect, useState } from 'react';\n\nimport { useIsMobile } from '../../../hooks';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport { ANTContractJSON, RemoveControllerPayload } from '../../../types';\nimport {\n  formatForMaxCharCount,\n  getCustomPaginationButtons,\n  getLegacyControllersFromState,\n} from '../../../utils';\nimport eventEmitter from '../../../utils/events';\nimport { Loader } from '../../layout';\nimport TransactionCost from '../../layout/TransactionCost/TransactionCost';\nimport DialogModal from '../DialogModal/DialogModal';\nimport './styles.css';\n\nfunction RemoveControllersModal({\n  antId,\n  closeModal,\n  payloadCallback,\n}: {\n  antId: ArweaveTransactionID; // contract ID if asset type is a contract interaction\n  closeModal: () => void;\n  payloadCallback: (payload: RemoveControllerPayload) => void;\n}) {\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const isMobile = useIsMobile();\n  const [controllersToRemove, setControllersToRemove] = useState<\n    ArweaveTransactionID[]\n  >([]);\n  const [state, setState] = useState<ANTContractJSON>();\n  const [tablePage, setTablePage] = useState<number>(1);\n  const [rows, setRows] = useState<{ controller: ArweaveTransactionID }[]>([]);\n\n  // TODO: add \"transfer to another account\" dropdown\n\n  useEffect(() => {\n    load(antId);\n  }, [antId]);\n\n  useEffect(() => {\n    const newRows = getControllerRows();\n    setRows(newRows);\n  }, [state]);\n\n  async function load(id: ArweaveTransactionID) {\n    try {\n      const contract = await arweaveDataProvider.buildANTContract(id);\n      setState(contract.state);\n      const newRows = getControllerRows();\n      setRows(newRows);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n    }\n  }\n\n  if (!state) {\n    return (\n      <div className=\"modal-container\">\n        <Loader size={80} />\n      </div>\n    );\n  }\n\n  function handlePayloadCallback() {\n    payloadCallback({\n      target: controllersToRemove[0].toString(),\n    });\n  }\n\n  function updatePage(page: number) {\n    setTablePage(page);\n  }\n\n  function getControllerRows() {\n    if (state?.controllers && Array.isArray(state.controllers)) {\n      return state.controllers.map((controller) => ({\n        controller: new ArweaveTransactionID(controller),\n      }));\n    } else if (state?.controller) {\n      return [{ controller: new ArweaveTransactionID(state.controller) }];\n    }\n    return [];\n  }\n\n  return (\n    <div\n      className=\"modal-container\"\n      style={isMobile ? { padding: 'none' } : {}}\n    >\n      {/**modal header */}\n      <DialogModal\n        title={<h2 className=\"white\">Remove Controller</h2>}\n        body={\n          <div\n            className=\"flex flex-column\"\n            style={{ fontSize: '14px', maxWidth: '575px', minWidth: '475px' }}\n          >\n            <div className=\"flex flex-column\" style={{ gap: '10px' }}>\n              <span className=\"grey\">Contract ID</span>\n              <span className=\"white\">{antId.toString()}</span>\n            </div>\n            <div className=\"flex flex-row\">\n              <div\n                className=\"flex flex-column\"\n                style={{ gap: '10px', width: 'fit-content' }}\n              >\n                <span className=\"grey\">Nickname</span>\n                <span className=\"white\">\n                  {formatForMaxCharCount(state.name, 20)}\n                </span>\n              </div>\n              <div\n                className=\"flex flex-column\"\n                style={{ gap: '10px', width: 'fit-content' }}\n              >\n                <span className=\"grey\" style={{ whiteSpace: 'nowrap' }}>\n                  Total Controllers\n                </span>\n                <span className=\"white\">\n                  {/* legacy contract state check */}\n                  {getLegacyControllersFromState(state).length ?? 'N/A'}\n                </span>\n              </div>\n              <div\n                className=\"flex flex-column\"\n                style={{\n                  gap: '10px',\n                  height: '100%',\n                  justifyContent: 'flex-start',\n                  width: 'fit-content',\n                }}\n              >\n                <span className=\"grey\">Selected</span>\n                <span\n                  style={{\n                    color:\n                      controllersToRemove.length > 0\n                        ? 'var(--error-red)'\n                        : 'var(--text-white)',\n                  }}\n                >\n                  {controllersToRemove.length}\n                </span>\n              </div>\n            </div>\n            <div className=\"flex flex-column\" style={{ paddingBottom: '30px' }}>\n              <div className=\"flex flex-column\" style={{ gap: '10px' }}>\n                {rows.length ? (\n                  <>\n                    <Table\n                      prefixCls=\"remove-controller-table\"\n                      columns={[\n                        {\n                          title: '',\n                          dataIndex: 'action',\n                          key: 'action',\n                          align: 'left',\n                          width: '5%',\n                          className: 'grey whitespace-no-wrap',\n                          // eslint-disable-next-line\n                          render: (value: string, row: any) => (\n                            <Checkbox\n                              prefixCls=\"remove-controller-checkbox\"\n                              // TODO: remove once we have support for multi remove of controllers\n                              checked={controllersToRemove\n                                .map((c) => c.toString())\n                                .includes(row.controller.toString())}\n                              style={{ color: 'white' }}\n                              onChange={() => {\n                                if (\n                                  controllersToRemove.includes(row.controller)\n                                ) {\n                                  setControllersToRemove([]);\n                                  return;\n                                }\n                                setControllersToRemove([row.controller]);\n                              }}\n                            />\n                          ),\n                        },\n                        {\n                          title: '',\n                          dataIndex: 'controller',\n                          key: 'controller',\n                          align: 'left',\n                          width: '00%',\n                          className: 'grey whitespace-no-wrap',\n                          render: (value: ArweaveTransactionID) => (\n                            <span\n                              className={\n                                controllersToRemove.includes(value)\n                                  ? 'white'\n                                  : 'grey'\n                              }\n                            >\n                              {value.toString()}\n                            </span>\n                          ),\n                        },\n                      ]}\n                      dataSource={rows}\n                      pagination={{\n                        position: ['bottomLeft'],\n                        rootClassName:\n                          'table-pagination remove-controller-pagination',\n                        itemRender: (page, type, originalElement) =>\n                          getCustomPaginationButtons({\n                            page,\n                            type,\n                            originalElement,\n                            currentPage: tablePage,\n                          }),\n                        onChange: updatePage,\n                        showPrevNextJumpers: true,\n                        showSizeChanger: false,\n                        current: tablePage,\n                        pageSize: 8,\n                      }}\n                    />\n                  </>\n                ) : (\n                  <div className=\"flex flex-column flex-center\">\n                    <span\n                      className=\"flex flex-row warning-container center\"\n                      style={{ boxSizing: 'border-box' }}\n                    >\n                      {`This ANT token has no controllers to remove.`}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        }\n        onCancel={closeModal}\n        onClose={closeModal}\n        onNext={\n          controllersToRemove.length > 0\n            ? () => handlePayloadCallback()\n            : undefined\n        }\n        footer={\n          <div className=\"flex\">\n            <TransactionCost\n              fee={{}}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n              showBorder={false}\n            />\n          </div>\n        }\n        nextText=\"Remove\"\n        cancelText=\"Cancel\"\n      />\n    </div>\n  );\n}\n\nexport default RemoveControllersModal;\n"],"names":["SvgDotsThreeOutlineVertical","props","reactExports","SvgNewspaper","TransferANTModal","antId","closeModal","payloadCallback","arweaveDataProvider","useGlobalState","isMobile","useIsMobile","accepted","setAccepted","toAddress","setToAddress","isValidAddress","setIsValidAddress","state","setState","associatedNames","setAssociatedNames","fetchANTData","id","contract","associatedRecords","error","eventEmitter","isArweaveTransactionID","jsxRuntimeExports","Loader","handlePayloadCallback","DialogModal","formatForMaxCharCount","ValidationInput","validity","VALIDATION_INPUT_TYPES","SvgInfo","Checkbox","e","TransactionCost","AddControllerModal","load","RemoveControllersModal","controllersToRemove","setControllersToRemove","tablePage","setTablePage","rows","setRows","newRows","getControllerRows","updatePage","page","controller","ArweaveTransactionID","getLegacyControllersFromState","Table","value","row","c","type","originalElement","getCustomPaginationButtons"],"mappings":"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"}
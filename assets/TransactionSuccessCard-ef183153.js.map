{"version":3,"file":"TransactionSuccessCard-ef183153.js","sources":["../../src/components/icons/CircleCheckFilled.svg","../../src/components/icons/Pencil.svg","../../src/hooks/useDomainInfo.tsx","../../src/state/actions/dispatchANTInteraction.ts","../../src/components/modals/ConfirmTransactionModal/ConfirmTransactionModal.tsx","../../src/components/cards/TransactionSuccessCard/TransactionSuccessCard.tsx"],"sourcesContent":["export default \"__VITE_ASSET__de06d793__\"","export default \"__VITE_ASSET__9d6e6924__\"","import { ANT, AoANTWrite, AoArNSNameData } from '@ar.io/sdk/web';\nimport { ArweaveTransactionID } from '@src/services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '@src/state/contexts/GlobalState';\nimport { useWalletState } from '@src/state/contexts/WalletState';\nimport {\n  buildAntStateQuery,\n  buildArNSRecordQuery,\n  buildArNSRecordsQuery,\n  queryClient,\n} from '@src/utils/network';\nimport { RefetchOptions, useSuspenseQuery } from '@tanstack/react-query';\n\nexport default function useDomainInfo({\n  domain,\n  antId,\n}: {\n  domain?: string;\n  antId?: ArweaveTransactionID;\n}): {\n  data: {\n    arnsRecord?: AoArNSNameData;\n    associatedNames?: string[];\n    processId: ArweaveTransactionID;\n    antProcess: AoANTWrite;\n    name: string;\n    ticker: string;\n    owner: string;\n    controllers: string[];\n    undernameCount?: number;\n    apexRecord: {\n      transactionId: string;\n      ttlSeconds: number;\n    };\n  };\n  isLoading: boolean;\n  error: Error | null;\n  refetch: (options?: RefetchOptions) => void;\n} {\n  const [{ arioContract: arioProvider }] = useGlobalState();\n  const [{ wallet }] = useWalletState();\n\n  // TODO: this should be modified or removed\n  const { data, isLoading, error, refetch } = useSuspenseQuery({\n    queryKey: ['domainInfo', { domain, antId }],\n    queryFn: () => getDomainInfo({ domain, antId }).catch((error) => error),\n  });\n\n  async function getDomainInfo({\n    domain,\n    antId,\n  }: {\n    domain?: string;\n    antId?: ArweaveTransactionID;\n  }): Promise<{\n    arnsRecord?: AoArNSNameData;\n    associatedNames?: string[];\n    processId: ArweaveTransactionID;\n    antProcess: AoANTWrite;\n    name: string;\n    ticker: string;\n    owner: string;\n    controllers: string[];\n    undernameCount: number;\n    apexRecord: {\n      transactionId: string;\n      ttlSeconds: number;\n    };\n  }> {\n    if (!domain && !antId) {\n      throw new Error('No domain or antId provided');\n    }\n    const record = domain\n      ? await queryClient.fetchQuery(\n          buildArNSRecordQuery({ domain, arioContract: arioProvider }),\n        )\n      : undefined;\n\n    if (!antId && !record?.processId) {\n      throw new Error('No processId found');\n    }\n    const processId = antId || new ArweaveTransactionID(record?.processId);\n    const signer = wallet?.arconnectSigner;\n    if (!signer) {\n      throw new Error('No signer found');\n    }\n    const antProcess = ANT.init({\n      processId: processId.toString(),\n      signer,\n    });\n\n    const arnsRecords = await queryClient.fetchQuery(\n      buildArNSRecordsQuery({ arioContract: arioProvider }),\n    );\n    const associatedNames = Object.entries(arnsRecords)\n      .filter(([, r]) => r.processId == processId.toString())\n      .map(([d]) => d);\n\n    const state = await queryClient.fetchQuery(\n      buildAntStateQuery({ processId: processId.toString() }),\n    );\n    if (!state) throw new Error('State not found for ANT contract');\n    const {\n      Name: name,\n      Ticker: ticker,\n      Owner: owner,\n      Controllers: controllers,\n      Records: records,\n    } = state;\n    const apexRecord = records['@'];\n    const undernameCount = Object.keys(records).filter((k) => k !== '@').length;\n\n    if (!apexRecord) {\n      throw new Error('No apexRecord found');\n    }\n    return {\n      arnsRecord: record,\n      associatedNames,\n      processId,\n      antProcess,\n      name,\n      ticker,\n      owner,\n      controllers,\n      undernameCount,\n      apexRecord,\n    };\n  }\n\n  return { data, isLoading, error, refetch };\n}\n","import {\n  ANT,\n  ANT_CONTRACT_FUNCTIONS,\n  AoMessageResult,\n  ArconnectSigner,\n} from '@ar.io/sdk/web';\nimport { ArweaveTransactionID } from '@src/services/arweave/ArweaveTransactionID';\nimport { TransactionAction } from '@src/state/reducers/TransactionReducer';\nimport { ANT_INTERACTION_TYPES, ContractInteraction } from '@src/types';\nimport eventEmitter from '@src/utils/events';\nimport { Dispatch } from 'react';\n\nexport default async function dispatchANTInteraction({\n  payload,\n  workflowName,\n  processId,\n  signer,\n  owner,\n  dispatch,\n}: {\n  payload: Record<string, any>;\n  workflowName: ANT_INTERACTION_TYPES;\n  signer: ArconnectSigner;\n  owner: string;\n  processId: ArweaveTransactionID;\n  dispatch: Dispatch<TransactionAction>;\n}): Promise<ContractInteraction> {\n  let result: AoMessageResult | undefined = undefined;\n  let functionName;\n\n  const antProcess = ANT.init({\n    processId: processId.toString(),\n    signer,\n  });\n\n  try {\n    if (!antProcess) throw new Error('ANT provider is not defined');\n    dispatch({\n      type: 'setSigning',\n      payload: true,\n    });\n    switch (workflowName) {\n      case ANT_INTERACTION_TYPES.SET_NAME:\n        result = await antProcess.setName({ name: payload.name });\n        functionName = ANT_CONTRACT_FUNCTIONS.SET_NAME;\n        break;\n      case ANT_INTERACTION_TYPES.SET_TARGET_ID:\n        result = await antProcess.setRecord({\n          undername: '@',\n          transactionId: payload.transactionId,\n          ttlSeconds: payload.ttlSeconds,\n        });\n        functionName = ANT_CONTRACT_FUNCTIONS.SET_RECORD;\n        break;\n      case ANT_INTERACTION_TYPES.SET_TTL_SECONDS:\n        result = await antProcess.setRecord({\n          undername: '@',\n          transactionId: payload.transactionId,\n          ttlSeconds: payload.ttlSeconds,\n        });\n        functionName = ANT_CONTRACT_FUNCTIONS.SET_RECORD;\n        break;\n      case ANT_INTERACTION_TYPES.SET_TICKER:\n        result = await antProcess.setTicker({ ticker: payload.ticker });\n        functionName = ANT_CONTRACT_FUNCTIONS.SET_TICKER;\n        break;\n      case ANT_INTERACTION_TYPES.SET_CONTROLLER:\n        result = await antProcess.addController({\n          controller: payload.controller,\n        });\n        functionName = ANT_CONTRACT_FUNCTIONS.SET_CONTROLLER;\n        break;\n      case ANT_INTERACTION_TYPES.REMOVE_CONTROLLER:\n        result = await antProcess.removeController({\n          controller: payload.controller,\n        });\n        functionName = ANT_CONTRACT_FUNCTIONS.REMOVE_CONTROLLER;\n        break;\n      case ANT_INTERACTION_TYPES.TRANSFER:\n        result = await antProcess.transfer({ target: payload.target });\n        functionName = ANT_CONTRACT_FUNCTIONS.TRANSFER;\n        break;\n      case ANT_INTERACTION_TYPES.SET_RECORD:\n        result = await antProcess.setRecord({\n          undername: payload.subDomain,\n          transactionId: payload.transactionId,\n          ttlSeconds: payload.ttlSeconds,\n        });\n        functionName = ANT_CONTRACT_FUNCTIONS.SET_RECORD;\n        break;\n      case ANT_INTERACTION_TYPES.EDIT_RECORD:\n        result = await antProcess.setRecord({\n          undername: payload.subDomain,\n          transactionId: payload.transactionId,\n          ttlSeconds: payload.ttlSeconds,\n        });\n        functionName = ANT_CONTRACT_FUNCTIONS.SET_RECORD;\n        break;\n      case ANT_INTERACTION_TYPES.REMOVE_RECORD:\n        result = await antProcess.removeRecord({\n          undername: payload.subDomain,\n        });\n        functionName = ANT_CONTRACT_FUNCTIONS.REMOVE_RECORD;\n        break;\n      default:\n        throw new Error(`Unsupported workflow name: ${workflowName}`);\n    }\n  } catch (error) {\n    eventEmitter.emit('error', error);\n  } finally {\n    dispatch({\n      type: 'setSigning',\n      payload: false,\n    });\n  }\n  if (!result) {\n    throw new Error('Failed to dispatch ANT interaction');\n  }\n  if (!functionName) throw new Error('Failed to set workflow name');\n\n  const interaction: ContractInteraction = {\n    deployer: owner,\n    processId: processId.toString(),\n    id: result.id,\n    payload: {\n      ...payload,\n      function: functionName,\n    },\n    type: 'interaction',\n  };\n\n  dispatch({\n    type: 'setWorkflowName',\n    payload: workflowName,\n  });\n  dispatch({\n    type: 'setInteractionResult',\n    payload: interaction,\n  });\n  return interaction;\n}\n","import { ANT_INTERACTION_TYPES } from '../../../types';\nimport DialogModal from '../DialogModal/DialogModal';\n\nfunction ConfirmTransactionModal({\n  interactionType,\n  content = (\n    <span>{`Are you sure you want to ${interactionType.toLowerCase()}?`}</span>\n  ),\n  cancel,\n  confirm,\n  cancelText = 'Cancel',\n  confirmText = 'Confirm',\n}: {\n  interactionType: ANT_INTERACTION_TYPES;\n  content?: React.ReactNode;\n  cancel: () => void;\n  confirm: () => void;\n  fee?: Record<string, number>;\n  cancelText?: string;\n  confirmText?: string;\n}) {\n  return (\n    <div className=\"modal-container\">\n      <DialogModal\n        title={<h2 className=\"white\">{interactionType}</h2>}\n        body={\n          <div\n            className=\"flex flex-column white\"\n            style={{\n              gap: '20px',\n              fontSize: '13px',\n              padding: '15px 0px',\n              paddingTop: '0px',\n              lineHeight: '1.5',\n              fontWeight: 160,\n            }}\n          >\n            {content}\n          </div>\n        }\n        onCancel={cancel}\n        onClose={cancel}\n        nextText={confirmText}\n        cancelText={cancelText}\n        onNext={confirm}\n        footer={\n          <div style={{ width: 'fit-content' }}>\n            {/* <TransactionCost\n              fee={fee}\n              showBorder={false}\n              feeWrapperStyle={{ alignItems: 'flex-start' }}\n            /> */}\n          </div>\n        }\n      />\n    </div>\n  );\n}\n\nexport default ConfirmTransactionModal;\n","import { useEffect, useRef } from 'react';\n\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { CircleCheckFilled, CloseIcon } from '../../icons';\nimport ArweaveID from '../../layout/ArweaveID/ArweaveID';\n\nfunction TransactionSuccessCard({\n  txId,\n  title,\n  close,\n}: {\n  txId: ArweaveTransactionID;\n  close?: () => void;\n  title?: string;\n}) {\n  const cardRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    cardRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [txId, cardRef]);\n\n  return (\n    <div\n      ref={cardRef}\n      className=\"flex flex-row success-container center fade-in\"\n    >\n      <CircleCheckFilled\n        width={'20px'}\n        height={'20px'}\n        fill={'var(--success-green)'}\n      />\n      <div\n        className=\"flex-column\"\n        style={{\n          width: '100%',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-start',\n          gap: '5px',\n          fontSize: '16px',\n        }}\n      >\n        <span className=\"white\">{title ?? 'Transaction Complete'}</span>\n        <ArweaveID\n          id={txId}\n          shouldLink={true}\n          linkStyle={{ color: 'var(--success-green)' }}\n        />\n      </div>\n      {close ? (\n        <button className=\"button flex center pointer\" onClick={close}>\n          <CloseIcon width={'20px'} height={'20px'} fill=\"white\" />\n        </button>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n\nexport default TransactionSuccessCard;\n"],"names":["SvgCircleCheckFilled","props","reactExports","SvgPencil","useDomainInfo","domain","antId","arioProvider","useGlobalState","wallet","useWalletState","data","isLoading","error","refetch","useSuspenseQuery","getDomainInfo","error2","domain2","antId2","record","queryClient","buildArNSRecordQuery","processId","ArweaveTransactionID","signer","antProcess","ky","arnsRecords","buildArNSRecordsQuery","associatedNames","r","d","state","buildAntStateQuery","name","ticker","owner","controllers","records","apexRecord","undernameCount","k","dispatchANTInteraction","payload","workflowName","dispatch","result","functionName","ANT_INTERACTION_TYPES","hc","eventEmitter","interaction","ConfirmTransactionModal","interactionType","content","jsxRuntimeExports","cancel","confirm","cancelText","confirmText","DialogModal","TransactionSuccessCard","txId","title","close","cardRef","_a","ArweaveID","SvgClose"],"mappings":"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"}
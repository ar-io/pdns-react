{"version":3,"file":"ManageANT-6b844e1a.js","sources":["../../src/components/pages/ManageANT/ManageANT.tsx"],"sourcesContent":["import { Tooltip } from 'antd';\nimport { Table } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom';\n\nimport { useIsMobile } from '../../../hooks';\nimport { ANTContract } from '../../../services/arweave/ANTContract';\nimport { ArweaveTransactionID } from '../../../services/arweave/ArweaveTransactionID';\nimport { useGlobalState } from '../../../state/contexts/GlobalState';\nimport { useWalletState } from '../../../state/contexts/WalletState';\nimport {\n  ANTDetails,\n  ANT_INTERACTION_TYPES,\n  ARNSRecordEntry,\n  ContractInteraction,\n  INTERACTION_TYPES,\n  ManageANTRow,\n  UNDERNAME_TABLE_ACTIONS,\n  VALIDATION_INPUT_TYPES,\n} from '../../../types';\nimport {\n  getInteractionTypeFromField,\n  getUndernameCount,\n  mapTransactionDataKeyToPayload,\n  validateMaxASCIILength,\n  validateTTLSeconds,\n} from '../../../utils';\nimport {\n  ARNS_TX_ID_ENTRY_REGEX,\n  DEFAULT_TTL_SECONDS,\n  MAX_TTL_SECONDS,\n  MIN_TTL_SECONDS,\n  SMARTWEAVE_MAX_INPUT_SIZE,\n  STUB_ARWEAVE_TXID,\n  TTL_SECONDS_ENTRY_REGEX,\n} from '../../../utils/constants';\nimport eventEmitter from '../../../utils/events';\nimport { AntDetailKey, mapKeyToAttribute } from '../../cards/ANTCard/ANTCard';\nimport TransactionSuccessCard from '../../cards/TransactionSuccessCard/TransactionSuccessCard';\nimport {\n  CirclePending,\n  CodeSandboxIcon,\n  ExternalLinkIcon,\n  NewspaperIcon,\n  PencilIcon,\n  VerticalDotMenuIcon,\n} from '../../icons';\nimport ValidationInput from '../../inputs/text/ValidationInput/ValidationInput';\nimport TransactionStatus from '../../layout/TransactionStatus/TransactionStatus';\nimport PageLoader from '../../layout/progress/PageLoader/PageLoader';\nimport { TransferANTModal } from '../../modals';\nimport AddControllerModal from '../../modals/AddControllerModal/AddControllerModal';\nimport ConfirmTransactionModal, {\n  CONFIRM_TRANSACTION_PROPS_MAP,\n} from '../../modals/ConfirmTransactionModal/ConfirmTransactionModal';\nimport RemoveControllersModal from '../../modals/RemoveControllerModal/RemoveControllerModal';\nimport './styles.css';\n\nfunction ManageANT() {\n  const { id } = useParams();\n  const isMobile = useIsMobile();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [{ arweaveDataProvider }] = useGlobalState();\n  const [{ walletAddress }] = useWalletState();\n  const [antState, setANTState] = useState<ANTContract>();\n  const [antName, setANTName] = useState<string>();\n  const [editingField, setEditingField] = useState<string>();\n  const [modifiedValue, setModifiedValue] = useState<string | number>();\n  const [rows, setRows] = useState<ManageANTRow[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [showTransferANTModal, setShowTransferANTModal] =\n    useState<boolean>(false);\n  const [showAddControllerModal, setShowAddControllerModal] =\n    useState<boolean>(false);\n  const [showRemoveControllerModal, setShowRemoveControllerModal] =\n    useState<boolean>(false);\n  const [pendingInteractions, setPendingInteractions] = useState<\n    Array<ContractInteraction>\n  >([]);\n  const [showConfirmModal, setShowConfirmModal] = useState<boolean>(false);\n  const [interactionType, setInteractionType] =\n    useState<ANT_INTERACTION_TYPES>();\n  const [transactionData, setTransactionData] = useState<any>();\n  const [deployedTransactionId, setDeployedTransactionId] =\n    useState<ArweaveTransactionID>();\n\n  const EDITABLE_FIELDS = ['name', 'ticker', 'targetID', 'ttlSeconds'];\n\n  useEffect(() => {\n    if (!id || !walletAddress) {\n      navigate('/manage/ants');\n      return;\n    }\n    const txId = new ArweaveTransactionID(id);\n    fetchANTDetails(walletAddress, txId);\n  }, [id, deployedTransactionId]);\n\n  async function fetchANTDetails(\n    address: ArweaveTransactionID,\n    contractTxId: ArweaveTransactionID,\n  ) {\n    try {\n      setLoading(true);\n      const [\n        contract,\n        confirmations,\n        pendingContractInteractions,\n        associatedRecords,\n      ] = await Promise.all([\n        arweaveDataProvider.buildANTContract(contractTxId),\n        arweaveDataProvider\n          .getTransactionStatus(contractTxId)\n          .then((status) => status[contractTxId.toString()].confirmations),\n        arweaveDataProvider.getPendingContractInteractions(contractTxId),\n        arweaveDataProvider.getRecords<ARNSRecordEntry>({\n          filters: {\n            contractTxId: [contractTxId],\n          },\n        }),\n      ]);\n\n      // simple check that it is ANT shaped contract\n      if (!contract.isValid()) {\n        throw Error('Invalid ANT contract');\n      }\n\n      const names = Object.keys(associatedRecords);\n\n      const consolidatedDetails: ANTDetails = {\n        status: confirmations ?? 0,\n        contractTxId: contractTxId.toString(),\n        associatedNames: !names.length ? 'N/A' : names.join(', '),\n        //\n        undernames: getUndernameCount(contract.records).toString(),\n        name: contract.name ?? 'N/A',\n        ticker: contract.ticker ?? 'N/A',\n        owner: contract.owner ?? 'N/A',\n        controllers: contract.controllers.join(', ') ?? 'N/A',\n        targetID: contract.getRecord('@')?.transactionId ?? 'N/A',\n        ttlSeconds: contract.getRecord('@')?.ttlSeconds ?? DEFAULT_TTL_SECONDS,\n      };\n\n      const rows = Object.keys(consolidatedDetails).reduce(\n        (details: ManageANTRow[], attribute: string, index: number) => {\n          const existingValue =\n            consolidatedDetails[attribute as keyof ANTDetails];\n\n          const value = existingValue;\n          const detail = {\n            attribute,\n            value,\n            editable: EDITABLE_FIELDS.includes(attribute),\n            key: index,\n            interactionType: getInteractionTypeFromField(attribute),\n          };\n          details.push(detail);\n          return details;\n        },\n        [],\n      );\n\n      setPendingInteractions(pendingContractInteractions);\n      setANTState(contract);\n      setANTName(contract.name ?? id);\n      setRows(rows);\n      setLoading(false);\n    } catch (error) {\n      eventEmitter.emit('error', error);\n      navigate('/manage/ants', { state: location.pathname });\n    }\n  }\n\n  function handleSave(row: ManageANTRow) {\n    // TODO: make this more clear, we should be updating only the value that matters and not overwriting anything\n    if (!row.isValid || !row.interactionType || !antState) {\n      return;\n    }\n    const payload =\n      row.interactionType === INTERACTION_TYPES.SET_TARGET_ID\n        ? mapTransactionDataKeyToPayload(row.interactionType, [\n            '@',\n            modifiedValue!.toString(),\n            antState.getRecord('@')?.ttlSeconds ?? MIN_TTL_SECONDS,\n          ])\n        : row.interactionType === INTERACTION_TYPES.SET_TTL_SECONDS\n        ? mapTransactionDataKeyToPayload(row.interactionType, [\n            '@',\n            antState.getRecord('@')?.transactionId?.length\n              ? antState.getRecord('@')!.transactionId\n              : STUB_ARWEAVE_TXID,\n            +modifiedValue!,\n          ])\n        : mapTransactionDataKeyToPayload(\n            row.interactionType,\n            modifiedValue!.toString(),\n          );\n\n    if (payload && row.interactionType && id) {\n      const transactionData = {\n        ...payload,\n        assetId: id,\n      };\n      setInteractionType(\n        row.interactionType as unknown as ANT_INTERACTION_TYPES,\n      );\n      setTransactionData(transactionData);\n      setShowConfirmModal(true);\n    }\n  }\n\n  function getValidationPredicates(\n    value: string | number | undefined,\n    row: ManageANTRow,\n  ): { [x: string]: { fn: (value: any) => Promise<any>; required?: boolean } } {\n    switch (row.attribute) {\n      case 'ttlSeconds':\n        return {\n          [VALIDATION_INPUT_TYPES.VALID_TTL]: {\n            fn: validateTTLSeconds,\n          },\n        };\n\n      case 'name':\n      case 'ticker':\n        return {\n          [VALIDATION_INPUT_TYPES.VALID_ANT_NAME]: {\n            fn: (name: any) =>\n              validateMaxASCIILength(name, SMARTWEAVE_MAX_INPUT_SIZE),\n          },\n        };\n      case 'targetID':\n      case 'controller': {\n        return {\n          [VALIDATION_INPUT_TYPES.ARWEAVE_ID]: {\n            fn: (id: string) => arweaveDataProvider.validateArweaveId(id),\n          },\n        };\n      }\n      default:\n        return {};\n    }\n  }\n\n  return (\n    <>\n      <div className=\"page\" style={{ gap: '30px' }}>\n        {deployedTransactionId && interactionType ? (\n          <TransactionSuccessCard\n            txId={deployedTransactionId}\n            title={CONFIRM_TRANSACTION_PROPS_MAP[interactionType].successHeader}\n            close={() => {\n              setDeployedTransactionId(undefined);\n              setInteractionType(undefined);\n            }}\n          />\n        ) : (\n          <></>\n        )}\n        <div className=\"flex-row flex-space-between\">\n          <h2 className=\"flex white center\" style={{ gap: '15px' }}>\n            <CodeSandboxIcon\n              width={'24px'}\n              height={'24px'}\n              fill=\"var(--text-white)\"\n            />\n            {antName ?? id}\n          </h2>\n        </div>\n        <div className=\"flex-row center\">\n          {loading ? (\n            <div className=\"flex\" style={{ padding: '10%' }}>\n              <PageLoader\n                loading={loading}\n                message={'Loading ANT data, please wait.'}\n              />\n            </div>\n          ) : (\n            <Table\n              showHeader={false}\n              style={{ width: '100%' }}\n              onRow={(row: ManageANTRow) => ({\n                className: row.attribute === editingField ? 'active-row' : '',\n              })}\n              scroll={{ x: true }}\n              pagination={false}\n              prefixCls=\"manage-ant-table\"\n              columns={[\n                {\n                  title: '',\n                  dataIndex: 'attribute',\n                  key: 'attribute',\n                  align: 'left',\n                  width: isMobile ? '0px' : '20%',\n                  className: 'grey whitespace-no-wrap',\n                  render: (value: string) =>\n                    `${mapKeyToAttribute(value as AntDetailKey)}:`,\n                },\n                {\n                  title: '',\n                  dataIndex: 'value',\n                  key: 'value',\n                  align: 'left',\n                  width: '70%',\n                  className: 'white',\n                  render: (value: string | number, row: any) => {\n                    const isEditMode = row.attribute === editingField;\n                    if (row.attribute === 'status' && pendingInteractions)\n                      return (\n                        <Tooltip\n                          placement=\"right\"\n                          title={pendingInteractions.map(\n                            (interaction, index) => (\n                              <Link\n                                key={'interaction-' + index}\n                                className=\"link white text underline\"\n                                to={`https://viewblock.io/arweave/tx/${interaction.id}`}\n                                target=\"_blank\"\n                              >\n                                There is a pending transaction modifying this\n                                field.\n                                <ExternalLinkIcon\n                                  height={12}\n                                  width={12}\n                                  fill={'var(--text-white)'}\n                                />\n                              </Link>\n                            ),\n                          )}\n                          showArrow={true}\n                          overlayStyle={{\n                            maxWidth: 'fit-content',\n                          }}\n                        >\n                          {!pendingInteractions.length ? (\n                            <TransactionStatus confirmations={+value} />\n                          ) : (\n                            <CirclePending\n                              height={20}\n                              width={20}\n                              fill={'var(--accent)'}\n                            />\n                          )}\n                        </Tooltip>\n                      );\n                    if (row.attribute === 'undernames') {\n                      return (\n                        <span\n                          className=\"flex center\"\n                          style={{\n                            justifyContent: 'flex-start',\n                            gap: '10px',\n                          }}\n                        >\n                          {value}\n                          <NewspaperIcon\n                            width={'20px'}\n                            height={'20px'}\n                            fill=\"var(--text-grey)\"\n                          />\n                        </span>\n                      );\n                    }\n                    if (row.editable) {\n                      return (\n                        <>\n                          {/* TODO: add label for mobile view */}\n\n                          <ValidationInput\n                            customPattern={\n                              row.attribute === 'targetID'\n                                ? ARNS_TX_ID_ENTRY_REGEX\n                                : row.attribute === 'ttlSeconds'\n                                ? TTL_SECONDS_ENTRY_REGEX\n                                : undefined\n                            }\n                            catchInvalidInput={true}\n                            showValidationIcon={\n                              row.attribute == editingField && !!modifiedValue\n                            }\n                            onPressEnter={() => handleSave(row)}\n                            showValidationOutline={false}\n                            inputId={row.attribute + '-input'}\n                            minNumber={MIN_TTL_SECONDS}\n                            maxNumber={MAX_TTL_SECONDS}\n                            onClick={() => {\n                              if (editingField === row.attribute) {\n                                return;\n                              }\n                              setEditingField(row.attribute);\n                              setModifiedValue(value);\n                            }}\n                            inputClassName={'flex'}\n                            wrapperCustomStyle={{\n                              position: 'relative',\n                              boxSizing: 'border-box',\n                            }}\n                            inputCustomStyle={{\n                              width: '100%',\n                              overflow: 'hidden',\n                              fontSize: '13px',\n                              outline: 'none',\n                              color: 'white',\n                              alignContent: 'center',\n                              borderBottom: 'none',\n                              boxSizing: 'border-box',\n                              ...(isEditMode\n                                ? {\n                                    background: 'var(--card-bg)',\n                                    borderRadius: 'var(--corner-radius)',\n                                    border: '1px solid var(--text-faded)',\n                                    padding: '15px',\n                                  }\n                                : {\n                                    border: 'none',\n                                    background: 'transparent',\n                                  }),\n                            }}\n                            disabled={editingField !== row.attribute}\n                            placeholder={`Enter a ${mapKeyToAttribute(\n                              row.attribute,\n                            )}`}\n                            value={\n                              editingField === row.attribute\n                                ? modifiedValue\n                                : row.value\n                            }\n                            setValue={(e) => {\n                              if (row.attribute === editingField) {\n                                setModifiedValue(e ?? '');\n                              }\n                            }}\n                            validityCallback={(valid: boolean) => {\n                              row.isValid = valid;\n                            }}\n                            validationPredicates={getValidationPredicates(\n                              modifiedValue,\n                              row,\n                            )}\n                            maxCharLength={(length) => {\n                              if (\n                                row.attribute === 'name' ||\n                                row.attribute === 'ticker'\n                              ) {\n                                return (\n                                  length.length <= SMARTWEAVE_MAX_INPUT_SIZE\n                                );\n                              }\n                              if (row.attribute === 'ttlSeconds') {\n                                return length.length <= 7;\n                              }\n                              if (row.attribute === 'targetID') {\n                                return length.length <= 43;\n                              }\n                              return false;\n                            }}\n                          />\n                        </>\n                      );\n                    }\n                    return value;\n                  },\n                },\n                {\n                  title: '',\n                  dataIndex: 'action',\n                  key: 'action',\n                  width: '10%',\n                  align: 'right',\n                  className: 'white',\n                  render: (value: any, row: any) => {\n                    //TODO: if it's got an action attached, show it\n                    if (\n                      row.editable &&\n                      antState?.getOwnershipStatus(walletAddress)\n                    ) {\n                      return (\n                        <>\n                          {editingField !== row.attribute ? (\n                            <button\n                              className=\"button pointer hover\"\n                              onClick={() => {\n                                setEditingField(row.attribute);\n                                setModifiedValue(row.value);\n                              }}\n                              style={{ boxSizing: 'border-box' }}\n                            >\n                              <PencilIcon\n                                style={{\n                                  width: '16px',\n                                  height: '16px',\n                                  fill: 'var(--text-grey)',\n                                  boxSizing: 'border-box',\n                                }}\n                              />\n                            </button>\n                          ) : (\n                            <span\n                              className=\"flex flex-row\"\n                              style={{\n                                boxSizing: 'border-box',\n                                gap: '10px',\n                              }}\n                            >\n                              <button\n                                className=\"button bold grey pointer hover\"\n                                style={{\n                                  padding: '6px',\n                                  fontSize: '13px',\n                                  boxSizing: 'border-box',\n                                }}\n                                onClick={() => setEditingField('')}\n                              >\n                                Cancel\n                              </button>\n                              <button\n                                className=\"button-primary hover\"\n                                style={{\n                                  padding: '9px 12px',\n                                  fontSize: '13px',\n                                  boxSizing: 'border-box',\n                                }}\n                                onClick={() => handleSave(row)}\n                              >\n                                Save\n                              </button>\n                            </span>\n                          )}\n                        </>\n                      );\n                    }\n                    if (\n                      row.attribute === 'owner' &&\n                      antState?.getOwnershipStatus(walletAddress) === 'owner'\n                    ) {\n                      return (\n                        <span className={'flex flex-right'}>\n                          <button\n                            onClick={() => setShowTransferANTModal(true)}\n                            className=\"button-secondary\"\n                            style={{\n                              padding: '9px 12px',\n                              fontSize: '13px',\n                              boxSizing: 'border-box',\n                              letterSpacing: '0.5px',\n                              fontWeight: 500,\n                            }}\n                          >\n                            Transfer\n                          </button>\n                        </span>\n                      );\n                    }\n                    if (\n                      row.attribute === 'controllers' &&\n                      antState?.getOwnershipStatus(walletAddress) === 'owner'\n                    ) {\n                      return (\n                        // TODO: add condition to \"open\" to be false when modals are open\n                        <Tooltip\n                          open={undefined}\n                          placement=\"bottomRight\"\n                          color=\"var(--card-bg)\"\n                          autoAdjustOverflow\n                          arrow={false}\n                          overlayInnerStyle={{\n                            width: 'fit-content',\n                            border: '1px solid var(--text-faded)',\n                            padding: '9px 12px',\n                          }}\n                          overlayStyle={{ width: 'fit-content' }}\n                          trigger={'click'}\n                          title={\n                            <div\n                              className=\"flex-column flex\"\n                              style={{ gap: '10px' }}\n                            >\n                              <button\n                                className=\"flex flex-right white pointer button\"\n                                onClick={() => setShowAddControllerModal(true)}\n                              >\n                                Add Controller\n                              </button>\n                              <button\n                                className=\"flex flex-right white pointer button\"\n                                onClick={() =>\n                                  setShowRemoveControllerModal(true)\n                                }\n                              >\n                                Remove Controller\n                              </button>\n                            </div>\n                          }\n                        >\n                          <VerticalDotMenuIcon\n                            width={'18px'}\n                            height={'18px'}\n                            fill=\"var(--text-grey)\"\n                            className=\"pointer\"\n                          />\n                        </Tooltip>\n                      );\n                    }\n                    if (row.attribute === 'undernames') {\n                      return (\n                        <Tooltip\n                          placement=\"bottomRight\"\n                          color=\"var(--card-bg)\"\n                          autoAdjustOverflow\n                          arrow={false}\n                          overlayInnerStyle={{\n                            width: 'fit-content',\n                            border: '1px solid var(--text-faded)',\n                            padding: '9px 12px',\n                          }}\n                          overlayStyle={{ width: 'fit-content' }}\n                          trigger={'click'}\n                          title={\n                            <div\n                              className=\"flex-column flex\"\n                              style={{ gap: '10px' }}\n                            >\n                              <button\n                                className=\"flex flex-right white pointer button\"\n                                onClick={() =>\n                                  navigate(`/manage/ants/${id}/undernames`)\n                                }\n                              >\n                                Manage\n                              </button>\n                              {antState?.getOwnershipStatus(walletAddress) ? (\n                                <button\n                                  className=\"flex flex-right white pointer button\"\n                                  onClick={() => {\n                                    const params = new URLSearchParams({\n                                      modal: UNDERNAME_TABLE_ACTIONS.CREATE,\n                                    });\n                                    navigate(\n                                      encodeURI(\n                                        `/manage/ants/${id}/undernames?${params.toString()}`,\n                                      ),\n                                    );\n                                  }}\n                                >\n                                  Add Undername\n                                </button>\n                              ) : (\n                                <></>\n                              )}\n                            </div>\n                          }\n                        >\n                          <VerticalDotMenuIcon\n                            width={'18px'}\n                            height={'18px'}\n                            fill=\"var(--text-grey)\"\n                            className=\"pointer\"\n                          />\n                        </Tooltip>\n                      );\n                    }\n                    return value;\n                  },\n                },\n              ]}\n              dataSource={rows}\n            />\n          )}\n        </div>\n      </div>\n      {showTransferANTModal && id ? (\n        <TransferANTModal\n          closeModal={() => setShowTransferANTModal(false)}\n          antId={new ArweaveTransactionID(id)}\n          payloadCallback={(payload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.TRANSFER);\n            setShowConfirmModal(true);\n            setShowTransferANTModal(false);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n      {showAddControllerModal && id ? (\n        <AddControllerModal\n          closeModal={() => setShowAddControllerModal(false)}\n          antId={new ArweaveTransactionID(id)}\n          payloadCallback={(payload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.SET_CONTROLLER);\n            setShowConfirmModal(true);\n            setShowAddControllerModal(false);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n      {showRemoveControllerModal && id ? (\n        <RemoveControllersModal\n          closeModal={() => setShowRemoveControllerModal(false)}\n          antId={new ArweaveTransactionID(id)}\n          payloadCallback={(payload) => {\n            setTransactionData(payload);\n            setInteractionType(ANT_INTERACTION_TYPES.REMOVE_CONTROLLER);\n            setShowConfirmModal(true);\n            setShowRemoveControllerModal(false);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n      {showConfirmModal && interactionType && id ? (\n        <ConfirmTransactionModal\n          interactionType={interactionType}\n          payload={transactionData}\n          close={() => {\n            setShowConfirmModal(false);\n            setTransactionData(undefined);\n            setEditingField(undefined);\n            setModifiedValue(undefined);\n          }}\n          cancel={() => {\n            if (interactionType === ANT_INTERACTION_TYPES.TRANSFER) {\n              setShowTransferANTModal(true);\n              setShowConfirmModal(false);\n              return;\n            }\n            if (interactionType === ANT_INTERACTION_TYPES.SET_CONTROLLER) {\n              setShowAddControllerModal(true);\n              setShowConfirmModal(false);\n              return;\n            }\n            if (interactionType === ANT_INTERACTION_TYPES.REMOVE_CONTROLLER) {\n              setShowRemoveControllerModal(true);\n              setShowConfirmModal(false);\n              return;\n            }\n            setShowConfirmModal(false);\n            setTransactionData(undefined);\n            setEditingField(undefined);\n            setModifiedValue(undefined);\n          }}\n          cancelText={\n            interactionType === ANT_INTERACTION_TYPES.TRANSFER ||\n            interactionType === ANT_INTERACTION_TYPES.SET_CONTROLLER ||\n            interactionType === ANT_INTERACTION_TYPES.REMOVE_CONTROLLER\n              ? 'Back'\n              : 'Cancel'\n          }\n          setDeployedTransactionId={(id) => setDeployedTransactionId(id)}\n          assetId={new ArweaveTransactionID(id)}\n        />\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n\nexport default ManageANT;\n"],"names":["ManageANT","id","useParams","isMobile","useIsMobile","navigate","useNavigate","location","useLocation","arweaveDataProvider","useGlobalState","walletAddress","useWalletState","antState","setANTState","reactExports","antName","setANTName","editingField","setEditingField","modifiedValue","setModifiedValue","rows","setRows","loading","setLoading","showTransferANTModal","setShowTransferANTModal","showAddControllerModal","setShowAddControllerModal","showRemoveControllerModal","setShowRemoveControllerModal","pendingInteractions","setPendingInteractions","showConfirmModal","setShowConfirmModal","interactionType","setInteractionType","transactionData","setTransactionData","deployedTransactionId","setDeployedTransactionId","EDITABLE_FIELDS","txId","ArweaveTransactionID","fetchANTDetails","address","contractTxId","contract","confirmations","pendingContractInteractions","associatedRecords","status","names","consolidatedDetails","getUndernameCount","_a","_b","DEFAULT_TTL_SECONDS","rows2","details","attribute","index","value","detail","getInteractionTypeFromField","error","eventEmitter","handleSave","row","payload","INTERACTION_TYPES","mapTransactionDataKeyToPayload","MIN_TTL_SECONDS","_c","STUB_ARWEAVE_TXID","transactionData2","getValidationPredicates","VALIDATION_INPUT_TYPES","validateTTLSeconds","name","validateMaxASCIILength","SMARTWEAVE_MAX_INPUT_SIZE","id2","jsxRuntimeExports","TransactionSuccessCard","CONFIRM_TRANSACTION_PROPS_MAP","SvgCodeSandbox","PageLoader","Table","mapKeyToAttribute","isEditMode","Tooltip","interaction","Link","SvgExternalLink","SvgCirclePending","TransactionStatus","SvgNewspaper","ValidationInput","ARNS_TX_ID_ENTRY_REGEX","TTL_SECONDS_ENTRY_REGEX","MAX_TTL_SECONDS","e","valid","length","SvgPencil","SvgDotsThreeOutlineVertical","params","UNDERNAME_TABLE_ACTIONS","TransferANTModal","ANT_INTERACTION_TYPES","AddControllerModal","RemoveControllersModal","ConfirmTransactionModal"],"mappings":"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"}